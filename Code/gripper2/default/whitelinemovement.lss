
whitelinemovement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800200  00004eb2  00004f46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004eb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  0080037a  0080037a  000050c0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000050c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000057a  00000000  00000000  000050e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000169e  00000000  00000000  0000565a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000222  00000000  00000000  00006cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000020fa  00000000  00000000  00006f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  00009014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000536  00000000  00000000  00009454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__vector_54>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 eb       	ldi	r30, 0xB2	; 178
      fc:	fe e4       	ldi	r31, 0x4E	; 78
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 37       	cpi	r26, 0x7A	; 122
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	aa e7       	ldi	r26, 0x7A	; 122
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 3c       	cpi	r26, 0xC6	; 198
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <main>
     122:	0c 94 57 27 	jmp	0x4eae	; 0x4eae <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <timer5_init>:
// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz

void  timer5_init(){
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	
	TCCR5B = 0x00;	//Stop
     132:	e1 e2       	ldi	r30, 0x21	; 33
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     138:	e5 e2       	ldi	r30, 0x25	; 37
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     140:	e4 e2       	ldi	r30, 0x24	; 36
     142:	f1 e0       	ldi	r31, 0x01	; 1
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     148:	e9 e2       	ldi	r30, 0x29	; 41
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     14e:	e8 e2       	ldi	r30, 0x28	; 40
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     156:	eb e2       	ldi	r30, 0x2B	; 43
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     15c:	ea e2       	ldi	r30, 0x2A	; 42
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     164:	ed e2       	ldi	r30, 0x2D	; 45
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     16a:	ec e2       	ldi	r30, 0x2C	; 44
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	89 ea       	ldi	r24, 0xA9	; 169
     178:	80 83       	st	Z, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     17a:	e1 e2       	ldi	r30, 0x21	; 33
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	80 83       	st	Z, r24
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <lcd_port_config>:

void lcd_port_config (void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     190:	a7 e2       	ldi	r26, 0x27	; 39
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	e7 e2       	ldi	r30, 0x27	; 39
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	87 6f       	ori	r24, 0xF7	; 247
     19c:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     19e:	a8 e2       	ldi	r26, 0x28	; 40
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	e8 e2       	ldi	r30, 0x28	; 40
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	80 78       	andi	r24, 0x80	; 128
     1aa:	8c 93       	st	X, r24
}
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <config>:

void config()
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
	DDRJ = 0x00; //UART3 Input
     1ba:	e4 e0       	ldi	r30, 0x04	; 4
     1bc:	f1 e0       	ldi	r31, 0x01	; 1
     1be:	10 82       	st	Z, r1
	PORTJ = 0x00; // Set to 0
     1c0:	e5 e0       	ldi	r30, 0x05	; 5
     1c2:	f1 e0       	ldi	r31, 0x01	; 1
     1c4:	10 82       	st	Z, r1

	DDRC = DDRC | 0x08; //set output for buzzer PC3 
     1c6:	a7 e2       	ldi	r26, 0x27	; 39
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	e7 e2       	ldi	r30, 0x27	; 39
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	88 60       	ori	r24, 0x08	; 8
     1d2:	8c 93       	st	X, r24
	PORTC = PORTC & 0xf7;
     1d4:	a8 e2       	ldi	r26, 0x28	; 40
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	e8 e2       	ldi	r30, 0x28	; 40
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	87 7f       	andi	r24, 0xF7	; 247
     1e0:	8c 93       	st	X, r24

	DDRA = DDRA | 0x0f; //movement of motors .. all pins output
     1e2:	a1 e2       	ldi	r26, 0x21	; 33
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	e1 e2       	ldi	r30, 0x21	; 33
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	8f 60       	ori	r24, 0x0F	; 15
     1ee:	8c 93       	st	X, r24
	PORTA = PORTA & 0xf0 ; // set 0 initially
     1f0:	a2 e2       	ldi	r26, 0x22	; 34
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	e2 e2       	ldi	r30, 0x22	; 34
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	80 7f       	andi	r24, 0xF0	; 240
     1fc:	8c 93       	st	X, r24

	DDRL = DDRL | 0x18; // velocity .. Setting PL3 and PL4 pins as output for PWM generation
     1fe:	aa e0       	ldi	r26, 0x0A	; 10
     200:	b1 e0       	ldi	r27, 0x01	; 1
     202:	ea e0       	ldi	r30, 0x0A	; 10
     204:	f1 e0       	ldi	r31, 0x01	; 1
     206:	80 81       	ld	r24, Z
     208:	88 61       	ori	r24, 0x18	; 24
     20a:	8c 93       	st	X, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     20c:	ab e0       	ldi	r26, 0x0B	; 11
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	eb e0       	ldi	r30, 0x0B	; 11
     212:	f1 e0       	ldi	r31, 0x01	; 1
     214:	80 81       	ld	r24, Z
     216:	88 61       	ori	r24, 0x18	; 24
     218:	8c 93       	st	X, r24
	//PORTE = PORTE | 0x08;

	//ADC pin config:
	DDRF = 0x00; 
     21a:	e0 e3       	ldi	r30, 0x30	; 48
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	10 82       	st	Z, r1
 	PORTF = 0x00;
     220:	e1 e3       	ldi	r30, 0x31	; 49
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	10 82       	st	Z, r1
 	DDRK = 0x00;
     226:	e7 e0       	ldi	r30, 0x07	; 7
     228:	f1 e0       	ldi	r31, 0x01	; 1
     22a:	10 82       	st	Z, r1
 	PORTK = 0x00;
     22c:	e8 e0       	ldi	r30, 0x08	; 8
     22e:	f1 e0       	ldi	r31, 0x01	; 1
     230:	10 82       	st	Z, r1

}
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <port_init>:

void port_init()
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
	config();
     240:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <config>
	lcd_port_config();
     244:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_port_config>
}
     248:	cf 91       	pop	r28
     24a:	df 91       	pop	r29
     24c:	08 95       	ret

0000024e <adc_init>:


void adc_init()
{
     24e:	df 93       	push	r29
     250:	cf 93       	push	r28
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     256:	ea e7       	ldi	r30, 0x7A	; 122
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     25c:	eb e7       	ldi	r30, 0x7B	; 123
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     262:	ec e7       	ldi	r30, 0x7C	; 124
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 e2       	ldi	r24, 0x20	; 32
     268:	80 83       	st	Z, r24
	ACSR = 0x80;
     26a:	e0 e5       	ldi	r30, 0x50	; 80
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 e8       	ldi	r24, 0x80	; 128
     270:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     272:	ea e7       	ldi	r30, 0x7A	; 122
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	86 e8       	ldi	r24, 0x86	; 134
     278:	80 83       	st	Z, r24
}
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	08 95       	ret

00000280 <uart0_init>:
void uart0_init(void)
{
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
     288:	e1 ec       	ldi	r30, 0xC1	; 193
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     28e:	e0 ec       	ldi	r30, 0xC0	; 192
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	10 82       	st	Z, r1
 UCSR0C = 0x06;
     294:	e2 ec       	ldi	r30, 0xC2	; 194
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	86 e0       	ldi	r24, 0x06	; 6
     29a:	80 83       	st	Z, r24
 UBRR0L = 0x47; //set baud rate lo
     29c:	e4 ec       	ldi	r30, 0xC4	; 196
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	87 e4       	ldi	r24, 0x47	; 71
     2a2:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
     2a4:	e5 ec       	ldi	r30, 0xC5	; 197
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	10 82       	st	Z, r1
 UCSR0B = 0x98;
     2aa:	e1 ec       	ldi	r30, 0xC1	; 193
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	88 e9       	ldi	r24, 0x98	; 152
     2b0:	80 83       	st	Z, r24
}
     2b2:	cf 91       	pop	r28
     2b4:	df 91       	pop	r29
     2b6:	08 95       	ret

000002b8 <uart3_rfid_init>:

void uart3_rfid_init(void)
{
     2b8:	df 93       	push	r29
     2ba:	cf 93       	push	r28
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
	 UCSR3B = 0x00; //disable while setting baud rate
     2c0:	e1 e3       	ldi	r30, 0x31	; 49
     2c2:	f1 e0       	ldi	r31, 0x01	; 1
     2c4:	10 82       	st	Z, r1
	 UCSR3A = 0x00;
     2c6:	e0 e3       	ldi	r30, 0x30	; 48
     2c8:	f1 e0       	ldi	r31, 0x01	; 1
     2ca:	10 82       	st	Z, r1
	 UCSR3C = 0x06;
     2cc:	e2 e3       	ldi	r30, 0x32	; 50
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	86 e0       	ldi	r24, 0x06	; 6
     2d2:	80 83       	st	Z, r24
	 UBRR3L = 0x47; //set baud rate lo
     2d4:	e4 e3       	ldi	r30, 0x34	; 52
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	87 e4       	ldi	r24, 0x47	; 71
     2da:	80 83       	st	Z, r24
	 UBRR3H = 0x00; //set baud rate hi
     2dc:	e5 e3       	ldi	r30, 0x35	; 53
     2de:	f1 e0       	ldi	r31, 0x01	; 1
     2e0:	10 82       	st	Z, r1
	 UCSR3B = 0x98;
     2e2:	e1 e3       	ldi	r30, 0x31	; 49
     2e4:	f1 e0       	ldi	r31, 0x01	; 1
     2e6:	88 e9       	ldi	r24, 0x98	; 152
     2e8:	80 83       	st	Z, r24
}
     2ea:	cf 91       	pop	r28
     2ec:	df 91       	pop	r29
     2ee:	08 95       	ret

000002f0 <servo1_pin_config>:


// Servo motor control codes

void servo1_pin_config (void)
{
     2f0:	df 93       	push	r29
     2f2:	cf 93       	push	r28
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x20;  		//making PORTB 5 pin output
     2f8:	a4 e2       	ldi	r26, 0x24	; 36
     2fa:	b0 e0       	ldi	r27, 0x00	; 0
     2fc:	e4 e2       	ldi	r30, 0x24	; 36
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	80 62       	ori	r24, 0x20	; 32
     304:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x20; 		//setting PORTB 5 pin to logic 1
     306:	a5 e2       	ldi	r26, 0x25	; 37
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	e5 e2       	ldi	r30, 0x25	; 37
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	80 62       	ori	r24, 0x20	; 32
     312:	8c 93       	st	X, r24
}
     314:	cf 91       	pop	r28
     316:	df 91       	pop	r29
     318:	08 95       	ret

0000031a <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
     31a:	df 93       	push	r29
     31c:	cf 93       	push	r28
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x40;  		//making PORTB 6 pin output
     322:	a4 e2       	ldi	r26, 0x24	; 36
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e4 e2       	ldi	r30, 0x24	; 36
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	80 81       	ld	r24, Z
     32c:	80 64       	ori	r24, 0x40	; 64
     32e:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x40; 		//setting PORTB 6 pin to logic 1
     330:	a5 e2       	ldi	r26, 0x25	; 37
     332:	b0 e0       	ldi	r27, 0x00	; 0
     334:	e5 e2       	ldi	r30, 0x25	; 37
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	80 81       	ld	r24, Z
     33a:	80 64       	ori	r24, 0x40	; 64
     33c:	8c 93       	st	X, r24
}
     33e:	cf 91       	pop	r28
     340:	df 91       	pop	r29
     342:	08 95       	ret

00000344 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x80;  		//making PORTB 7 pin output
     34c:	a4 e2       	ldi	r26, 0x24	; 36
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	e4 e2       	ldi	r30, 0x24	; 36
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	80 68       	ori	r24, 0x80	; 128
     358:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x80; 		//setting PORTB 7 pin to logic 1
     35a:	a5 e2       	ldi	r26, 0x25	; 37
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	e5 e2       	ldi	r30, 0x25	; 37
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	80 68       	ori	r24, 0x80	; 128
     366:	8c 93       	st	X, r24
}
     368:	cf 91       	pop	r28
     36a:	df 91       	pop	r29
     36c:	08 95       	ret

0000036e <port_init_servo>:

//Initialize the ports
void port_init_servo(void)
{ 
     36e:	df 93       	push	r29
     370:	cf 93       	push	r28
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
	servo1_pin_config(); 		//Configure PORTB 5 pin for servo motor 1 operation
     376:	0e 94 78 01 	call	0x2f0	; 0x2f0 <servo1_pin_config>
 	servo2_pin_config(); 		//Configure PORTB 6 pin for servo motor 2 operation 
     37a:	0e 94 8d 01 	call	0x31a	; 0x31a <servo2_pin_config>
 	servo3_pin_config(); 		//Configure PORTB 7 pin for servo motor 3 operation  
     37e:	0e 94 a2 01 	call	0x344	; 0x344 <servo3_pin_config>
}
     382:	cf 91       	pop	r28
     384:	df 91       	pop	r29
     386:	08 95       	ret

00000388 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 42.187Hz 
void timer1_init(void)
{
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
 	TCCR1B = 0x00; 				//stop
     390:	e1 e8       	ldi	r30, 0x81	; 129
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	10 82       	st	Z, r1
 	TCNT1H = 0xFC; 				//Counter high value to which OCR1xH value is to be compared with
     396:	e5 e8       	ldi	r30, 0x85	; 133
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	8c ef       	ldi	r24, 0xFC	; 252
     39c:	80 83       	st	Z, r24
 	TCNT1L = 0x01;				//Counter low value to which OCR1xH value is to be compared with
     39e:	e4 e8       	ldi	r30, 0x84	; 132
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	80 83       	st	Z, r24
 	OCR1AH = 0x03;				//Output compare eegister high value for servo 1
     3a6:	e9 e8       	ldi	r30, 0x89	; 137
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	80 83       	st	Z, r24
 	OCR1AL = 0xFF;				//Output Compare Register low Value For servo 1
     3ae:	e8 e8       	ldi	r30, 0x88	; 136
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	8f ef       	ldi	r24, 0xFF	; 255
     3b4:	80 83       	st	Z, r24
 	OCR1BH = 0x03;				//Output compare eegister high value for servo 2
     3b6:	eb e8       	ldi	r30, 0x8B	; 139
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	83 e0       	ldi	r24, 0x03	; 3
     3bc:	80 83       	st	Z, r24
 	OCR1BL = 0xFF;				//Output Compare Register low Value For servo 2
     3be:	ea e8       	ldi	r30, 0x8A	; 138
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	8f ef       	ldi	r24, 0xFF	; 255
     3c4:	80 83       	st	Z, r24
 	OCR1CH = 0x03;				///Output compare eegister high value for servo 3
     3c6:	ed e8       	ldi	r30, 0x8D	; 141
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	80 83       	st	Z, r24
 	OCR1CL = 0xFF;				//Output Compare Register low Value For servo 3
     3ce:	ec e8       	ldi	r30, 0x8C	; 140
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	80 83       	st	Z, r24
 	ICR1H  = 0x03;	
     3d6:	e7 e8       	ldi	r30, 0x87	; 135
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	83 e0       	ldi	r24, 0x03	; 3
     3dc:	80 83       	st	Z, r24
 	ICR1L  = 0xFF;
     3de:	e6 e8       	ldi	r30, 0x86	; 134
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	80 83       	st	Z, r24
 	TCCR1A = 0xAB; 				/*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     3e6:	e0 e8       	ldi	r30, 0x80	; 128
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	8b ea       	ldi	r24, 0xAB	; 171
     3ec:	80 83       	st	Z, r24
 									For Overriding normal port functionalit to OCRnA outputs.
				  				{WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 	TCCR1C = 0x00;
     3ee:	e2 e8       	ldi	r30, 0x82	; 130
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	10 82       	st	Z, r1
 	TCCR1B = 0x0C; 				//WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     3f4:	e1 e8       	ldi	r30, 0x81	; 129
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	8c e0       	ldi	r24, 0x0C	; 12
     3fa:	80 83       	st	Z, r24
}
     3fc:	cf 91       	pop	r28
     3fe:	df 91       	pop	r29
     400:	08 95       	ret

00000402 <init_devices_servo>:


//Function to initialize all the peripherals
void init_devices_servo(void)
{
     402:	df 93       	push	r29
     404:	cf 93       	push	r28
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
 	port_init_servo();
     40a:	0e 94 b7 01 	call	0x36e	; 0x36e <port_init_servo>
 	timer1_init();	
     40e:	0e 94 c4 01 	call	0x388	; 0x388 <timer1_init>
}
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	08 95       	ret

00000418 <init_devices>:


void init_devices()
{
     418:	df 93       	push	r29
     41a:	cf 93       	push	r28
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	cli();
     420:	f8 94       	cli
	port_init();
     422:	0e 94 1c 01 	call	0x238	; 0x238 <port_init>
	init_devices_servo();
     426:	0e 94 01 02 	call	0x402	; 0x402 <init_devices_servo>
	adc_init();
     42a:	0e 94 27 01 	call	0x24e	; 0x24e <adc_init>
	timer5_init();
     42e:	0e 94 95 00 	call	0x12a	; 0x12a <timer5_init>
	lcd_set_4bit();
     432:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_set_4bit>
	lcd_init();
     436:	0e 94 d6 07 	call	0xfac	; 0xfac <lcd_init>
	uart0_init();
     43a:	0e 94 40 01 	call	0x280	; 0x280 <uart0_init>
	uart3_rfid_init();
     43e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <uart3_rfid_init>
	sei();
     442:	78 94       	sei
}
     444:	cf 91       	pop	r28
     446:	df 91       	pop	r29
     448:	08 95       	ret

0000044a <buzzer_off>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/signal.h>

void buzzer_off()
{
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	0f 92       	push	r0
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
     454:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
     456:	e6 e2       	ldi	r30, 0x26	; 38
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xF7;
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	87 7f       	andi	r24, 0xF7	; 247
     462:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
     464:	e8 e2       	ldi	r30, 0x28	; 40
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	80 83       	st	Z, r24
}
     46c:	0f 90       	pop	r0
     46e:	cf 91       	pop	r28
     470:	df 91       	pop	r29
     472:	08 95       	ret

00000474 <buzzer_on>:

void buzzer_on()
{
     474:	df 93       	push	r29
     476:	cf 93       	push	r28
     478:	0f 92       	push	r0
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
     47e:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
     480:	e6 e2       	ldi	r30, 0x26	; 38
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | 0x08;
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	88 60       	ori	r24, 0x08	; 8
     48c:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
     48e:	e8 e2       	ldi	r30, 0x28	; 40
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	80 83       	st	Z, r24
}
     496:	0f 90       	pop	r0
     498:	cf 91       	pop	r28
     49a:	df 91       	pop	r29
     49c:	08 95       	ret

0000049e <display_led>:
#include <util/delay.h>
#include <avr/signal.h>


void display_led(unsigned char to_display)
{
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	0f 92       	push	r0
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	89 83       	std	Y+1, r24	; 0x01
	PORTJ = to_display;
     4aa:	e5 e0       	ldi	r30, 0x05	; 5
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	80 83       	st	Z, r24
}
     4b2:	0f 90       	pop	r0
     4b4:	cf 91       	pop	r28
     4b6:	df 91       	pop	r29
     4b8:	08 95       	ret

000004ba <motion>:
#include <util/delay.h>
#include <avr/signal.h>
#include <math.h> //included to support power function

void motion(unsigned char dir)
{
     4ba:	df 93       	push	r29
     4bc:	cf 93       	push	r28
     4be:	0f 92       	push	r0
     4c0:	0f 92       	push	r0
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char port_restore = 0;
     4c8:	19 82       	std	Y+1, r1	; 0x01
	dir &= 0x0f; // removing upper nibbel as it is not needed
     4ca:	8a 81       	ldd	r24, Y+2	; 0x02
     4cc:	8f 70       	andi	r24, 0x0F	; 15
     4ce:	8a 83       	std	Y+2, r24	; 0x02
	port_restore = PINA;  // reading the PORTA's original status
     4d0:	e0 e2       	ldi	r30, 0x20	; 32
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xf0;  // setting lower direction nibbel to 0
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	80 7f       	andi	r24, 0xF0	; 240
     4dc:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | dir;  // adding lower nibbel for direction command and restoring the PORTA status
     4de:	99 81       	ldd	r25, Y+1	; 0x01
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	89 2b       	or	r24, r25
     4e4:	89 83       	std	Y+1, r24	; 0x01
	PORTA = port_restore;  // setting the command to the port
     4e6:	e2 e2       	ldi	r30, 0x22	; 34
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	80 83       	st	Z, r24
}
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	cf 91       	pop	r28
     4f4:	df 91       	pop	r29
     4f6:	08 95       	ret

000004f8 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
     4f8:	df 93       	push	r29
     4fa:	cf 93       	push	r28
     4fc:	0f 92       	push	r0
     4fe:	0f 92       	push	r0
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     508:	e8 e2       	ldi	r30, 0x28	; 40
     50a:	f1 e0       	ldi	r31, 0x01	; 1
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     510:	ea e2       	ldi	r30, 0x2A	; 42
     512:	f1 e0       	ldi	r31, 0x01	; 1
     514:	8a 81       	ldd	r24, Y+2	; 0x02
     516:	80 83       	st	Z, r24
}
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	cf 91       	pop	r28
     51e:	df 91       	pop	r29
     520:	08 95       	ret

00000522 <forward>:

void forward()
{
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
	motion(0x06);
     52a:	86 e0       	ldi	r24, 0x06	; 6
     52c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <motion>
}
     530:	cf 91       	pop	r28
     532:	df 91       	pop	r29
     534:	08 95       	ret

00000536 <backward>:
void backward()
{
     536:	df 93       	push	r29
     538:	cf 93       	push	r28
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
	motion(0x09);
     53e:	89 e0       	ldi	r24, 0x09	; 9
     540:	0e 94 5d 02 	call	0x4ba	; 0x4ba <motion>
}
     544:	cf 91       	pop	r28
     546:	df 91       	pop	r29
     548:	08 95       	ret

0000054a <left>:
void left()
{
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
	motion(0x05);
     552:	85 e0       	ldi	r24, 0x05	; 5
     554:	0e 94 5d 02 	call	0x4ba	; 0x4ba <motion>
}
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <right>:
void right()
{
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
	motion(0x0a);
     566:	8a e0       	ldi	r24, 0x0A	; 10
     568:	0e 94 5d 02 	call	0x4ba	; 0x4ba <motion>
}
     56c:	cf 91       	pop	r28
     56e:	df 91       	pop	r29
     570:	08 95       	ret

00000572 <small_left>:
void small_left()
{
     572:	df 93       	push	r29
     574:	cf 93       	push	r28
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
	motion(0x04);
     57a:	84 e0       	ldi	r24, 0x04	; 4
     57c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <motion>
}
     580:	cf 91       	pop	r28
     582:	df 91       	pop	r29
     584:	08 95       	ret

00000586 <small_right>:
void small_right()
{
     586:	df 93       	push	r29
     588:	cf 93       	push	r28
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
	motion(0x02);
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 5d 02 	call	0x4ba	; 0x4ba <motion>
}
     594:	cf 91       	pop	r28
     596:	df 91       	pop	r29
     598:	08 95       	ret

0000059a <stop>:

void stop()
{
     59a:	df 93       	push	r29
     59c:	cf 93       	push	r28
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
	motion(0x00);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <motion>
}
     5a8:	cf 91       	pop	r28
     5aa:	df 91       	pop	r29
     5ac:	08 95       	ret

000005ae <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	df 93       	push	r29
     5b4:	cf 93       	push	r28
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	c0 57       	subi	r28, 0x70	; 112
     5bc:	d0 40       	sbci	r29, 0x00	; 0
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	fe 01       	movw	r30, r28
     5ca:	e3 59       	subi	r30, 0x93	; 147
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	a0 e8       	ldi	r26, 0x80	; 128
     5d4:	bf e3       	ldi	r27, 0x3F	; 63
     5d6:	80 83       	st	Z, r24
     5d8:	91 83       	std	Z+1, r25	; 0x01
     5da:	a2 83       	std	Z+2, r26	; 0x02
     5dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5de:	8e 01       	movw	r16, r28
     5e0:	07 59       	subi	r16, 0x97	; 151
     5e2:	1f 4f       	sbci	r17, 0xFF	; 255
     5e4:	fe 01       	movw	r30, r28
     5e6:	e3 59       	subi	r30, 0x93	; 147
     5e8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ea:	60 81       	ld	r22, Z
     5ec:	71 81       	ldd	r23, Z+1	; 0x01
     5ee:	82 81       	ldd	r24, Z+2	; 0x02
     5f0:	93 81       	ldd	r25, Z+3	; 0x03
     5f2:	2d ec       	ldi	r18, 0xCD	; 205
     5f4:	3c ec       	ldi	r19, 0xCC	; 204
     5f6:	4c e2       	ldi	r20, 0x2C	; 44
     5f8:	55 e4       	ldi	r21, 0x45	; 69
     5fa:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     5fe:	dc 01       	movw	r26, r24
     600:	cb 01       	movw	r24, r22
     602:	f8 01       	movw	r30, r16
     604:	80 83       	st	Z, r24
     606:	91 83       	std	Z+1, r25	; 0x01
     608:	a2 83       	std	Z+2, r26	; 0x02
     60a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     60c:	fe 01       	movw	r30, r28
     60e:	e7 59       	subi	r30, 0x97	; 151
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	60 81       	ld	r22, Z
     614:	71 81       	ldd	r23, Z+1	; 0x01
     616:	82 81       	ldd	r24, Z+2	; 0x02
     618:	93 81       	ldd	r25, Z+3	; 0x03
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e8       	ldi	r20, 0x80	; 128
     620:	5f e3       	ldi	r21, 0x3F	; 63
     622:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
     626:	88 23       	and	r24, r24
     628:	44 f4       	brge	.+16     	; 0x63a <lcd_set_4bit+0x8c>
		__ticks = 1;
     62a:	fe 01       	movw	r30, r28
     62c:	e9 59       	subi	r30, 0x99	; 153
     62e:	ff 4f       	sbci	r31, 0xFF	; 255
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24
     638:	64 c0       	rjmp	.+200    	; 0x702 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     63a:	fe 01       	movw	r30, r28
     63c:	e7 59       	subi	r30, 0x97	; 151
     63e:	ff 4f       	sbci	r31, 0xFF	; 255
     640:	60 81       	ld	r22, Z
     642:	71 81       	ldd	r23, Z+1	; 0x01
     644:	82 81       	ldd	r24, Z+2	; 0x02
     646:	93 81       	ldd	r25, Z+3	; 0x03
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	3f ef       	ldi	r19, 0xFF	; 255
     64c:	4f e7       	ldi	r20, 0x7F	; 127
     64e:	57 e4       	ldi	r21, 0x47	; 71
     650:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
     654:	18 16       	cp	r1, r24
     656:	0c f0       	brlt	.+2      	; 0x65a <lcd_set_4bit+0xac>
     658:	43 c0       	rjmp	.+134    	; 0x6e0 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     65a:	fe 01       	movw	r30, r28
     65c:	e3 59       	subi	r30, 0x93	; 147
     65e:	ff 4f       	sbci	r31, 0xFF	; 255
     660:	60 81       	ld	r22, Z
     662:	71 81       	ldd	r23, Z+1	; 0x01
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	40 e2       	ldi	r20, 0x20	; 32
     66e:	51 e4       	ldi	r21, 0x41	; 65
     670:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	8e 01       	movw	r16, r28
     67a:	09 59       	subi	r16, 0x99	; 153
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     686:	dc 01       	movw	r26, r24
     688:	cb 01       	movw	r24, r22
     68a:	f8 01       	movw	r30, r16
     68c:	91 83       	std	Z+1, r25	; 0x01
     68e:	80 83       	st	Z, r24
     690:	1f c0       	rjmp	.+62     	; 0x6d0 <lcd_set_4bit+0x122>
     692:	fe 01       	movw	r30, r28
     694:	eb 59       	subi	r30, 0x9B	; 155
     696:	ff 4f       	sbci	r31, 0xFF	; 255
     698:	84 e1       	ldi	r24, 0x14	; 20
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	91 83       	std	Z+1, r25	; 0x01
     69e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6a0:	fe 01       	movw	r30, r28
     6a2:	eb 59       	subi	r30, 0x9B	; 155
     6a4:	ff 4f       	sbci	r31, 0xFF	; 255
     6a6:	80 81       	ld	r24, Z
     6a8:	91 81       	ldd	r25, Z+1	; 0x01
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0xfc>
     6ae:	fe 01       	movw	r30, r28
     6b0:	eb 59       	subi	r30, 0x9B	; 155
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	91 83       	std	Z+1, r25	; 0x01
     6b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b8:	de 01       	movw	r26, r28
     6ba:	a9 59       	subi	r26, 0x99	; 153
     6bc:	bf 4f       	sbci	r27, 0xFF	; 255
     6be:	fe 01       	movw	r30, r28
     6c0:	e9 59       	subi	r30, 0x99	; 153
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	80 81       	ld	r24, Z
     6c6:	91 81       	ldd	r25, Z+1	; 0x01
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	11 96       	adiw	r26, 0x01	; 1
     6cc:	9c 93       	st	X, r25
     6ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d0:	fe 01       	movw	r30, r28
     6d2:	e9 59       	subi	r30, 0x99	; 153
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	00 97       	sbiw	r24, 0x00	; 0
     6dc:	d1 f6       	brne	.-76     	; 0x692 <lcd_set_4bit+0xe4>
     6de:	27 c0       	rjmp	.+78     	; 0x72e <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e0:	8e 01       	movw	r16, r28
     6e2:	09 59       	subi	r16, 0x99	; 153
     6e4:	1f 4f       	sbci	r17, 0xFF	; 255
     6e6:	fe 01       	movw	r30, r28
     6e8:	e7 59       	subi	r30, 0x97	; 151
     6ea:	ff 4f       	sbci	r31, 0xFF	; 255
     6ec:	60 81       	ld	r22, Z
     6ee:	71 81       	ldd	r23, Z+1	; 0x01
     6f0:	82 81       	ldd	r24, Z+2	; 0x02
     6f2:	93 81       	ldd	r25, Z+3	; 0x03
     6f4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     6f8:	dc 01       	movw	r26, r24
     6fa:	cb 01       	movw	r24, r22
     6fc:	f8 01       	movw	r30, r16
     6fe:	91 83       	std	Z+1, r25	; 0x01
     700:	80 83       	st	Z, r24
     702:	de 01       	movw	r26, r28
     704:	ad 59       	subi	r26, 0x9D	; 157
     706:	bf 4f       	sbci	r27, 0xFF	; 255
     708:	fe 01       	movw	r30, r28
     70a:	e9 59       	subi	r30, 0x99	; 153
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	80 81       	ld	r24, Z
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	8d 93       	st	X+, r24
     714:	9c 93       	st	X, r25
     716:	fe 01       	movw	r30, r28
     718:	ed 59       	subi	r30, 0x9D	; 157
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	80 81       	ld	r24, Z
     71e:	91 81       	ldd	r25, Z+1	; 0x01
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <lcd_set_4bit+0x172>
     724:	fe 01       	movw	r30, r28
     726:	ed 59       	subi	r30, 0x9D	; 157
     728:	ff 4f       	sbci	r31, 0xFF	; 255
     72a:	91 83       	std	Z+1, r25	; 0x01
     72c:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     72e:	a8 e2       	ldi	r26, 0x28	; 40
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	e8 e2       	ldi	r30, 0x28	; 40
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	8e 7f       	andi	r24, 0xFE	; 254
     73a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     73c:	a8 e2       	ldi	r26, 0x28	; 40
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	e8 e2       	ldi	r30, 0x28	; 40
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	8d 7f       	andi	r24, 0xFD	; 253
     748:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     74a:	e8 e2       	ldi	r30, 0x28	; 40
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 e3       	ldi	r24, 0x30	; 48
     750:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     752:	a8 e2       	ldi	r26, 0x28	; 40
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	e8 e2       	ldi	r30, 0x28	; 40
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	84 60       	ori	r24, 0x04	; 4
     75e:	8c 93       	st	X, r24
     760:	fe 01       	movw	r30, r28
     762:	e1 5a       	subi	r30, 0xA1	; 161
     764:	ff 4f       	sbci	r31, 0xFF	; 255
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	a0 ea       	ldi	r26, 0xA0	; 160
     76c:	b0 e4       	ldi	r27, 0x40	; 64
     76e:	80 83       	st	Z, r24
     770:	91 83       	std	Z+1, r25	; 0x01
     772:	a2 83       	std	Z+2, r26	; 0x02
     774:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     776:	8e 01       	movw	r16, r28
     778:	05 5a       	subi	r16, 0xA5	; 165
     77a:	1f 4f       	sbci	r17, 0xFF	; 255
     77c:	fe 01       	movw	r30, r28
     77e:	e1 5a       	subi	r30, 0xA1	; 161
     780:	ff 4f       	sbci	r31, 0xFF	; 255
     782:	60 81       	ld	r22, Z
     784:	71 81       	ldd	r23, Z+1	; 0x01
     786:	82 81       	ldd	r24, Z+2	; 0x02
     788:	93 81       	ldd	r25, Z+3	; 0x03
     78a:	2d ec       	ldi	r18, 0xCD	; 205
     78c:	3c ec       	ldi	r19, 0xCC	; 204
     78e:	4c e2       	ldi	r20, 0x2C	; 44
     790:	55 e4       	ldi	r21, 0x45	; 69
     792:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	f8 01       	movw	r30, r16
     79c:	80 83       	st	Z, r24
     79e:	91 83       	std	Z+1, r25	; 0x01
     7a0:	a2 83       	std	Z+2, r26	; 0x02
     7a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7a4:	fe 01       	movw	r30, r28
     7a6:	e5 5a       	subi	r30, 0xA5	; 165
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	60 81       	ld	r22, Z
     7ac:	71 81       	ldd	r23, Z+1	; 0x01
     7ae:	82 81       	ldd	r24, Z+2	; 0x02
     7b0:	93 81       	ldd	r25, Z+3	; 0x03
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e8       	ldi	r20, 0x80	; 128
     7b8:	5f e3       	ldi	r21, 0x3F	; 63
     7ba:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
     7be:	88 23       	and	r24, r24
     7c0:	44 f4       	brge	.+16     	; 0x7d2 <lcd_set_4bit+0x224>
		__ticks = 1;
     7c2:	fe 01       	movw	r30, r28
     7c4:	e7 5a       	subi	r30, 0xA7	; 167
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	80 83       	st	Z, r24
     7d0:	64 c0       	rjmp	.+200    	; 0x89a <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     7d2:	fe 01       	movw	r30, r28
     7d4:	e5 5a       	subi	r30, 0xA5	; 165
     7d6:	ff 4f       	sbci	r31, 0xFF	; 255
     7d8:	60 81       	ld	r22, Z
     7da:	71 81       	ldd	r23, Z+1	; 0x01
     7dc:	82 81       	ldd	r24, Z+2	; 0x02
     7de:	93 81       	ldd	r25, Z+3	; 0x03
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	4f e7       	ldi	r20, 0x7F	; 127
     7e6:	57 e4       	ldi	r21, 0x47	; 71
     7e8:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
     7ec:	18 16       	cp	r1, r24
     7ee:	0c f0       	brlt	.+2      	; 0x7f2 <lcd_set_4bit+0x244>
     7f0:	43 c0       	rjmp	.+134    	; 0x878 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7f2:	fe 01       	movw	r30, r28
     7f4:	e1 5a       	subi	r30, 0xA1	; 161
     7f6:	ff 4f       	sbci	r31, 0xFF	; 255
     7f8:	60 81       	ld	r22, Z
     7fa:	71 81       	ldd	r23, Z+1	; 0x01
     7fc:	82 81       	ldd	r24, Z+2	; 0x02
     7fe:	93 81       	ldd	r25, Z+3	; 0x03
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e2       	ldi	r20, 0x20	; 32
     806:	51 e4       	ldi	r21, 0x41	; 65
     808:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	8e 01       	movw	r16, r28
     812:	07 5a       	subi	r16, 0xA7	; 167
     814:	1f 4f       	sbci	r17, 0xFF	; 255
     816:	bc 01       	movw	r22, r24
     818:	cd 01       	movw	r24, r26
     81a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	f8 01       	movw	r30, r16
     824:	91 83       	std	Z+1, r25	; 0x01
     826:	80 83       	st	Z, r24
     828:	1f c0       	rjmp	.+62     	; 0x868 <lcd_set_4bit+0x2ba>
     82a:	fe 01       	movw	r30, r28
     82c:	e9 5a       	subi	r30, 0xA9	; 169
     82e:	ff 4f       	sbci	r31, 0xFF	; 255
     830:	84 e1       	ldi	r24, 0x14	; 20
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	91 83       	std	Z+1, r25	; 0x01
     836:	80 83       	st	Z, r24
     838:	fe 01       	movw	r30, r28
     83a:	e9 5a       	subi	r30, 0xA9	; 169
     83c:	ff 4f       	sbci	r31, 0xFF	; 255
     83e:	80 81       	ld	r24, Z
     840:	91 81       	ldd	r25, Z+1	; 0x01
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <lcd_set_4bit+0x294>
     846:	fe 01       	movw	r30, r28
     848:	e9 5a       	subi	r30, 0xA9	; 169
     84a:	ff 4f       	sbci	r31, 0xFF	; 255
     84c:	91 83       	std	Z+1, r25	; 0x01
     84e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     850:	de 01       	movw	r26, r28
     852:	a7 5a       	subi	r26, 0xA7	; 167
     854:	bf 4f       	sbci	r27, 0xFF	; 255
     856:	fe 01       	movw	r30, r28
     858:	e7 5a       	subi	r30, 0xA7	; 167
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	80 81       	ld	r24, Z
     85e:	91 81       	ldd	r25, Z+1	; 0x01
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	11 96       	adiw	r26, 0x01	; 1
     864:	9c 93       	st	X, r25
     866:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     868:	fe 01       	movw	r30, r28
     86a:	e7 5a       	subi	r30, 0xA7	; 167
     86c:	ff 4f       	sbci	r31, 0xFF	; 255
     86e:	80 81       	ld	r24, Z
     870:	91 81       	ldd	r25, Z+1	; 0x01
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	d1 f6       	brne	.-76     	; 0x82a <lcd_set_4bit+0x27c>
     876:	27 c0       	rjmp	.+78     	; 0x8c6 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     878:	8e 01       	movw	r16, r28
     87a:	07 5a       	subi	r16, 0xA7	; 167
     87c:	1f 4f       	sbci	r17, 0xFF	; 255
     87e:	fe 01       	movw	r30, r28
     880:	e5 5a       	subi	r30, 0xA5	; 165
     882:	ff 4f       	sbci	r31, 0xFF	; 255
     884:	60 81       	ld	r22, Z
     886:	71 81       	ldd	r23, Z+1	; 0x01
     888:	82 81       	ldd	r24, Z+2	; 0x02
     88a:	93 81       	ldd	r25, Z+3	; 0x03
     88c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	f8 01       	movw	r30, r16
     896:	91 83       	std	Z+1, r25	; 0x01
     898:	80 83       	st	Z, r24
     89a:	de 01       	movw	r26, r28
     89c:	ab 5a       	subi	r26, 0xAB	; 171
     89e:	bf 4f       	sbci	r27, 0xFF	; 255
     8a0:	fe 01       	movw	r30, r28
     8a2:	e7 5a       	subi	r30, 0xA7	; 167
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	8d 93       	st	X+, r24
     8ac:	9c 93       	st	X, r25
     8ae:	fe 01       	movw	r30, r28
     8b0:	eb 5a       	subi	r30, 0xAB	; 171
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	80 81       	ld	r24, Z
     8b6:	91 81       	ldd	r25, Z+1	; 0x01
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <lcd_set_4bit+0x30a>
     8bc:	fe 01       	movw	r30, r28
     8be:	eb 5a       	subi	r30, 0xAB	; 171
     8c0:	ff 4f       	sbci	r31, 0xFF	; 255
     8c2:	91 83       	std	Z+1, r25	; 0x01
     8c4:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8c6:	a8 e2       	ldi	r26, 0x28	; 40
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	e8 e2       	ldi	r30, 0x28	; 40
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	8b 7f       	andi	r24, 0xFB	; 251
     8d2:	8c 93       	st	X, r24
     8d4:	fe 01       	movw	r30, r28
     8d6:	ef 5a       	subi	r30, 0xAF	; 175
     8d8:	ff 4f       	sbci	r31, 0xFF	; 255
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	a0 e8       	ldi	r26, 0x80	; 128
     8e0:	bf e3       	ldi	r27, 0x3F	; 63
     8e2:	80 83       	st	Z, r24
     8e4:	91 83       	std	Z+1, r25	; 0x01
     8e6:	a2 83       	std	Z+2, r26	; 0x02
     8e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8ea:	8e 01       	movw	r16, r28
     8ec:	03 5b       	subi	r16, 0xB3	; 179
     8ee:	1f 4f       	sbci	r17, 0xFF	; 255
     8f0:	fe 01       	movw	r30, r28
     8f2:	ef 5a       	subi	r30, 0xAF	; 175
     8f4:	ff 4f       	sbci	r31, 0xFF	; 255
     8f6:	60 81       	ld	r22, Z
     8f8:	71 81       	ldd	r23, Z+1	; 0x01
     8fa:	82 81       	ldd	r24, Z+2	; 0x02
     8fc:	93 81       	ldd	r25, Z+3	; 0x03
     8fe:	2d ec       	ldi	r18, 0xCD	; 205
     900:	3c ec       	ldi	r19, 0xCC	; 204
     902:	4c e2       	ldi	r20, 0x2C	; 44
     904:	55 e4       	ldi	r21, 0x45	; 69
     906:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	f8 01       	movw	r30, r16
     910:	80 83       	st	Z, r24
     912:	91 83       	std	Z+1, r25	; 0x01
     914:	a2 83       	std	Z+2, r26	; 0x02
     916:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     918:	fe 01       	movw	r30, r28
     91a:	e3 5b       	subi	r30, 0xB3	; 179
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	60 81       	ld	r22, Z
     920:	71 81       	ldd	r23, Z+1	; 0x01
     922:	82 81       	ldd	r24, Z+2	; 0x02
     924:	93 81       	ldd	r25, Z+3	; 0x03
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e8       	ldi	r20, 0x80	; 128
     92c:	5f e3       	ldi	r21, 0x3F	; 63
     92e:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
     932:	88 23       	and	r24, r24
     934:	44 f4       	brge	.+16     	; 0x946 <lcd_set_4bit+0x398>
		__ticks = 1;
     936:	fe 01       	movw	r30, r28
     938:	e5 5b       	subi	r30, 0xB5	; 181
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	91 83       	std	Z+1, r25	; 0x01
     942:	80 83       	st	Z, r24
     944:	64 c0       	rjmp	.+200    	; 0xa0e <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     946:	fe 01       	movw	r30, r28
     948:	e3 5b       	subi	r30, 0xB3	; 179
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
     94c:	60 81       	ld	r22, Z
     94e:	71 81       	ldd	r23, Z+1	; 0x01
     950:	82 81       	ldd	r24, Z+2	; 0x02
     952:	93 81       	ldd	r25, Z+3	; 0x03
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	3f ef       	ldi	r19, 0xFF	; 255
     958:	4f e7       	ldi	r20, 0x7F	; 127
     95a:	57 e4       	ldi	r21, 0x47	; 71
     95c:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
     960:	18 16       	cp	r1, r24
     962:	0c f0       	brlt	.+2      	; 0x966 <lcd_set_4bit+0x3b8>
     964:	43 c0       	rjmp	.+134    	; 0x9ec <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     966:	fe 01       	movw	r30, r28
     968:	ef 5a       	subi	r30, 0xAF	; 175
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	60 81       	ld	r22, Z
     96e:	71 81       	ldd	r23, Z+1	; 0x01
     970:	82 81       	ldd	r24, Z+2	; 0x02
     972:	93 81       	ldd	r25, Z+3	; 0x03
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e2       	ldi	r20, 0x20	; 32
     97a:	51 e4       	ldi	r21, 0x41	; 65
     97c:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	8e 01       	movw	r16, r28
     986:	05 5b       	subi	r16, 0xB5	; 181
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	f8 01       	movw	r30, r16
     998:	91 83       	std	Z+1, r25	; 0x01
     99a:	80 83       	st	Z, r24
     99c:	1f c0       	rjmp	.+62     	; 0x9dc <lcd_set_4bit+0x42e>
     99e:	fe 01       	movw	r30, r28
     9a0:	e7 5b       	subi	r30, 0xB7	; 183
     9a2:	ff 4f       	sbci	r31, 0xFF	; 255
     9a4:	84 e1       	ldi	r24, 0x14	; 20
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	80 83       	st	Z, r24
     9ac:	fe 01       	movw	r30, r28
     9ae:	e7 5b       	subi	r30, 0xB7	; 183
     9b0:	ff 4f       	sbci	r31, 0xFF	; 255
     9b2:	80 81       	ld	r24, Z
     9b4:	91 81       	ldd	r25, Z+1	; 0x01
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <lcd_set_4bit+0x408>
     9ba:	fe 01       	movw	r30, r28
     9bc:	e7 5b       	subi	r30, 0xB7	; 183
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	91 83       	std	Z+1, r25	; 0x01
     9c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c4:	de 01       	movw	r26, r28
     9c6:	a5 5b       	subi	r26, 0xB5	; 181
     9c8:	bf 4f       	sbci	r27, 0xFF	; 255
     9ca:	fe 01       	movw	r30, r28
     9cc:	e5 5b       	subi	r30, 0xB5	; 181
     9ce:	ff 4f       	sbci	r31, 0xFF	; 255
     9d0:	80 81       	ld	r24, Z
     9d2:	91 81       	ldd	r25, Z+1	; 0x01
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	11 96       	adiw	r26, 0x01	; 1
     9d8:	9c 93       	st	X, r25
     9da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9dc:	fe 01       	movw	r30, r28
     9de:	e5 5b       	subi	r30, 0xB5	; 181
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	80 81       	ld	r24, Z
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	00 97       	sbiw	r24, 0x00	; 0
     9e8:	d1 f6       	brne	.-76     	; 0x99e <lcd_set_4bit+0x3f0>
     9ea:	27 c0       	rjmp	.+78     	; 0xa3a <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ec:	8e 01       	movw	r16, r28
     9ee:	05 5b       	subi	r16, 0xB5	; 181
     9f0:	1f 4f       	sbci	r17, 0xFF	; 255
     9f2:	fe 01       	movw	r30, r28
     9f4:	e3 5b       	subi	r30, 0xB3	; 179
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	60 81       	ld	r22, Z
     9fa:	71 81       	ldd	r23, Z+1	; 0x01
     9fc:	82 81       	ldd	r24, Z+2	; 0x02
     9fe:	93 81       	ldd	r25, Z+3	; 0x03
     a00:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	f8 01       	movw	r30, r16
     a0a:	91 83       	std	Z+1, r25	; 0x01
     a0c:	80 83       	st	Z, r24
     a0e:	de 01       	movw	r26, r28
     a10:	a9 5b       	subi	r26, 0xB9	; 185
     a12:	bf 4f       	sbci	r27, 0xFF	; 255
     a14:	fe 01       	movw	r30, r28
     a16:	e5 5b       	subi	r30, 0xB5	; 181
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	80 81       	ld	r24, Z
     a1c:	91 81       	ldd	r25, Z+1	; 0x01
     a1e:	8d 93       	st	X+, r24
     a20:	9c 93       	st	X, r25
     a22:	fe 01       	movw	r30, r28
     a24:	e9 5b       	subi	r30, 0xB9	; 185
     a26:	ff 4f       	sbci	r31, 0xFF	; 255
     a28:	80 81       	ld	r24, Z
     a2a:	91 81       	ldd	r25, Z+1	; 0x01
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <lcd_set_4bit+0x47e>
     a30:	fe 01       	movw	r30, r28
     a32:	e9 5b       	subi	r30, 0xB9	; 185
     a34:	ff 4f       	sbci	r31, 0xFF	; 255
     a36:	91 83       	std	Z+1, r25	; 0x01
     a38:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a3a:	a8 e2       	ldi	r26, 0x28	; 40
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	e8 e2       	ldi	r30, 0x28	; 40
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	8e 7f       	andi	r24, 0xFE	; 254
     a46:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a48:	a8 e2       	ldi	r26, 0x28	; 40
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	e8 e2       	ldi	r30, 0x28	; 40
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	8d 7f       	andi	r24, 0xFD	; 253
     a54:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     a56:	e8 e2       	ldi	r30, 0x28	; 40
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 e3       	ldi	r24, 0x30	; 48
     a5c:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a5e:	a8 e2       	ldi	r26, 0x28	; 40
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e8 e2       	ldi	r30, 0x28	; 40
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	84 60       	ori	r24, 0x04	; 4
     a6a:	8c 93       	st	X, r24
     a6c:	fe 01       	movw	r30, r28
     a6e:	ed 5b       	subi	r30, 0xBD	; 189
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	a0 ea       	ldi	r26, 0xA0	; 160
     a78:	b0 e4       	ldi	r27, 0x40	; 64
     a7a:	80 83       	st	Z, r24
     a7c:	91 83       	std	Z+1, r25	; 0x01
     a7e:	a2 83       	std	Z+2, r26	; 0x02
     a80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a82:	8e 01       	movw	r16, r28
     a84:	01 5c       	subi	r16, 0xC1	; 193
     a86:	1f 4f       	sbci	r17, 0xFF	; 255
     a88:	fe 01       	movw	r30, r28
     a8a:	ed 5b       	subi	r30, 0xBD	; 189
     a8c:	ff 4f       	sbci	r31, 0xFF	; 255
     a8e:	60 81       	ld	r22, Z
     a90:	71 81       	ldd	r23, Z+1	; 0x01
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	93 81       	ldd	r25, Z+3	; 0x03
     a96:	2d ec       	ldi	r18, 0xCD	; 205
     a98:	3c ec       	ldi	r19, 0xCC	; 204
     a9a:	4c e2       	ldi	r20, 0x2C	; 44
     a9c:	55 e4       	ldi	r21, 0x45	; 69
     a9e:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	f8 01       	movw	r30, r16
     aa8:	80 83       	st	Z, r24
     aaa:	91 83       	std	Z+1, r25	; 0x01
     aac:	a2 83       	std	Z+2, r26	; 0x02
     aae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ab0:	fe 01       	movw	r30, r28
     ab2:	ff 96       	adiw	r30, 0x3f	; 63
     ab4:	60 81       	ld	r22, Z
     ab6:	71 81       	ldd	r23, Z+1	; 0x01
     ab8:	82 81       	ldd	r24, Z+2	; 0x02
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e8       	ldi	r20, 0x80	; 128
     ac2:	5f e3       	ldi	r21, 0x3F	; 63
     ac4:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
     ac8:	88 23       	and	r24, r24
     aca:	2c f4       	brge	.+10     	; 0xad6 <lcd_set_4bit+0x528>
		__ticks = 1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	9e af       	std	Y+62, r25	; 0x3e
     ad2:	8d af       	std	Y+61, r24	; 0x3d
     ad4:	46 c0       	rjmp	.+140    	; 0xb62 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     ad6:	fe 01       	movw	r30, r28
     ad8:	ff 96       	adiw	r30, 0x3f	; 63
     ada:	60 81       	ld	r22, Z
     adc:	71 81       	ldd	r23, Z+1	; 0x01
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	3f ef       	ldi	r19, 0xFF	; 255
     ae6:	4f e7       	ldi	r20, 0x7F	; 127
     ae8:	57 e4       	ldi	r21, 0x47	; 71
     aea:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
     aee:	18 16       	cp	r1, r24
     af0:	64 f5       	brge	.+88     	; 0xb4a <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     af2:	fe 01       	movw	r30, r28
     af4:	ed 5b       	subi	r30, 0xBD	; 189
     af6:	ff 4f       	sbci	r31, 0xFF	; 255
     af8:	60 81       	ld	r22, Z
     afa:	71 81       	ldd	r23, Z+1	; 0x01
     afc:	82 81       	ldd	r24, Z+2	; 0x02
     afe:	93 81       	ldd	r25, Z+3	; 0x03
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e2       	ldi	r20, 0x20	; 32
     b06:	51 e4       	ldi	r21, 0x41	; 65
     b08:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	bc 01       	movw	r22, r24
     b12:	cd 01       	movw	r24, r26
     b14:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	9e af       	std	Y+62, r25	; 0x3e
     b1e:	8d af       	std	Y+61, r24	; 0x3d
     b20:	0f c0       	rjmp	.+30     	; 0xb40 <lcd_set_4bit+0x592>
     b22:	84 e1       	ldi	r24, 0x14	; 20
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	9c af       	std	Y+60, r25	; 0x3c
     b28:	8b af       	std	Y+59, r24	; 0x3b
     b2a:	8b ad       	ldd	r24, Y+59	; 0x3b
     b2c:	9c ad       	ldd	r25, Y+60	; 0x3c
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <lcd_set_4bit+0x580>
     b32:	9c af       	std	Y+60, r25	; 0x3c
     b34:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b36:	8d ad       	ldd	r24, Y+61	; 0x3d
     b38:	9e ad       	ldd	r25, Y+62	; 0x3e
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	9e af       	std	Y+62, r25	; 0x3e
     b3e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b40:	8d ad       	ldd	r24, Y+61	; 0x3d
     b42:	9e ad       	ldd	r25, Y+62	; 0x3e
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	69 f7       	brne	.-38     	; 0xb22 <lcd_set_4bit+0x574>
     b48:	16 c0       	rjmp	.+44     	; 0xb76 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b4a:	fe 01       	movw	r30, r28
     b4c:	ff 96       	adiw	r30, 0x3f	; 63
     b4e:	60 81       	ld	r22, Z
     b50:	71 81       	ldd	r23, Z+1	; 0x01
     b52:	82 81       	ldd	r24, Z+2	; 0x02
     b54:	93 81       	ldd	r25, Z+3	; 0x03
     b56:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	9e af       	std	Y+62, r25	; 0x3e
     b60:	8d af       	std	Y+61, r24	; 0x3d
     b62:	8d ad       	ldd	r24, Y+61	; 0x3d
     b64:	9e ad       	ldd	r25, Y+62	; 0x3e
     b66:	9a af       	std	Y+58, r25	; 0x3a
     b68:	89 af       	std	Y+57, r24	; 0x39
     b6a:	89 ad       	ldd	r24, Y+57	; 0x39
     b6c:	9a ad       	ldd	r25, Y+58	; 0x3a
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <lcd_set_4bit+0x5c0>
     b72:	9a af       	std	Y+58, r25	; 0x3a
     b74:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b76:	a8 e2       	ldi	r26, 0x28	; 40
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e8 e2       	ldi	r30, 0x28	; 40
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8b 7f       	andi	r24, 0xFB	; 251
     b82:	8c 93       	st	X, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a0 e8       	ldi	r26, 0x80	; 128
     b8a:	bf e3       	ldi	r27, 0x3F	; 63
     b8c:	8d ab       	std	Y+53, r24	; 0x35
     b8e:	9e ab       	std	Y+54, r25	; 0x36
     b90:	af ab       	std	Y+55, r26	; 0x37
     b92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b94:	6d a9       	ldd	r22, Y+53	; 0x35
     b96:	7e a9       	ldd	r23, Y+54	; 0x36
     b98:	8f a9       	ldd	r24, Y+55	; 0x37
     b9a:	98 ad       	ldd	r25, Y+56	; 0x38
     b9c:	2d ec       	ldi	r18, 0xCD	; 205
     b9e:	3c ec       	ldi	r19, 0xCC	; 204
     ba0:	4c e2       	ldi	r20, 0x2C	; 44
     ba2:	55 e4       	ldi	r21, 0x45	; 69
     ba4:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     ba8:	dc 01       	movw	r26, r24
     baa:	cb 01       	movw	r24, r22
     bac:	89 ab       	std	Y+49, r24	; 0x31
     bae:	9a ab       	std	Y+50, r25	; 0x32
     bb0:	ab ab       	std	Y+51, r26	; 0x33
     bb2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bb4:	69 a9       	ldd	r22, Y+49	; 0x31
     bb6:	7a a9       	ldd	r23, Y+50	; 0x32
     bb8:	8b a9       	ldd	r24, Y+51	; 0x33
     bba:	9c a9       	ldd	r25, Y+52	; 0x34
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e8       	ldi	r20, 0x80	; 128
     bc2:	5f e3       	ldi	r21, 0x3F	; 63
     bc4:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
     bc8:	88 23       	and	r24, r24
     bca:	2c f4       	brge	.+10     	; 0xbd6 <lcd_set_4bit+0x628>
		__ticks = 1;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	98 ab       	std	Y+48, r25	; 0x30
     bd2:	8f a7       	std	Y+47, r24	; 0x2f
     bd4:	3f c0       	rjmp	.+126    	; 0xc54 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     bd6:	69 a9       	ldd	r22, Y+49	; 0x31
     bd8:	7a a9       	ldd	r23, Y+50	; 0x32
     bda:	8b a9       	ldd	r24, Y+51	; 0x33
     bdc:	9c a9       	ldd	r25, Y+52	; 0x34
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	3f ef       	ldi	r19, 0xFF	; 255
     be2:	4f e7       	ldi	r20, 0x7F	; 127
     be4:	57 e4       	ldi	r21, 0x47	; 71
     be6:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
     bea:	18 16       	cp	r1, r24
     bec:	4c f5       	brge	.+82     	; 0xc40 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bee:	6d a9       	ldd	r22, Y+53	; 0x35
     bf0:	7e a9       	ldd	r23, Y+54	; 0x36
     bf2:	8f a9       	ldd	r24, Y+55	; 0x37
     bf4:	98 ad       	ldd	r25, Y+56	; 0x38
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e2       	ldi	r20, 0x20	; 32
     bfc:	51 e4       	ldi	r21, 0x41	; 65
     bfe:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	bc 01       	movw	r22, r24
     c08:	cd 01       	movw	r24, r26
     c0a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	98 ab       	std	Y+48, r25	; 0x30
     c14:	8f a7       	std	Y+47, r24	; 0x2f
     c16:	0f c0       	rjmp	.+30     	; 0xc36 <lcd_set_4bit+0x688>
     c18:	84 e1       	ldi	r24, 0x14	; 20
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	9e a7       	std	Y+46, r25	; 0x2e
     c1e:	8d a7       	std	Y+45, r24	; 0x2d
     c20:	8d a5       	ldd	r24, Y+45	; 0x2d
     c22:	9e a5       	ldd	r25, Y+46	; 0x2e
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <lcd_set_4bit+0x676>
     c28:	9e a7       	std	Y+46, r25	; 0x2e
     c2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2c:	8f a5       	ldd	r24, Y+47	; 0x2f
     c2e:	98 a9       	ldd	r25, Y+48	; 0x30
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	98 ab       	std	Y+48, r25	; 0x30
     c34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c36:	8f a5       	ldd	r24, Y+47	; 0x2f
     c38:	98 a9       	ldd	r25, Y+48	; 0x30
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	69 f7       	brne	.-38     	; 0xc18 <lcd_set_4bit+0x66a>
     c3e:	14 c0       	rjmp	.+40     	; 0xc68 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c40:	69 a9       	ldd	r22, Y+49	; 0x31
     c42:	7a a9       	ldd	r23, Y+50	; 0x32
     c44:	8b a9       	ldd	r24, Y+51	; 0x33
     c46:	9c a9       	ldd	r25, Y+52	; 0x34
     c48:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	98 ab       	std	Y+48, r25	; 0x30
     c52:	8f a7       	std	Y+47, r24	; 0x2f
     c54:	8f a5       	ldd	r24, Y+47	; 0x2f
     c56:	98 a9       	ldd	r25, Y+48	; 0x30
     c58:	9c a7       	std	Y+44, r25	; 0x2c
     c5a:	8b a7       	std	Y+43, r24	; 0x2b
     c5c:	8b a5       	ldd	r24, Y+43	; 0x2b
     c5e:	9c a5       	ldd	r25, Y+44	; 0x2c
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <lcd_set_4bit+0x6b2>
     c64:	9c a7       	std	Y+44, r25	; 0x2c
     c66:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     c68:	a8 e2       	ldi	r26, 0x28	; 40
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e8 e2       	ldi	r30, 0x28	; 40
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8e 7f       	andi	r24, 0xFE	; 254
     c74:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     c76:	a8 e2       	ldi	r26, 0x28	; 40
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e8 e2       	ldi	r30, 0x28	; 40
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	8d 7f       	andi	r24, 0xFD	; 253
     c82:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     c84:	e8 e2       	ldi	r30, 0x28	; 40
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 e3       	ldi	r24, 0x30	; 48
     c8a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     c8c:	a8 e2       	ldi	r26, 0x28	; 40
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e8 e2       	ldi	r30, 0x28	; 40
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	8c 93       	st	X, r24
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	a0 ea       	ldi	r26, 0xA0	; 160
     ca0:	b0 e4       	ldi	r27, 0x40	; 64
     ca2:	8f a3       	std	Y+39, r24	; 0x27
     ca4:	98 a7       	std	Y+40, r25	; 0x28
     ca6:	a9 a7       	std	Y+41, r26	; 0x29
     ca8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     caa:	6f a1       	ldd	r22, Y+39	; 0x27
     cac:	78 a5       	ldd	r23, Y+40	; 0x28
     cae:	89 a5       	ldd	r24, Y+41	; 0x29
     cb0:	9a a5       	ldd	r25, Y+42	; 0x2a
     cb2:	2d ec       	ldi	r18, 0xCD	; 205
     cb4:	3c ec       	ldi	r19, 0xCC	; 204
     cb6:	4c e2       	ldi	r20, 0x2C	; 44
     cb8:	55 e4       	ldi	r21, 0x45	; 69
     cba:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	8b a3       	std	Y+35, r24	; 0x23
     cc4:	9c a3       	std	Y+36, r25	; 0x24
     cc6:	ad a3       	std	Y+37, r26	; 0x25
     cc8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cca:	6b a1       	ldd	r22, Y+35	; 0x23
     ccc:	7c a1       	ldd	r23, Y+36	; 0x24
     cce:	8d a1       	ldd	r24, Y+37	; 0x25
     cd0:	9e a1       	ldd	r25, Y+38	; 0x26
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e8       	ldi	r20, 0x80	; 128
     cd8:	5f e3       	ldi	r21, 0x3F	; 63
     cda:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
     cde:	88 23       	and	r24, r24
     ce0:	2c f4       	brge	.+10     	; 0xcec <lcd_set_4bit+0x73e>
		__ticks = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9a a3       	std	Y+34, r25	; 0x22
     ce8:	89 a3       	std	Y+33, r24	; 0x21
     cea:	3f c0       	rjmp	.+126    	; 0xd6a <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     cec:	6b a1       	ldd	r22, Y+35	; 0x23
     cee:	7c a1       	ldd	r23, Y+36	; 0x24
     cf0:	8d a1       	ldd	r24, Y+37	; 0x25
     cf2:	9e a1       	ldd	r25, Y+38	; 0x26
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	4f e7       	ldi	r20, 0x7F	; 127
     cfa:	57 e4       	ldi	r21, 0x47	; 71
     cfc:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
     d00:	18 16       	cp	r1, r24
     d02:	4c f5       	brge	.+82     	; 0xd56 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d04:	6f a1       	ldd	r22, Y+39	; 0x27
     d06:	78 a5       	ldd	r23, Y+40	; 0x28
     d08:	89 a5       	ldd	r24, Y+41	; 0x29
     d0a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e2       	ldi	r20, 0x20	; 32
     d12:	51 e4       	ldi	r21, 0x41	; 65
     d14:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	bc 01       	movw	r22, r24
     d1e:	cd 01       	movw	r24, r26
     d20:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	9a a3       	std	Y+34, r25	; 0x22
     d2a:	89 a3       	std	Y+33, r24	; 0x21
     d2c:	0f c0       	rjmp	.+30     	; 0xd4c <lcd_set_4bit+0x79e>
     d2e:	84 e1       	ldi	r24, 0x14	; 20
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	98 a3       	std	Y+32, r25	; 0x20
     d34:	8f 8f       	std	Y+31, r24	; 0x1f
     d36:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d38:	98 a1       	ldd	r25, Y+32	; 0x20
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <lcd_set_4bit+0x78c>
     d3e:	98 a3       	std	Y+32, r25	; 0x20
     d40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d42:	89 a1       	ldd	r24, Y+33	; 0x21
     d44:	9a a1       	ldd	r25, Y+34	; 0x22
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	9a a3       	std	Y+34, r25	; 0x22
     d4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4c:	89 a1       	ldd	r24, Y+33	; 0x21
     d4e:	9a a1       	ldd	r25, Y+34	; 0x22
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	69 f7       	brne	.-38     	; 0xd2e <lcd_set_4bit+0x780>
     d54:	14 c0       	rjmp	.+40     	; 0xd7e <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d56:	6b a1       	ldd	r22, Y+35	; 0x23
     d58:	7c a1       	ldd	r23, Y+36	; 0x24
     d5a:	8d a1       	ldd	r24, Y+37	; 0x25
     d5c:	9e a1       	ldd	r25, Y+38	; 0x26
     d5e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	9a a3       	std	Y+34, r25	; 0x22
     d68:	89 a3       	std	Y+33, r24	; 0x21
     d6a:	89 a1       	ldd	r24, Y+33	; 0x21
     d6c:	9a a1       	ldd	r25, Y+34	; 0x22
     d6e:	9e 8f       	std	Y+30, r25	; 0x1e
     d70:	8d 8f       	std	Y+29, r24	; 0x1d
     d72:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d74:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <lcd_set_4bit+0x7c8>
     d7a:	9e 8f       	std	Y+30, r25	; 0x1e
     d7c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d7e:	a8 e2       	ldi	r26, 0x28	; 40
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e8 e2       	ldi	r30, 0x28	; 40
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8b 7f       	andi	r24, 0xFB	; 251
     d8a:	8c 93       	st	X, r24
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	a0 e8       	ldi	r26, 0x80	; 128
     d92:	bf e3       	ldi	r27, 0x3F	; 63
     d94:	89 8f       	std	Y+25, r24	; 0x19
     d96:	9a 8f       	std	Y+26, r25	; 0x1a
     d98:	ab 8f       	std	Y+27, r26	; 0x1b
     d9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9c:	69 8d       	ldd	r22, Y+25	; 0x19
     d9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     da4:	2d ec       	ldi	r18, 0xCD	; 205
     da6:	3c ec       	ldi	r19, 0xCC	; 204
     da8:	4c e2       	ldi	r20, 0x2C	; 44
     daa:	55 e4       	ldi	r21, 0x45	; 69
     dac:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	8d 8b       	std	Y+21, r24	; 0x15
     db6:	9e 8b       	std	Y+22, r25	; 0x16
     db8:	af 8b       	std	Y+23, r26	; 0x17
     dba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dbc:	6d 89       	ldd	r22, Y+21	; 0x15
     dbe:	7e 89       	ldd	r23, Y+22	; 0x16
     dc0:	8f 89       	ldd	r24, Y+23	; 0x17
     dc2:	98 8d       	ldd	r25, Y+24	; 0x18
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e8       	ldi	r20, 0x80	; 128
     dca:	5f e3       	ldi	r21, 0x3F	; 63
     dcc:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
     dd0:	88 23       	and	r24, r24
     dd2:	2c f4       	brge	.+10     	; 0xdde <lcd_set_4bit+0x830>
		__ticks = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9c 8b       	std	Y+20, r25	; 0x14
     dda:	8b 8b       	std	Y+19, r24	; 0x13
     ddc:	3f c0       	rjmp	.+126    	; 0xe5c <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     dde:	6d 89       	ldd	r22, Y+21	; 0x15
     de0:	7e 89       	ldd	r23, Y+22	; 0x16
     de2:	8f 89       	ldd	r24, Y+23	; 0x17
     de4:	98 8d       	ldd	r25, Y+24	; 0x18
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	3f ef       	ldi	r19, 0xFF	; 255
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	57 e4       	ldi	r21, 0x47	; 71
     dee:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
     df2:	18 16       	cp	r1, r24
     df4:	4c f5       	brge	.+82     	; 0xe48 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df6:	69 8d       	ldd	r22, Y+25	; 0x19
     df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e2       	ldi	r20, 0x20	; 32
     e04:	51 e4       	ldi	r21, 0x41	; 65
     e06:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9c 8b       	std	Y+20, r25	; 0x14
     e1c:	8b 8b       	std	Y+19, r24	; 0x13
     e1e:	0f c0       	rjmp	.+30     	; 0xe3e <lcd_set_4bit+0x890>
     e20:	84 e1       	ldi	r24, 0x14	; 20
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	9a 8b       	std	Y+18, r25	; 0x12
     e26:	89 8b       	std	Y+17, r24	; 0x11
     e28:	89 89       	ldd	r24, Y+17	; 0x11
     e2a:	9a 89       	ldd	r25, Y+18	; 0x12
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <lcd_set_4bit+0x87e>
     e30:	9a 8b       	std	Y+18, r25	; 0x12
     e32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e34:	8b 89       	ldd	r24, Y+19	; 0x13
     e36:	9c 89       	ldd	r25, Y+20	; 0x14
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	9c 8b       	std	Y+20, r25	; 0x14
     e3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3e:	8b 89       	ldd	r24, Y+19	; 0x13
     e40:	9c 89       	ldd	r25, Y+20	; 0x14
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	69 f7       	brne	.-38     	; 0xe20 <lcd_set_4bit+0x872>
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e48:	6d 89       	ldd	r22, Y+21	; 0x15
     e4a:	7e 89       	ldd	r23, Y+22	; 0x16
     e4c:	8f 89       	ldd	r24, Y+23	; 0x17
     e4e:	98 8d       	ldd	r25, Y+24	; 0x18
     e50:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9c 8b       	std	Y+20, r25	; 0x14
     e5a:	8b 8b       	std	Y+19, r24	; 0x13
     e5c:	8b 89       	ldd	r24, Y+19	; 0x13
     e5e:	9c 89       	ldd	r25, Y+20	; 0x14
     e60:	98 8b       	std	Y+16, r25	; 0x10
     e62:	8f 87       	std	Y+15, r24	; 0x0f
     e64:	8f 85       	ldd	r24, Y+15	; 0x0f
     e66:	98 89       	ldd	r25, Y+16	; 0x10
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <lcd_set_4bit+0x8ba>
     e6c:	98 8b       	std	Y+16, r25	; 0x10
     e6e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     e70:	a8 e2       	ldi	r26, 0x28	; 40
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e8 e2       	ldi	r30, 0x28	; 40
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8e 7f       	andi	r24, 0xFE	; 254
     e7c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     e7e:	a8 e2       	ldi	r26, 0x28	; 40
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e8 e2       	ldi	r30, 0x28	; 40
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8d 7f       	andi	r24, 0xFD	; 253
     e8a:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     e8c:	e8 e2       	ldi	r30, 0x28	; 40
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 e2       	ldi	r24, 0x20	; 32
     e92:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     e94:	a8 e2       	ldi	r26, 0x28	; 40
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e8 e2       	ldi	r30, 0x28	; 40
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	84 60       	ori	r24, 0x04	; 4
     ea0:	8c 93       	st	X, r24
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a0 ea       	ldi	r26, 0xA0	; 160
     ea8:	b0 e4       	ldi	r27, 0x40	; 64
     eaa:	8b 87       	std	Y+11, r24	; 0x0b
     eac:	9c 87       	std	Y+12, r25	; 0x0c
     eae:	ad 87       	std	Y+13, r26	; 0x0d
     eb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eba:	2d ec       	ldi	r18, 0xCD	; 205
     ebc:	3c ec       	ldi	r19, 0xCC	; 204
     ebe:	4c e2       	ldi	r20, 0x2C	; 44
     ec0:	55 e4       	ldi	r21, 0x45	; 69
     ec2:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	8f 83       	std	Y+7, r24	; 0x07
     ecc:	98 87       	std	Y+8, r25	; 0x08
     ece:	a9 87       	std	Y+9, r26	; 0x09
     ed0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed2:	6f 81       	ldd	r22, Y+7	; 0x07
     ed4:	78 85       	ldd	r23, Y+8	; 0x08
     ed6:	89 85       	ldd	r24, Y+9	; 0x09
     ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e8       	ldi	r20, 0x80	; 128
     ee0:	5f e3       	ldi	r21, 0x3F	; 63
     ee2:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
     ee6:	88 23       	and	r24, r24
     ee8:	2c f4       	brge	.+10     	; 0xef4 <lcd_set_4bit+0x946>
		__ticks = 1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	3f c0       	rjmp	.+126    	; 0xf72 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     ef4:	6f 81       	ldd	r22, Y+7	; 0x07
     ef6:	78 85       	ldd	r23, Y+8	; 0x08
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	9a 85       	ldd	r25, Y+10	; 0x0a
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	3f ef       	ldi	r19, 0xFF	; 255
     f00:	4f e7       	ldi	r20, 0x7F	; 127
     f02:	57 e4       	ldi	r21, 0x47	; 71
     f04:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
     f08:	18 16       	cp	r1, r24
     f0a:	4c f5       	brge	.+82     	; 0xf5e <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f10:	8d 85       	ldd	r24, Y+13	; 0x0d
     f12:	9e 85       	ldd	r25, Y+14	; 0x0e
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e2       	ldi	r20, 0x20	; 32
     f1a:	51 e4       	ldi	r21, 0x41	; 65
     f1c:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	bc 01       	movw	r22, r24
     f26:	cd 01       	movw	r24, r26
     f28:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
     f34:	0f c0       	rjmp	.+30     	; 0xf54 <lcd_set_4bit+0x9a6>
     f36:	84 e1       	ldi	r24, 0x14	; 20
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	9c 83       	std	Y+4, r25	; 0x04
     f3c:	8b 83       	std	Y+3, r24	; 0x03
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <lcd_set_4bit+0x994>
     f46:	9c 83       	std	Y+4, r25	; 0x04
     f48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	9e 83       	std	Y+6, r25	; 0x06
     f52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	69 f7       	brne	.-38     	; 0xf36 <lcd_set_4bit+0x988>
     f5c:	14 c0       	rjmp	.+40     	; 0xf86 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5e:	6f 81       	ldd	r22, Y+7	; 0x07
     f60:	78 85       	ldd	r23, Y+8	; 0x08
     f62:	89 85       	ldd	r24, Y+9	; 0x09
     f64:	9a 85       	ldd	r25, Y+10	; 0x0a
     f66:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	9e 83       	std	Y+6, r25	; 0x06
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <lcd_set_4bit+0x9d0>
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     f86:	a8 e2       	ldi	r26, 0x28	; 40
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e8 e2       	ldi	r30, 0x28	; 40
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8b 7f       	andi	r24, 0xFB	; 251
     f92:	8c 93       	st	X, r24

	
}
     f94:	c0 59       	subi	r28, 0x90	; 144
     f96:	df 4f       	sbci	r29, 0xFF	; 255
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	08 95       	ret

00000fac <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	2e 97       	sbiw	r28, 0x0e	; 14
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 e8       	ldi	r26, 0x80	; 128
     fc6:	bf e3       	ldi	r27, 0x3F	; 63
     fc8:	8b 87       	std	Y+11, r24	; 0x0b
     fca:	9c 87       	std	Y+12, r25	; 0x0c
     fcc:	ad 87       	std	Y+13, r26	; 0x0d
     fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd8:	2d ec       	ldi	r18, 0xCD	; 205
     fda:	3c ec       	ldi	r19, 0xCC	; 204
     fdc:	4c e2       	ldi	r20, 0x2C	; 44
     fde:	55 e4       	ldi	r21, 0x45	; 69
     fe0:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8f 83       	std	Y+7, r24	; 0x07
     fea:	98 87       	std	Y+8, r25	; 0x08
     fec:	a9 87       	std	Y+9, r26	; 0x09
     fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff0:	6f 81       	ldd	r22, Y+7	; 0x07
     ff2:	78 85       	ldd	r23, Y+8	; 0x08
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    1004:	88 23       	and	r24, r24
    1006:	2c f4       	brge	.+10     	; 0x1012 <lcd_init+0x66>
		__ticks = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	8d 83       	std	Y+5, r24	; 0x05
    1010:	3f c0       	rjmp	.+126    	; 0x1090 <lcd_init+0xe4>
	else if (__tmp > 65535)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    1026:	18 16       	cp	r1, r24
    1028:	4c f5       	brge	.+82     	; 0x107c <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	6b 85       	ldd	r22, Y+11	; 0x0b
    102c:	7c 85       	ldd	r23, Y+12	; 0x0c
    102e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e2       	ldi	r20, 0x20	; 32
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9e 83       	std	Y+6, r25	; 0x06
    1050:	8d 83       	std	Y+5, r24	; 0x05
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <lcd_init+0xc6>
    1054:	84 e1       	ldi	r24, 0x14	; 20
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <lcd_init+0xb4>
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	69 f7       	brne	.-38     	; 0x1054 <lcd_init+0xa8>
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107c:	6f 81       	ldd	r22, Y+7	; 0x07
    107e:	78 85       	ldd	r23, Y+8	; 0x08
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	9a 85       	ldd	r25, Y+10	; 0x0a
    1084:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <lcd_init+0xf0>
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    10a4:	88 e2       	ldi	r24, 0x28	; 40
    10a6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <lcd_wr_command>
	lcd_wr_command(0x01);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <lcd_wr_command>
	lcd_wr_command(0x06);
    10b0:	86 e0       	ldi	r24, 0x06	; 6
    10b2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <lcd_wr_command>
	lcd_wr_command(0x0E);
    10b6:	8e e0       	ldi	r24, 0x0E	; 14
    10b8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <lcd_wr_command>
	lcd_wr_command(0x80);
    10bc:	80 e8       	ldi	r24, 0x80	; 128
    10be:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <lcd_wr_command>
		
}
    10c2:	2e 96       	adiw	r28, 0x0e	; 14
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	6e 97       	sbiw	r28, 0x1e	; 30
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp1;
	temp1 = cmd;
    10ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ec:	8d 8f       	std	Y+29, r24	; 0x1d
	temp1 = temp1 & 0xF0;
    10ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f0:	80 7f       	andi	r24, 0xF0	; 240
    10f2:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    10f4:	a8 e2       	ldi	r26, 0x28	; 40
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e8 e2       	ldi	r30, 0x28	; 40
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8f 70       	andi	r24, 0x0F	; 15
    1100:	8c 93       	st	X, r24
	lcd_port |= temp1;
    1102:	a8 e2       	ldi	r26, 0x28	; 40
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e8 e2       	ldi	r30, 0x28	; 40
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	90 81       	ld	r25, Z
    110c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    110e:	89 2b       	or	r24, r25
    1110:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1112:	a8 e2       	ldi	r26, 0x28	; 40
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e8 e2       	ldi	r30, 0x28	; 40
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	8e 7f       	andi	r24, 0xFE	; 254
    111e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1120:	a8 e2       	ldi	r26, 0x28	; 40
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e8 e2       	ldi	r30, 0x28	; 40
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8d 7f       	andi	r24, 0xFD	; 253
    112c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    112e:	a8 e2       	ldi	r26, 0x28	; 40
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e8 e2       	ldi	r30, 0x28	; 40
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	84 60       	ori	r24, 0x04	; 4
    113a:	8c 93       	st	X, r24
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a0 ea       	ldi	r26, 0xA0	; 160
    1142:	b0 e4       	ldi	r27, 0x40	; 64
    1144:	89 8f       	std	Y+25, r24	; 0x19
    1146:	9a 8f       	std	Y+26, r25	; 0x1a
    1148:	ab 8f       	std	Y+27, r26	; 0x1b
    114a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114c:	69 8d       	ldd	r22, Y+25	; 0x19
    114e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1154:	2d ec       	ldi	r18, 0xCD	; 205
    1156:	3c ec       	ldi	r19, 0xCC	; 204
    1158:	4c e2       	ldi	r20, 0x2C	; 44
    115a:	55 e4       	ldi	r21, 0x45	; 69
    115c:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	8d 8b       	std	Y+21, r24	; 0x15
    1166:	9e 8b       	std	Y+22, r25	; 0x16
    1168:	af 8b       	std	Y+23, r26	; 0x17
    116a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    116c:	6d 89       	ldd	r22, Y+21	; 0x15
    116e:	7e 89       	ldd	r23, Y+22	; 0x16
    1170:	8f 89       	ldd	r24, Y+23	; 0x17
    1172:	98 8d       	ldd	r25, Y+24	; 0x18
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e8       	ldi	r20, 0x80	; 128
    117a:	5f e3       	ldi	r21, 0x3F	; 63
    117c:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    1180:	88 23       	and	r24, r24
    1182:	2c f4       	brge	.+10     	; 0x118e <lcd_wr_command+0xba>
		__ticks = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9c 8b       	std	Y+20, r25	; 0x14
    118a:	8b 8b       	std	Y+19, r24	; 0x13
    118c:	3f c0       	rjmp	.+126    	; 0x120c <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    118e:	6d 89       	ldd	r22, Y+21	; 0x15
    1190:	7e 89       	ldd	r23, Y+22	; 0x16
    1192:	8f 89       	ldd	r24, Y+23	; 0x17
    1194:	98 8d       	ldd	r25, Y+24	; 0x18
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	4c f5       	brge	.+82     	; 0x11f8 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a6:	69 8d       	ldd	r22, Y+25	; 0x19
    11a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9c 8b       	std	Y+20, r25	; 0x14
    11cc:	8b 8b       	std	Y+19, r24	; 0x13
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <lcd_wr_command+0x11a>
    11d0:	84 e1       	ldi	r24, 0x14	; 20
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	9a 8b       	std	Y+18, r25	; 0x12
    11d6:	89 8b       	std	Y+17, r24	; 0x11
    11d8:	89 89       	ldd	r24, Y+17	; 0x11
    11da:	9a 89       	ldd	r25, Y+18	; 0x12
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <lcd_wr_command+0x108>
    11e0:	9a 8b       	std	Y+18, r25	; 0x12
    11e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	8b 89       	ldd	r24, Y+19	; 0x13
    11e6:	9c 89       	ldd	r25, Y+20	; 0x14
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	9c 8b       	std	Y+20, r25	; 0x14
    11ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ee:	8b 89       	ldd	r24, Y+19	; 0x13
    11f0:	9c 89       	ldd	r25, Y+20	; 0x14
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <lcd_wr_command+0xfc>
    11f6:	14 c0       	rjmp	.+40     	; 0x1220 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	6d 89       	ldd	r22, Y+21	; 0x15
    11fa:	7e 89       	ldd	r23, Y+22	; 0x16
    11fc:	8f 89       	ldd	r24, Y+23	; 0x17
    11fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1200:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9c 8b       	std	Y+20, r25	; 0x14
    120a:	8b 8b       	std	Y+19, r24	; 0x13
    120c:	8b 89       	ldd	r24, Y+19	; 0x13
    120e:	9c 89       	ldd	r25, Y+20	; 0x14
    1210:	98 8b       	std	Y+16, r25	; 0x10
    1212:	8f 87       	std	Y+15, r24	; 0x0f
    1214:	8f 85       	ldd	r24, Y+15	; 0x0f
    1216:	98 89       	ldd	r25, Y+16	; 0x10
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <lcd_wr_command+0x144>
    121c:	98 8b       	std	Y+16, r25	; 0x10
    121e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1220:	a8 e2       	ldi	r26, 0x28	; 40
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e8 e2       	ldi	r30, 0x28	; 40
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	8b 7f       	andi	r24, 0xFB	; 251
    122c:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    122e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1230:	8f 70       	andi	r24, 0x0F	; 15
    1232:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1234:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1236:	82 95       	swap	r24
    1238:	80 7f       	andi	r24, 0xF0	; 240
    123a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    123c:	a8 e2       	ldi	r26, 0x28	; 40
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e8 e2       	ldi	r30, 0x28	; 40
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8f 70       	andi	r24, 0x0F	; 15
    1248:	8c 93       	st	X, r24
	lcd_port |= cmd;
    124a:	a8 e2       	ldi	r26, 0x28	; 40
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e8 e2       	ldi	r30, 0x28	; 40
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	90 81       	ld	r25, Z
    1254:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1256:	89 2b       	or	r24, r25
    1258:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    125a:	a8 e2       	ldi	r26, 0x28	; 40
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e8 e2       	ldi	r30, 0x28	; 40
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8e 7f       	andi	r24, 0xFE	; 254
    1266:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1268:	a8 e2       	ldi	r26, 0x28	; 40
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e8 e2       	ldi	r30, 0x28	; 40
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8d 7f       	andi	r24, 0xFD	; 253
    1274:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1276:	a8 e2       	ldi	r26, 0x28	; 40
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e8 e2       	ldi	r30, 0x28	; 40
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	8c 93       	st	X, r24
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a0 ea       	ldi	r26, 0xA0	; 160
    128a:	b0 e4       	ldi	r27, 0x40	; 64
    128c:	8b 87       	std	Y+11, r24	; 0x0b
    128e:	9c 87       	std	Y+12, r25	; 0x0c
    1290:	ad 87       	std	Y+13, r26	; 0x0d
    1292:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1294:	6b 85       	ldd	r22, Y+11	; 0x0b
    1296:	7c 85       	ldd	r23, Y+12	; 0x0c
    1298:	8d 85       	ldd	r24, Y+13	; 0x0d
    129a:	9e 85       	ldd	r25, Y+14	; 0x0e
    129c:	2d ec       	ldi	r18, 0xCD	; 205
    129e:	3c ec       	ldi	r19, 0xCC	; 204
    12a0:	4c e2       	ldi	r20, 0x2C	; 44
    12a2:	55 e4       	ldi	r21, 0x45	; 69
    12a4:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8f 83       	std	Y+7, r24	; 0x07
    12ae:	98 87       	std	Y+8, r25	; 0x08
    12b0:	a9 87       	std	Y+9, r26	; 0x09
    12b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b4:	6f 81       	ldd	r22, Y+7	; 0x07
    12b6:	78 85       	ldd	r23, Y+8	; 0x08
    12b8:	89 85       	ldd	r24, Y+9	; 0x09
    12ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	5f e3       	ldi	r21, 0x3F	; 63
    12c4:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <lcd_wr_command+0x202>
		__ticks = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9e 83       	std	Y+6, r25	; 0x06
    12d2:	8d 83       	std	Y+5, r24	; 0x05
    12d4:	3f c0       	rjmp	.+126    	; 0x1354 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    12d6:	6f 81       	ldd	r22, Y+7	; 0x07
    12d8:	78 85       	ldd	r23, Y+8	; 0x08
    12da:	89 85       	ldd	r24, Y+9	; 0x09
    12dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	57 e4       	ldi	r21, 0x47	; 71
    12e6:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    12ea:	18 16       	cp	r1, r24
    12ec:	4c f5       	brge	.+82     	; 0x1340 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	51 e4       	ldi	r21, 0x41	; 65
    12fe:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9e 83       	std	Y+6, r25	; 0x06
    1314:	8d 83       	std	Y+5, r24	; 0x05
    1316:	0f c0       	rjmp	.+30     	; 0x1336 <lcd_wr_command+0x262>
    1318:	84 e1       	ldi	r24, 0x14	; 20
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	8b 83       	std	Y+3, r24	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <lcd_wr_command+0x250>
    1328:	9c 83       	std	Y+4, r25	; 0x04
    132a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	9e 83       	std	Y+6, r25	; 0x06
    1334:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	69 f7       	brne	.-38     	; 0x1318 <lcd_wr_command+0x244>
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	6f 81       	ldd	r22, Y+7	; 0x07
    1342:	78 85       	ldd	r23, Y+8	; 0x08
    1344:	89 85       	ldd	r24, Y+9	; 0x09
    1346:	9a 85       	ldd	r25, Y+10	; 0x0a
    1348:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	9a 81       	ldd	r25, Y+2	; 0x02
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <lcd_wr_command+0x28c>
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1368:	a8 e2       	ldi	r26, 0x28	; 40
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e8 e2       	ldi	r30, 0x28	; 40
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8b 7f       	andi	r24, 0xFB	; 251
    1374:	8c 93       	st	X, r24
}
    1376:	6e 96       	adiw	r28, 0x1e	; 30
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	6e 97       	sbiw	r28, 0x1e	; 30
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp1;
	temp1 = letter;
    139e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13a0:	8d 8f       	std	Y+29, r24	; 0x1d
	temp1 = (temp1 & 0xF0);
    13a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a4:	80 7f       	andi	r24, 0xF0	; 240
    13a6:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    13a8:	a8 e2       	ldi	r26, 0x28	; 40
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e8 e2       	ldi	r30, 0x28	; 40
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	8f 70       	andi	r24, 0x0F	; 15
    13b4:	8c 93       	st	X, r24
	lcd_port |= temp1;
    13b6:	a8 e2       	ldi	r26, 0x28	; 40
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e8 e2       	ldi	r30, 0x28	; 40
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	90 81       	ld	r25, Z
    13c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13c2:	89 2b       	or	r24, r25
    13c4:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    13c6:	a8 e2       	ldi	r26, 0x28	; 40
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e8 e2       	ldi	r30, 0x28	; 40
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	81 60       	ori	r24, 0x01	; 1
    13d2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    13d4:	a8 e2       	ldi	r26, 0x28	; 40
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e8 e2       	ldi	r30, 0x28	; 40
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8d 7f       	andi	r24, 0xFD	; 253
    13e0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    13e2:	a8 e2       	ldi	r26, 0x28	; 40
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e8 e2       	ldi	r30, 0x28	; 40
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	84 60       	ori	r24, 0x04	; 4
    13ee:	8c 93       	st	X, r24
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a0 ea       	ldi	r26, 0xA0	; 160
    13f6:	b0 e4       	ldi	r27, 0x40	; 64
    13f8:	89 8f       	std	Y+25, r24	; 0x19
    13fa:	9a 8f       	std	Y+26, r25	; 0x1a
    13fc:	ab 8f       	std	Y+27, r26	; 0x1b
    13fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1400:	69 8d       	ldd	r22, Y+25	; 0x19
    1402:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1404:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1406:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1408:	2d ec       	ldi	r18, 0xCD	; 205
    140a:	3c ec       	ldi	r19, 0xCC	; 204
    140c:	4c e2       	ldi	r20, 0x2C	; 44
    140e:	55 e4       	ldi	r21, 0x45	; 69
    1410:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	8d 8b       	std	Y+21, r24	; 0x15
    141a:	9e 8b       	std	Y+22, r25	; 0x16
    141c:	af 8b       	std	Y+23, r26	; 0x17
    141e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1420:	6d 89       	ldd	r22, Y+21	; 0x15
    1422:	7e 89       	ldd	r23, Y+22	; 0x16
    1424:	8f 89       	ldd	r24, Y+23	; 0x17
    1426:	98 8d       	ldd	r25, Y+24	; 0x18
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e8       	ldi	r20, 0x80	; 128
    142e:	5f e3       	ldi	r21, 0x3F	; 63
    1430:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    1434:	88 23       	and	r24, r24
    1436:	2c f4       	brge	.+10     	; 0x1442 <lcd_wr_char+0xba>
		__ticks = 1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9c 8b       	std	Y+20, r25	; 0x14
    143e:	8b 8b       	std	Y+19, r24	; 0x13
    1440:	3f c0       	rjmp	.+126    	; 0x14c0 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1442:	6d 89       	ldd	r22, Y+21	; 0x15
    1444:	7e 89       	ldd	r23, Y+22	; 0x16
    1446:	8f 89       	ldd	r24, Y+23	; 0x17
    1448:	98 8d       	ldd	r25, Y+24	; 0x18
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	4f e7       	ldi	r20, 0x7F	; 127
    1450:	57 e4       	ldi	r21, 0x47	; 71
    1452:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    1456:	18 16       	cp	r1, r24
    1458:	4c f5       	brge	.+82     	; 0x14ac <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145a:	69 8d       	ldd	r22, Y+25	; 0x19
    145c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    145e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1460:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e2       	ldi	r20, 0x20	; 32
    1468:	51 e4       	ldi	r21, 0x41	; 65
    146a:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9c 8b       	std	Y+20, r25	; 0x14
    1480:	8b 8b       	std	Y+19, r24	; 0x13
    1482:	0f c0       	rjmp	.+30     	; 0x14a2 <lcd_wr_char+0x11a>
    1484:	84 e1       	ldi	r24, 0x14	; 20
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	9a 8b       	std	Y+18, r25	; 0x12
    148a:	89 8b       	std	Y+17, r24	; 0x11
    148c:	89 89       	ldd	r24, Y+17	; 0x11
    148e:	9a 89       	ldd	r25, Y+18	; 0x12
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <lcd_wr_char+0x108>
    1494:	9a 8b       	std	Y+18, r25	; 0x12
    1496:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1498:	8b 89       	ldd	r24, Y+19	; 0x13
    149a:	9c 89       	ldd	r25, Y+20	; 0x14
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	9c 8b       	std	Y+20, r25	; 0x14
    14a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	9c 89       	ldd	r25, Y+20	; 0x14
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	69 f7       	brne	.-38     	; 0x1484 <lcd_wr_char+0xfc>
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ac:	6d 89       	ldd	r22, Y+21	; 0x15
    14ae:	7e 89       	ldd	r23, Y+22	; 0x16
    14b0:	8f 89       	ldd	r24, Y+23	; 0x17
    14b2:	98 8d       	ldd	r25, Y+24	; 0x18
    14b4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	9c 8b       	std	Y+20, r25	; 0x14
    14be:	8b 8b       	std	Y+19, r24	; 0x13
    14c0:	8b 89       	ldd	r24, Y+19	; 0x13
    14c2:	9c 89       	ldd	r25, Y+20	; 0x14
    14c4:	98 8b       	std	Y+16, r25	; 0x10
    14c6:	8f 87       	std	Y+15, r24	; 0x0f
    14c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ca:	98 89       	ldd	r25, Y+16	; 0x10
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <lcd_wr_char+0x144>
    14d0:	98 8b       	std	Y+16, r25	; 0x10
    14d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    14d4:	a8 e2       	ldi	r26, 0x28	; 40
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e8 e2       	ldi	r30, 0x28	; 40
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8b 7f       	andi	r24, 0xFB	; 251
    14e0:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    14e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14e4:	8f 70       	andi	r24, 0x0F	; 15
    14e6:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    14e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14ea:	82 95       	swap	r24
    14ec:	80 7f       	andi	r24, 0xF0	; 240
    14ee:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    14f0:	a8 e2       	ldi	r26, 0x28	; 40
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e8 e2       	ldi	r30, 0x28	; 40
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 70       	andi	r24, 0x0F	; 15
    14fc:	8c 93       	st	X, r24
	lcd_port |= letter;
    14fe:	a8 e2       	ldi	r26, 0x28	; 40
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e8 e2       	ldi	r30, 0x28	; 40
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	90 81       	ld	r25, Z
    1508:	8e 8d       	ldd	r24, Y+30	; 0x1e
    150a:	89 2b       	or	r24, r25
    150c:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    150e:	a8 e2       	ldi	r26, 0x28	; 40
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e8 e2       	ldi	r30, 0x28	; 40
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	81 60       	ori	r24, 0x01	; 1
    151a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    151c:	a8 e2       	ldi	r26, 0x28	; 40
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e2       	ldi	r30, 0x28	; 40
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8d 7f       	andi	r24, 0xFD	; 253
    1528:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    152a:	a8 e2       	ldi	r26, 0x28	; 40
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e8 e2       	ldi	r30, 0x28	; 40
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	84 60       	ori	r24, 0x04	; 4
    1536:	8c 93       	st	X, r24
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a0 ea       	ldi	r26, 0xA0	; 160
    153e:	b0 e4       	ldi	r27, 0x40	; 64
    1540:	8b 87       	std	Y+11, r24	; 0x0b
    1542:	9c 87       	std	Y+12, r25	; 0x0c
    1544:	ad 87       	std	Y+13, r26	; 0x0d
    1546:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1548:	6b 85       	ldd	r22, Y+11	; 0x0b
    154a:	7c 85       	ldd	r23, Y+12	; 0x0c
    154c:	8d 85       	ldd	r24, Y+13	; 0x0d
    154e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1550:	2d ec       	ldi	r18, 0xCD	; 205
    1552:	3c ec       	ldi	r19, 0xCC	; 204
    1554:	4c e2       	ldi	r20, 0x2C	; 44
    1556:	55 e4       	ldi	r21, 0x45	; 69
    1558:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	8f 83       	std	Y+7, r24	; 0x07
    1562:	98 87       	std	Y+8, r25	; 0x08
    1564:	a9 87       	std	Y+9, r26	; 0x09
    1566:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1568:	6f 81       	ldd	r22, Y+7	; 0x07
    156a:	78 85       	ldd	r23, Y+8	; 0x08
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    157c:	88 23       	and	r24, r24
    157e:	2c f4       	brge	.+10     	; 0x158a <lcd_wr_char+0x202>
		__ticks = 1;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9e 83       	std	Y+6, r25	; 0x06
    1586:	8d 83       	std	Y+5, r24	; 0x05
    1588:	3f c0       	rjmp	.+126    	; 0x1608 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	3f ef       	ldi	r19, 0xFF	; 255
    1596:	4f e7       	ldi	r20, 0x7F	; 127
    1598:	57 e4       	ldi	r21, 0x47	; 71
    159a:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    159e:	18 16       	cp	r1, r24
    15a0:	4c f5       	brge	.+82     	; 0x15f4 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e2       	ldi	r20, 0x20	; 32
    15b0:	51 e4       	ldi	r21, 0x41	; 65
    15b2:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	0f c0       	rjmp	.+30     	; 0x15ea <lcd_wr_char+0x262>
    15cc:	84 e1       	ldi	r24, 0x14	; 20
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	9c 83       	std	Y+4, r25	; 0x04
    15d2:	8b 83       	std	Y+3, r24	; 0x03
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <lcd_wr_char+0x250>
    15dc:	9c 83       	std	Y+4, r25	; 0x04
    15de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	69 f7       	brne	.-38     	; 0x15cc <lcd_wr_char+0x244>
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f4:	6f 81       	ldd	r22, Y+7	; 0x07
    15f6:	78 85       	ldd	r23, Y+8	; 0x08
    15f8:	89 85       	ldd	r24, Y+9	; 0x09
    15fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fc:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <lcd_wr_char+0x28c>
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    161c:	a8 e2       	ldi	r26, 0x28	; 40
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e8 e2       	ldi	r30, 0x28	; 40
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8b 7f       	andi	r24, 0xFB	; 251
    1628:	8c 93       	st	X, r24
}
    162a:	6e 96       	adiw	r28, 0x1e	; 30
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <lcd_home>:


void lcd_home()
{
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1644:	80 e8       	ldi	r24, 0x80	; 128
    1646:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <lcd_wr_command>
}
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <lcd_string+0x6>
    1656:	0f 92       	push	r0
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	9c 83       	std	Y+4, r25	; 0x04
    165e:	8b 83       	std	Y+3, r24	; 0x03
    1660:	0a c0       	rjmp	.+20     	; 0x1676 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1662:	eb 81       	ldd	r30, Y+3	; 0x03
    1664:	fc 81       	ldd	r31, Y+4	; 0x04
    1666:	80 81       	ld	r24, Z
    1668:	0e 94 c4 09 	call	0x1388	; 0x1388 <lcd_wr_char>
		str++;
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	8b 83       	std	Y+3, r24	; 0x03


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1676:	eb 81       	ldd	r30, Y+3	; 0x03
    1678:	fc 81       	ldd	r31, Y+4	; 0x04
    167a:	80 81       	ld	r24, Z
    167c:	88 23       	and	r24, r24
    167e:	89 f7       	brne	.-30     	; 0x1662 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
	int i=0;
    1680:	1a 82       	std	Y+2, r1	; 0x02
    1682:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<12;i++) lcd_wr_char(' ');
    1684:	1a 82       	std	Y+2, r1	; 0x02
    1686:	19 82       	std	Y+1, r1	; 0x01
    1688:	08 c0       	rjmp	.+16     	; 0x169a <lcd_string+0x4a>
    168a:	80 e2       	ldi	r24, 0x20	; 32
    168c:	0e 94 c4 09 	call	0x1388	; 0x1388 <lcd_wr_char>
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	8c 30       	cpi	r24, 0x0C	; 12
    16a0:	91 05       	cpc	r25, r1
    16a2:	9c f3       	brlt	.-26     	; 0x168a <lcd_string+0x3a>
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <lcd_cursor+0x6>
    16b8:	0f 92       	push	r0
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3c 83       	std	Y+4, r19	; 0x04
    16ca:	2b 83       	std	Y+3, r18	; 0x03
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	91 05       	cpc	r25, r1
    16d4:	d9 f0       	breq	.+54     	; 0x170c <lcd_cursor+0x5a>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	23 30       	cpi	r18, 0x03	; 3
    16dc:	31 05       	cpc	r19, r1
    16de:	34 f4       	brge	.+12     	; 0x16ec <lcd_cursor+0x3a>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	91 05       	cpc	r25, r1
    16e8:	61 f0       	breq	.+24     	; 0x1702 <lcd_cursor+0x50>
    16ea:	1e c0       	rjmp	.+60     	; 0x1728 <lcd_cursor+0x76>
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	23 30       	cpi	r18, 0x03	; 3
    16f2:	31 05       	cpc	r19, r1
    16f4:	81 f0       	breq	.+32     	; 0x1716 <lcd_cursor+0x64>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	91 05       	cpc	r25, r1
    16fe:	81 f0       	breq	.+32     	; 0x1720 <lcd_cursor+0x6e>
    1700:	13 c0       	rjmp	.+38     	; 0x1728 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	81 58       	subi	r24, 0x81	; 129
    1706:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <lcd_wr_command>
    170a:	0e c0       	rjmp	.+28     	; 0x1728 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	81 54       	subi	r24, 0x41	; 65
    1710:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <lcd_wr_command>
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	8d 56       	subi	r24, 0x6D	; 109
    171a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <lcd_wr_command>
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	8d 52       	subi	r24, 0x2D	; 45
    1724:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <lcd_wr_command>
		default: break;
	}
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	27 97       	sbiw	r28, 0x07	; 7
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	8a 83       	std	Y+2, r24	; 0x02
    174c:	6b 83       	std	Y+3, r22	; 0x03
    174e:	5d 83       	std	Y+5, r21	; 0x05
    1750:	4c 83       	std	Y+4, r20	; 0x04
    1752:	3f 83       	std	Y+7, r19	; 0x07
    1754:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1756:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	88 23       	and	r24, r24
    175c:	19 f0       	breq	.+6      	; 0x1764 <lcd_print+0x2e>
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	88 23       	and	r24, r24
    1762:	19 f4       	brne	.+6      	; 0x176a <lcd_print+0x34>
	{
		lcd_home();
    1764:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_home>
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	6b 81       	ldd	r22, Y+3	; 0x03
    176e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1772:	8e 81       	ldd	r24, Y+6	; 0x06
    1774:	9f 81       	ldd	r25, Y+7	; 0x07
    1776:	85 30       	cpi	r24, 0x05	; 5
    1778:	91 05       	cpc	r25, r1
    177a:	19 f0       	breq	.+6      	; 0x1782 <lcd_print+0x4c>
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	a9 f4       	brne	.+42     	; 0x17ac <lcd_print+0x76>
	{
		million=value/10000+48;
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	20 e1       	ldi	r18, 0x10	; 16
    1788:	37 e2       	ldi	r19, 0x27	; 39
    178a:	b9 01       	movw	r22, r18
    178c:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__udivmodhi4>
    1790:	cb 01       	movw	r24, r22
    1792:	c0 96       	adiw	r24, 0x30	; 48
    1794:	90 93 9f 03 	sts	0x039F, r25
    1798:	80 93 9e 03 	sts	0x039E, r24
		lcd_wr_char(million);
    179c:	80 91 9e 03 	lds	r24, 0x039E
    17a0:	90 91 9f 03 	lds	r25, 0x039F
    17a4:	0e 94 c4 09 	call	0x1388	; 0x1388 <lcd_wr_char>
		flag=1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    17ac:	8e 81       	ldd	r24, Y+6	; 0x06
    17ae:	9f 81       	ldd	r25, Y+7	; 0x07
    17b0:	84 30       	cpi	r24, 0x04	; 4
    17b2:	91 05       	cpc	r25, r1
    17b4:	19 f0       	breq	.+6      	; 0x17bc <lcd_print+0x86>
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	11 f5       	brne	.+68     	; 0x1800 <lcd_print+0xca>
	{
		temp1 = value/1000;
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	28 ee       	ldi	r18, 0xE8	; 232
    17c2:	33 e0       	ldi	r19, 0x03	; 3
    17c4:	b9 01       	movw	r22, r18
    17c6:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__udivmodhi4>
    17ca:	cb 01       	movw	r24, r22
    17cc:	90 93 a2 03 	sts	0x03A2, r25
    17d0:	80 93 a1 03 	sts	0x03A1, r24
		thousand = temp1%10 + 48;
    17d4:	80 91 a1 03 	lds	r24, 0x03A1
    17d8:	90 91 a2 03 	lds	r25, 0x03A2
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	b9 01       	movw	r22, r18
    17e2:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__udivmodhi4>
    17e6:	c0 96       	adiw	r24, 0x30	; 48
    17e8:	90 93 ad 03 	sts	0x03AD, r25
    17ec:	80 93 ac 03 	sts	0x03AC, r24
		lcd_wr_char(thousand);
    17f0:	80 91 ac 03 	lds	r24, 0x03AC
    17f4:	90 91 ad 03 	lds	r25, 0x03AD
    17f8:	0e 94 c4 09 	call	0x1388	; 0x1388 <lcd_wr_char>
		flag=1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1800:	8e 81       	ldd	r24, Y+6	; 0x06
    1802:	9f 81       	ldd	r25, Y+7	; 0x07
    1804:	83 30       	cpi	r24, 0x03	; 3
    1806:	91 05       	cpc	r25, r1
    1808:	19 f0       	breq	.+6      	; 0x1810 <lcd_print+0xda>
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	11 f5       	brne	.+68     	; 0x1854 <lcd_print+0x11e>
	{
		temp1 = value/100;
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	9d 81       	ldd	r25, Y+5	; 0x05
    1814:	24 e6       	ldi	r18, 0x64	; 100
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	b9 01       	movw	r22, r18
    181a:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__udivmodhi4>
    181e:	cb 01       	movw	r24, r22
    1820:	90 93 a2 03 	sts	0x03A2, r25
    1824:	80 93 a1 03 	sts	0x03A1, r24
		hundred = temp1%10 + 48;
    1828:	80 91 a1 03 	lds	r24, 0x03A1
    182c:	90 91 a2 03 	lds	r25, 0x03A2
    1830:	2a e0       	ldi	r18, 0x0A	; 10
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	b9 01       	movw	r22, r18
    1836:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__udivmodhi4>
    183a:	c0 96       	adiw	r24, 0x30	; 48
    183c:	90 93 a9 03 	sts	0x03A9, r25
    1840:	80 93 a8 03 	sts	0x03A8, r24
		lcd_wr_char(hundred);
    1844:	80 91 a8 03 	lds	r24, 0x03A8
    1848:	90 91 a9 03 	lds	r25, 0x03A9
    184c:	0e 94 c4 09 	call	0x1388	; 0x1388 <lcd_wr_char>
		flag=1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	9f 81       	ldd	r25, Y+7	; 0x07
    1858:	82 30       	cpi	r24, 0x02	; 2
    185a:	91 05       	cpc	r25, r1
    185c:	19 f0       	breq	.+6      	; 0x1864 <lcd_print+0x12e>
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	11 f5       	brne	.+68     	; 0x18a8 <lcd_print+0x172>
	{
		temp1 = value/10;
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	9d 81       	ldd	r25, Y+5	; 0x05
    1868:	2a e0       	ldi	r18, 0x0A	; 10
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	b9 01       	movw	r22, r18
    186e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__udivmodhi4>
    1872:	cb 01       	movw	r24, r22
    1874:	90 93 a2 03 	sts	0x03A2, r25
    1878:	80 93 a1 03 	sts	0x03A1, r24
		tens = temp1%10 + 48;
    187c:	80 91 a1 03 	lds	r24, 0x03A1
    1880:	90 91 a2 03 	lds	r25, 0x03A2
    1884:	2a e0       	ldi	r18, 0x0A	; 10
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	b9 01       	movw	r22, r18
    188a:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__udivmodhi4>
    188e:	c0 96       	adiw	r24, 0x30	; 48
    1890:	90 93 a6 03 	sts	0x03A6, r25
    1894:	80 93 a5 03 	sts	0x03A5, r24
		lcd_wr_char(tens);
    1898:	80 91 a5 03 	lds	r24, 0x03A5
    189c:	90 91 a6 03 	lds	r25, 0x03A6
    18a0:	0e 94 c4 09 	call	0x1388	; 0x1388 <lcd_wr_char>
		flag=1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    18a8:	8e 81       	ldd	r24, Y+6	; 0x06
    18aa:	9f 81       	ldd	r25, Y+7	; 0x07
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	19 f0       	breq	.+6      	; 0x18b8 <lcd_print+0x182>
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	91 f4       	brne	.+36     	; 0x18dc <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	9d 81       	ldd	r25, Y+5	; 0x05
    18bc:	2a e0       	ldi	r18, 0x0A	; 10
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	b9 01       	movw	r22, r18
    18c2:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__udivmodhi4>
    18c6:	c0 96       	adiw	r24, 0x30	; 48
    18c8:	90 93 ab 03 	sts	0x03AB, r25
    18cc:	80 93 aa 03 	sts	0x03AA, r24
		lcd_wr_char(unit);
    18d0:	80 91 aa 03 	lds	r24, 0x03AA
    18d4:	90 91 ab 03 	lds	r25, 0x03AB
    18d8:	0e 94 c4 09 	call	0x1388	; 0x1388 <lcd_wr_char>
	}
	if(digits>5)
    18dc:	8e 81       	ldd	r24, Y+6	; 0x06
    18de:	9f 81       	ldd	r25, Y+7	; 0x07
    18e0:	86 30       	cpi	r24, 0x06	; 6
    18e2:	91 05       	cpc	r25, r1
    18e4:	1c f0       	brlt	.+6      	; 0x18ec <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    18e6:	85 e4       	ldi	r24, 0x45	; 69
    18e8:	0e 94 c4 09 	call	0x1388	; 0x1388 <lcd_wr_char>
	}
	
}
    18ec:	27 96       	adiw	r28, 0x07	; 7
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <ADC_Conversion>:



//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	0f 92       	push	r0
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	88 30       	cpi	r24, 0x08	; 8
    1910:	20 f0       	brcs	.+8      	; 0x191a <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1912:	eb e7       	ldi	r30, 0x7B	; 123
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	88 e0       	ldi	r24, 0x08	; 8
    1918:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	87 70       	andi	r24, 0x07	; 7
    191e:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    1920:	ec e7       	ldi	r30, 0x7C	; 124
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	80 62       	ori	r24, 0x20	; 32
    1928:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    192a:	aa e7       	ldi	r26, 0x7A	; 122
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ea e7       	ldi	r30, 0x7A	; 122
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	80 64       	ori	r24, 0x40	; 64
    1936:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1938:	ea e7       	ldi	r30, 0x7A	; 122
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	88 2f       	mov	r24, r24
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	80 71       	andi	r24, 0x10	; 16
    1944:	90 70       	andi	r25, 0x00	; 0
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	b9 f3       	breq	.-18     	; 0x1938 <ADC_Conversion+0x3a>
	a=ADCH;
    194a:	e9 e7       	ldi	r30, 0x79	; 121
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1952:	aa e7       	ldi	r26, 0x7A	; 122
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ea e7       	ldi	r30, 0x7A	; 122
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 61       	ori	r24, 0x10	; 16
    195e:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1960:	eb e7       	ldi	r30, 0x7B	; 123
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	10 82       	st	Z, r1
	return a;
    1966:	89 81       	ldd	r24, Y+1	; 0x01
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <print_sensor>:

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <print_sensor+0x6>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	6a 83       	std	Y+2, r22	; 0x02
    1980:	4b 83       	std	Y+3, r20	; 0x03
 ADC_Value = ADC_Conversion(channel);
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ADC_Conversion>
    1988:	80 93 a0 03 	sts	0x03A0, r24
 lcd_print(row, coloumn, ADC_Value, 3);
    198c:	80 91 a0 03 	lds	r24, 0x03A0
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	6a 81       	ldd	r22, Y+2	; 0x02
    1998:	a9 01       	movw	r20, r18
    199a:	23 e0       	ldi	r18, 0x03	; 3
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <lcd_print>
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <init_sensor_values>:


void init_sensor_values(void)
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <init_sensor_values+0x6>
    19b4:	0f 92       	push	r0
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
	lline = ADC_Conversion(3);	//Getting data of Left WL Sensor
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ADC_Conversion>
    19c0:	80 93 7a 03 	sts	0x037A, r24
	cline = ADC_Conversion(2);	//Getting data of Center WL Sensor
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ADC_Conversion>
    19ca:	80 93 7b 03 	sts	0x037B, r24
	rline = ADC_Conversion(1);	//Getting data of Right WL Sensor
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ADC_Conversion>
    19d4:	80 93 7c 03 	sts	0x037C, r24
	char str[4];
	str[0] = lline;
    19d8:	80 91 7a 03 	lds	r24, 0x037A
    19dc:	89 83       	std	Y+1, r24	; 0x01
	str[1] = cline;
    19de:	80 91 7b 03 	lds	r24, 0x037B
    19e2:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = rline;
    19e4:	80 91 7c 03 	lds	r24, 0x037C
    19e8:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = ',';
    19ea:	8c e2       	ldi	r24, 0x2C	; 44
    19ec:	8c 83       	std	Y+4, r24	; 0x04
	//xbee_sendString(str,4);
	print_sensor(2,1,3);		//Prints value of White Line Sensor Left
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	43 e0       	ldi	r20, 0x03	; 3
    19f4:	0e 94 b9 0c 	call	0x1972	; 0x1972 <print_sensor>
	print_sensor(2,5,2);		//Prints value of White Line Sensor Center
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	65 e0       	ldi	r22, 0x05	; 5
    19fc:	42 e0       	ldi	r20, 0x02	; 2
    19fe:	0e 94 b9 0c 	call	0x1972	; 0x1972 <print_sensor>
	print_sensor(2,9,1);		//Prints Value of White Line Sensor Right
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	69 e0       	ldi	r22, 0x09	; 9
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 b9 0c 	call	0x1972	; 0x1972 <print_sensor>
	last_prop = prop; 
	pow_diff = kp*prop + ki*integral + kd*der;
	if(pow_diff > max) pow_diff = max;
	if(pow_diff < -max) pow_diff = -max;
	*/
	fsharp = ADC_Conversion(11);
    1a0c:	8b e0       	ldi	r24, 0x0B	; 11
    1a0e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ADC_Conversion>
    1a12:	80 93 7d 03 	sts	0x037D, r24
	fir = ADC_Conversion(6);
    1a16:	86 e0       	ldi	r24, 0x06	; 6
    1a18:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ADC_Conversion>
    1a1c:	80 93 7e 03 	sts	0x037E, r24
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <take_turn>:


void take_turn(int d)
{
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	a0 97       	sbiw	r28, 0x20	; 32
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	98 a3       	std	Y+32, r25	; 0x20
    1a4c:	8f 8f       	std	Y+31, r24	; 0x1f
	int flag=0;
    1a4e:	1e 8e       	std	Y+30, r1	; 0x1e
    1a50:	1d 8e       	std	Y+29, r1	; 0x1d
	while(1)
	{
		if(d==1) left();
    1a52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a54:	98 a1       	ldd	r25, Y+32	; 0x20
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	19 f4       	brne	.+6      	; 0x1a62 <take_turn+0x34>
    1a5c:	0e 94 a5 02 	call	0x54a	; 0x54a <left>
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <take_turn+0x42>
		else if(d==2) right();
    1a62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a64:	98 a1       	ldd	r25, Y+32	; 0x20
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	91 05       	cpc	r25, r1
    1a6a:	11 f4       	brne	.+4      	; 0x1a70 <take_turn+0x42>
    1a6c:	0e 94 af 02 	call	0x55e	; 0x55e <right>
		init_sensor_values();
    1a70:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <init_sensor_values>
		//if(pow_diff < 0) velocity((max+pow_diff), max);
		//else velocity(max, (max-pow_diff));	
		if(d==1) velocity(leftspeed,(rightspeed-delta));
    1a74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a76:	98 a1       	ldd	r25, Y+32	; 0x20
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	a9 f4       	brne	.+42     	; 0x1aa8 <take_turn+0x7a>
    1a7e:	80 91 00 02 	lds	r24, 0x0200
    1a82:	90 91 01 02 	lds	r25, 0x0201
    1a86:	38 2f       	mov	r19, r24
    1a88:	80 91 02 02 	lds	r24, 0x0202
    1a8c:	90 91 03 02 	lds	r25, 0x0203
    1a90:	28 2f       	mov	r18, r24
    1a92:	80 91 04 02 	lds	r24, 0x0204
    1a96:	90 91 05 02 	lds	r25, 0x0205
    1a9a:	92 2f       	mov	r25, r18
    1a9c:	98 1b       	sub	r25, r24
    1a9e:	83 2f       	mov	r24, r19
    1aa0:	69 2f       	mov	r22, r25
    1aa2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>
    1aa6:	19 c0       	rjmp	.+50     	; 0x1ada <take_turn+0xac>
		else if(d==2) velocity(leftspeed,(rightspeed-delta));
    1aa8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aaa:	98 a1       	ldd	r25, Y+32	; 0x20
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	91 05       	cpc	r25, r1
    1ab0:	a1 f4       	brne	.+40     	; 0x1ada <take_turn+0xac>
    1ab2:	80 91 00 02 	lds	r24, 0x0200
    1ab6:	90 91 01 02 	lds	r25, 0x0201
    1aba:	38 2f       	mov	r19, r24
    1abc:	80 91 02 02 	lds	r24, 0x0202
    1ac0:	90 91 03 02 	lds	r25, 0x0203
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	80 91 04 02 	lds	r24, 0x0204
    1aca:	90 91 05 02 	lds	r25, 0x0205
    1ace:	92 2f       	mov	r25, r18
    1ad0:	98 1b       	sub	r25, r24
    1ad2:	83 2f       	mov	r24, r19
    1ad4:	69 2f       	mov	r22, r25
    1ad6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>

		if(cline<thresh && lline<thresh && rline<thresh)  //all on white
    1ada:	80 91 7b 03 	lds	r24, 0x037B
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	80 91 0c 02 	lds	r24, 0x020C
    1ae6:	90 91 0d 02 	lds	r25, 0x020D
    1aea:	28 17       	cp	r18, r24
    1aec:	39 07       	cpc	r19, r25
    1aee:	0c f0       	brlt	.+2      	; 0x1af2 <take_turn+0xc4>
    1af0:	b0 cf       	rjmp	.-160    	; 0x1a52 <take_turn+0x24>
    1af2:	80 91 7a 03 	lds	r24, 0x037A
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	80 91 0c 02 	lds	r24, 0x020C
    1afe:	90 91 0d 02 	lds	r25, 0x020D
    1b02:	28 17       	cp	r18, r24
    1b04:	39 07       	cpc	r19, r25
    1b06:	0c f0       	brlt	.+2      	; 0x1b0a <take_turn+0xdc>
    1b08:	a4 cf       	rjmp	.-184    	; 0x1a52 <take_turn+0x24>
    1b0a:	80 91 7c 03 	lds	r24, 0x037C
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	80 91 0c 02 	lds	r24, 0x020C
    1b16:	90 91 0d 02 	lds	r25, 0x020D
    1b1a:	28 17       	cp	r18, r24
    1b1c:	39 07       	cpc	r19, r25
    1b1e:	0c f0       	brlt	.+2      	; 0x1b22 <take_turn+0xf4>
    1b20:	98 cf       	rjmp	.-208    	; 0x1a52 <take_turn+0x24>
		{
			stop();
    1b22:	0e 94 cd 02 	call	0x59a	; 0x59a <stop>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a8 e4       	ldi	r26, 0x48	; 72
    1b2c:	b2 e4       	ldi	r27, 0x42	; 66
    1b2e:	89 8f       	std	Y+25, r24	; 0x19
    1b30:	9a 8f       	std	Y+26, r25	; 0x1a
    1b32:	ab 8f       	std	Y+27, r26	; 0x1b
    1b34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	69 8d       	ldd	r22, Y+25	; 0x19
    1b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3e:	2d ec       	ldi	r18, 0xCD	; 205
    1b40:	3c ec       	ldi	r19, 0xCC	; 204
    1b42:	4c e2       	ldi	r20, 0x2C	; 44
    1b44:	55 e4       	ldi	r21, 0x45	; 69
    1b46:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8d 8b       	std	Y+21, r24	; 0x15
    1b50:	9e 8b       	std	Y+22, r25	; 0x16
    1b52:	af 8b       	std	Y+23, r26	; 0x17
    1b54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b56:	6d 89       	ldd	r22, Y+21	; 0x15
    1b58:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <take_turn+0x14a>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <take_turn+0x1c8>
	else if (__tmp > 65535)
    1b78:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <take_turn+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	69 8d       	ldd	r22, Y+25	; 0x19
    1b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9c 8b       	std	Y+20, r25	; 0x14
    1bb6:	8b 8b       	std	Y+19, r24	; 0x13
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <take_turn+0x1aa>
    1bba:	84 e1       	ldi	r24, 0x14	; 20
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	9a 8b       	std	Y+18, r25	; 0x12
    1bc0:	89 8b       	std	Y+17, r24	; 0x11
    1bc2:	89 89       	ldd	r24, Y+17	; 0x11
    1bc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <take_turn+0x198>
    1bca:	9a 8b       	std	Y+18, r25	; 0x12
    1bcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bda:	9c 89       	ldd	r25, Y+20	; 0x14
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <take_turn+0x18c>
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <take_turn+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	6d 89       	ldd	r22, Y+21	; 0x15
    1be4:	7e 89       	ldd	r23, Y+22	; 0x16
    1be6:	8f 89       	ldd	r24, Y+23	; 0x17
    1be8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bea:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9c 8b       	std	Y+20, r25	; 0x14
    1bf4:	8b 8b       	std	Y+19, r24	; 0x13
    1bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfa:	98 8b       	std	Y+16, r25	; 0x10
    1bfc:	8f 87       	std	Y+15, r24	; 0x0f
    1bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c00:	98 89       	ldd	r25, Y+16	; 0x10
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <take_turn+0x1d4>
    1c06:	98 8b       	std	Y+16, r25	; 0x10
    1c08:	8f 87       	std	Y+15, r24	; 0x0f
			break;
		}
	}
	while(1)
	{
		if(d==1) left();
    1c0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c0c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	91 05       	cpc	r25, r1
    1c12:	19 f4       	brne	.+6      	; 0x1c1a <take_turn+0x1ec>
    1c14:	0e 94 a5 02 	call	0x54a	; 0x54a <left>
    1c18:	07 c0       	rjmp	.+14     	; 0x1c28 <take_turn+0x1fa>
		else if(d==2) right();
    1c1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	91 05       	cpc	r25, r1
    1c22:	11 f4       	brne	.+4      	; 0x1c28 <take_turn+0x1fa>
    1c24:	0e 94 af 02 	call	0x55e	; 0x55e <right>
		init_sensor_values();
    1c28:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <init_sensor_values>
		//if(pow_diff < 0) velocity((max+pow_diff)/2, max/2);
		//else velocity(max/2, (max-pow_diff)/2);
		if(d==1) velocity(leftspeed*0.5,(rightspeed-delta));
    1c2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	91 05       	cpc	r25, r1
    1c34:	79 f5       	brne	.+94     	; 0x1c94 <take_turn+0x266>
    1c36:	80 91 00 02 	lds	r24, 0x0200
    1c3a:	90 91 01 02 	lds	r25, 0x0201
    1c3e:	aa 27       	eor	r26, r26
    1c40:	97 fd       	sbrc	r25, 7
    1c42:	a0 95       	com	r26
    1c44:	ba 2f       	mov	r27, r26
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__floatsisf>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	5f e3       	ldi	r21, 0x3F	; 63
    1c5e:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	38 2f       	mov	r19, r24
    1c74:	80 91 02 02 	lds	r24, 0x0202
    1c78:	90 91 03 02 	lds	r25, 0x0203
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	80 91 04 02 	lds	r24, 0x0204
    1c82:	90 91 05 02 	lds	r25, 0x0205
    1c86:	92 2f       	mov	r25, r18
    1c88:	98 1b       	sub	r25, r24
    1c8a:	83 2f       	mov	r24, r19
    1c8c:	69 2f       	mov	r22, r25
    1c8e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>
    1c92:	35 c0       	rjmp	.+106    	; 0x1cfe <take_turn+0x2d0>
		else if(d==2) velocity(leftspeed,(rightspeed-delta)*0.5);
    1c94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c96:	98 a1       	ldd	r25, Y+32	; 0x20
    1c98:	82 30       	cpi	r24, 0x02	; 2
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	81 f5       	brne	.+96     	; 0x1cfe <take_turn+0x2d0>
    1c9e:	80 91 00 02 	lds	r24, 0x0200
    1ca2:	90 91 01 02 	lds	r25, 0x0201
    1ca6:	18 2f       	mov	r17, r24
    1ca8:	20 91 02 02 	lds	r18, 0x0202
    1cac:	30 91 03 02 	lds	r19, 0x0203
    1cb0:	80 91 04 02 	lds	r24, 0x0204
    1cb4:	90 91 05 02 	lds	r25, 0x0205
    1cb8:	a9 01       	movw	r20, r18
    1cba:	48 1b       	sub	r20, r24
    1cbc:	59 0b       	sbc	r21, r25
    1cbe:	ca 01       	movw	r24, r20
    1cc0:	aa 27       	eor	r26, r26
    1cc2:	97 fd       	sbrc	r25, 7
    1cc4:	a0 95       	com	r26
    1cc6:	ba 2f       	mov	r27, r26
    1cc8:	bc 01       	movw	r22, r24
    1cca:	cd 01       	movw	r24, r26
    1ccc:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__floatsisf>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	5f e3       	ldi	r21, 0x3F	; 63
    1ce0:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	98 2f       	mov	r25, r24
    1cf6:	81 2f       	mov	r24, r17
    1cf8:	69 2f       	mov	r22, r25
    1cfa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>

		if(cline>thresh && lline>thresh*0.6 && d==1) flag=1;
    1cfe:	80 91 7b 03 	lds	r24, 0x037B
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	80 91 0c 02 	lds	r24, 0x020C
    1d0a:	90 91 0d 02 	lds	r25, 0x020D
    1d0e:	82 17       	cp	r24, r18
    1d10:	93 07       	cpc	r25, r19
    1d12:	bc f5       	brge	.+110    	; 0x1d82 <take_turn+0x354>
    1d14:	80 91 7a 03 	lds	r24, 0x037A
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	aa 27       	eor	r26, r26
    1d1e:	97 fd       	sbrc	r25, 7
    1d20:	a0 95       	com	r26
    1d22:	ba 2f       	mov	r27, r26
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__floatsisf>
    1d2c:	7b 01       	movw	r14, r22
    1d2e:	8c 01       	movw	r16, r24
    1d30:	80 91 0c 02 	lds	r24, 0x020C
    1d34:	90 91 0d 02 	lds	r25, 0x020D
    1d38:	aa 27       	eor	r26, r26
    1d3a:	97 fd       	sbrc	r25, 7
    1d3c:	a0 95       	com	r26
    1d3e:	ba 2f       	mov	r27, r26
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__floatsisf>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	2a e9       	ldi	r18, 0x9A	; 154
    1d52:	39 e9       	ldi	r19, 0x99	; 153
    1d54:	49 e1       	ldi	r20, 0x19	; 25
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9c 01       	movw	r18, r24
    1d62:	ad 01       	movw	r20, r26
    1d64:	c8 01       	movw	r24, r16
    1d66:	b7 01       	movw	r22, r14
    1d68:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	4c f4       	brge	.+18     	; 0x1d82 <take_turn+0x354>
    1d70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d72:	98 a1       	ldd	r25, Y+32	; 0x20
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	21 f4       	brne	.+8      	; 0x1d82 <take_turn+0x354>
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d80:	8d 8f       	std	Y+29, r24	; 0x1d
		if(cline>thresh && rline>thresh*0.6 && d==2) flag=1;
    1d82:	80 91 7b 03 	lds	r24, 0x037B
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	80 91 0c 02 	lds	r24, 0x020C
    1d8e:	90 91 0d 02 	lds	r25, 0x020D
    1d92:	82 17       	cp	r24, r18
    1d94:	93 07       	cpc	r25, r19
    1d96:	bc f5       	brge	.+110    	; 0x1e06 <take_turn+0x3d8>
    1d98:	80 91 7c 03 	lds	r24, 0x037C
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	aa 27       	eor	r26, r26
    1da2:	97 fd       	sbrc	r25, 7
    1da4:	a0 95       	com	r26
    1da6:	ba 2f       	mov	r27, r26
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__floatsisf>
    1db0:	7b 01       	movw	r14, r22
    1db2:	8c 01       	movw	r16, r24
    1db4:	80 91 0c 02 	lds	r24, 0x020C
    1db8:	90 91 0d 02 	lds	r25, 0x020D
    1dbc:	aa 27       	eor	r26, r26
    1dbe:	97 fd       	sbrc	r25, 7
    1dc0:	a0 95       	com	r26
    1dc2:	ba 2f       	mov	r27, r26
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__floatsisf>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	2a e9       	ldi	r18, 0x9A	; 154
    1dd6:	39 e9       	ldi	r19, 0x99	; 153
    1dd8:	49 e1       	ldi	r20, 0x19	; 25
    1dda:	5f e3       	ldi	r21, 0x3F	; 63
    1ddc:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9c 01       	movw	r18, r24
    1de6:	ad 01       	movw	r20, r26
    1de8:	c8 01       	movw	r24, r16
    1dea:	b7 01       	movw	r22, r14
    1dec:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	4c f4       	brge	.+18     	; 0x1e06 <take_turn+0x3d8>
    1df4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df6:	98 a1       	ldd	r25, Y+32	; 0x20
    1df8:	82 30       	cpi	r24, 0x02	; 2
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	21 f4       	brne	.+8      	; 0x1e06 <take_turn+0x3d8>
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9e 8f       	std	Y+30, r25	; 0x1e
    1e04:	8d 8f       	std	Y+29, r24	; 0x1d
		if(flag==1)
    1e06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <take_turn+0x3e4>
    1e10:	fc ce       	rjmp	.-520    	; 0x1c0a <take_turn+0x1dc>
		{
			stop();
    1e12:	0e 94 cd 02 	call	0x59a	; 0x59a <stop>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 e2       	ldi	r26, 0x20	; 32
    1e1c:	b2 e4       	ldi	r27, 0x42	; 66
    1e1e:	8b 87       	std	Y+11, r24	; 0x0b
    1e20:	9c 87       	std	Y+12, r25	; 0x0c
    1e22:	ad 87       	std	Y+13, r26	; 0x0d
    1e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	2d ec       	ldi	r18, 0xCD	; 205
    1e30:	3c ec       	ldi	r19, 0xCC	; 204
    1e32:	4c e2       	ldi	r20, 0x2C	; 44
    1e34:	55 e4       	ldi	r21, 0x45	; 69
    1e36:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8f 83       	std	Y+7, r24	; 0x07
    1e40:	98 87       	std	Y+8, r25	; 0x08
    1e42:	a9 87       	std	Y+9, r26	; 0x09
    1e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <take_turn+0x43a>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <take_turn+0x4b8>
	else if (__tmp > 65535)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <take_turn+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <take_turn+0x49a>
    1eaa:	84 e1       	ldi	r24, 0x14	; 20
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <take_turn+0x488>
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <take_turn+0x47c>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <take_turn+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <take_turn+0x4c4>
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(40);
			break;
		}
	}
    1efa:	a0 96       	adiw	r28, 0x20	; 32
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	08 95       	ret

00001f14 <turn_left>:

}

void turn_left()
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
	lcd_cursor(1,1);		
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	61 e0       	ldi	r22, 0x01	; 1
    1f20:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
	lcd_string("Left");
    1f24:	8e e0       	ldi	r24, 0x0E	; 14
    1f26:	92 e0       	ldi	r25, 0x02	; 2
    1f28:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>
	take_turn(1);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <take_turn>
}
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <turn_right>:
void turn_right()
{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	lcd_cursor(1,1);		
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	61 e0       	ldi	r22, 0x01	; 1
    1f46:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
	lcd_string("Right");
    1f4a:	83 e1       	ldi	r24, 0x13	; 19
    1f4c:	92 e0       	ldi	r25, 0x02	; 2
    1f4e:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>
	take_turn(2);
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <take_turn>
}
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <checkobstacle>:

int checkobstacle()
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	60 97       	sbiw	r28, 0x10	; 16
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
	init_sensor_values();
    1f74:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <init_sensor_values>
	if(fsharp>0x82 || fir<0xF0)
    1f78:	80 91 7d 03 	lds	r24, 0x037D
    1f7c:	83 38       	cpi	r24, 0x83	; 131
    1f7e:	28 f4       	brcc	.+10     	; 0x1f8a <checkobstacle+0x2a>
    1f80:	80 91 7e 03 	lds	r24, 0x037E
    1f84:	80 3f       	cpi	r24, 0xF0	; 240
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <checkobstacle+0x2a>
    1f88:	7f c0       	rjmp	.+254    	; 0x2088 <checkobstacle+0x128>
	{
		stop();
    1f8a:	0e 94 cd 02 	call	0x59a	; 0x59a <stop>
		lcd_cursor(1,1);		
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
		lcd_string("Obstacle");		
    1f96:	89 e1       	ldi	r24, 0x19	; 25
    1f98:	92 e0       	ldi	r25, 0x02	; 2
    1f9a:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	a8 ec       	ldi	r26, 0xC8	; 200
    1fa4:	b2 e4       	ldi	r27, 0x42	; 66
    1fa6:	8b 87       	std	Y+11, r24	; 0x0b
    1fa8:	9c 87       	std	Y+12, r25	; 0x0c
    1faa:	ad 87       	std	Y+13, r26	; 0x0d
    1fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb6:	2d ec       	ldi	r18, 0xCD	; 205
    1fb8:	3c ec       	ldi	r19, 0xCC	; 204
    1fba:	4c e2       	ldi	r20, 0x2C	; 44
    1fbc:	55 e4       	ldi	r21, 0x45	; 69
    1fbe:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8f 83       	std	Y+7, r24	; 0x07
    1fc8:	98 87       	std	Y+8, r25	; 0x08
    1fca:	a9 87       	std	Y+9, r26	; 0x09
    1fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fce:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd0:	78 85       	ldd	r23, Y+8	; 0x08
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <checkobstacle+0x90>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <checkobstacle+0x10e>
	else if (__tmp > 65535)
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	4c f5       	brge	.+82     	; 0x205a <checkobstacle+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	6b 85       	ldd	r22, Y+11	; 0x0b
    200a:	7c 85       	ldd	r23, Y+12	; 0x0c
    200c:	8d 85       	ldd	r24, Y+13	; 0x0d
    200e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <checkobstacle+0xf0>
    2032:	84 e1       	ldi	r24, 0x14	; 20
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	8b 83       	std	Y+3, r24	; 0x03
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <checkobstacle+0xde>
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	8d 81       	ldd	r24, Y+5	; 0x05
    2048:	9e 81       	ldd	r25, Y+6	; 0x06
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <checkobstacle+0xd2>
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <checkobstacle+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <checkobstacle+0x11a>
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);		
		return  0;
    2082:	18 8a       	std	Y+16, r1	; 0x10
    2084:	1f 86       	std	Y+15, r1	; 0x0f
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <checkobstacle+0x130>
	}	
	return 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	98 8b       	std	Y+16, r25	; 0x10
    208e:	8f 87       	std	Y+15, r24	; 0x0f
    2090:	8f 85       	ldd	r24, Y+15	; 0x0f
    2092:	98 89       	ldd	r25, Y+16	; 0x10
}
    2094:	60 96       	adiw	r28, 0x10	; 16
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <checkintersection>:

int checkintersection()
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	ac 97       	sbiw	r28, 0x2c	; 44
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
	init_sensor_values();
    20ba:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <init_sensor_values>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e8       	ldi	r26, 0x80	; 128
    20c4:	bf e3       	ldi	r27, 0x3F	; 63
    20c6:	8f a3       	std	Y+39, r24	; 0x27
    20c8:	98 a7       	std	Y+40, r25	; 0x28
    20ca:	a9 a7       	std	Y+41, r26	; 0x29
    20cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6f a1       	ldd	r22, Y+39	; 0x27
    20d0:	78 a5       	ldd	r23, Y+40	; 0x28
    20d2:	89 a5       	ldd	r24, Y+41	; 0x29
    20d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d6:	2d ec       	ldi	r18, 0xCD	; 205
    20d8:	3c ec       	ldi	r19, 0xCC	; 204
    20da:	4c e2       	ldi	r20, 0x2C	; 44
    20dc:	55 e4       	ldi	r21, 0x45	; 69
    20de:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8b a3       	std	Y+35, r24	; 0x23
    20e8:	9c a3       	std	Y+36, r25	; 0x24
    20ea:	ad a3       	std	Y+37, r26	; 0x25
    20ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ee:	6b a1       	ldd	r22, Y+35	; 0x23
    20f0:	7c a1       	ldd	r23, Y+36	; 0x24
    20f2:	8d a1       	ldd	r24, Y+37	; 0x25
    20f4:	9e a1       	ldd	r25, Y+38	; 0x26
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <checkintersection+0x6a>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9a a3       	std	Y+34, r25	; 0x22
    210c:	89 a3       	std	Y+33, r24	; 0x21
    210e:	3f c0       	rjmp	.+126    	; 0x218e <checkintersection+0xe8>
	else if (__tmp > 65535)
    2110:	6b a1       	ldd	r22, Y+35	; 0x23
    2112:	7c a1       	ldd	r23, Y+36	; 0x24
    2114:	8d a1       	ldd	r24, Y+37	; 0x25
    2116:	9e a1       	ldd	r25, Y+38	; 0x26
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <checkintersection+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6f a1       	ldd	r22, Y+39	; 0x27
    212a:	78 a5       	ldd	r23, Y+40	; 0x28
    212c:	89 a5       	ldd	r24, Y+41	; 0x29
    212e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9a a3       	std	Y+34, r25	; 0x22
    214e:	89 a3       	std	Y+33, r24	; 0x21
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <checkintersection+0xca>
    2152:	84 e1       	ldi	r24, 0x14	; 20
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	98 a3       	std	Y+32, r25	; 0x20
    2158:	8f 8f       	std	Y+31, r24	; 0x1f
    215a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    215c:	98 a1       	ldd	r25, Y+32	; 0x20
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <checkintersection+0xb8>
    2162:	98 a3       	std	Y+32, r25	; 0x20
    2164:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	89 a1       	ldd	r24, Y+33	; 0x21
    2168:	9a a1       	ldd	r25, Y+34	; 0x22
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9a a3       	std	Y+34, r25	; 0x22
    216e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	89 a1       	ldd	r24, Y+33	; 0x21
    2172:	9a a1       	ldd	r25, Y+34	; 0x22
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <checkintersection+0xac>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <checkintersection+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6b a1       	ldd	r22, Y+35	; 0x23
    217c:	7c a1       	ldd	r23, Y+36	; 0x24
    217e:	8d a1       	ldd	r24, Y+37	; 0x25
    2180:	9e a1       	ldd	r25, Y+38	; 0x26
    2182:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9a a3       	std	Y+34, r25	; 0x22
    218c:	89 a3       	std	Y+33, r24	; 0x21
    218e:	89 a1       	ldd	r24, Y+33	; 0x21
    2190:	9a a1       	ldd	r25, Y+34	; 0x22
    2192:	9e 8f       	std	Y+30, r25	; 0x1e
    2194:	8d 8f       	std	Y+29, r24	; 0x1d
    2196:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2198:	9e 8d       	ldd	r25, Y+30	; 0x1e
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <checkintersection+0xf4>
    219e:	9e 8f       	std	Y+30, r25	; 0x1e
    21a0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	if( cline>thresh && lline>thresh && rline >thresh)
    21a2:	80 91 7b 03 	lds	r24, 0x037B
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	80 91 0c 02 	lds	r24, 0x020C
    21ae:	90 91 0d 02 	lds	r25, 0x020D
    21b2:	82 17       	cp	r24, r18
    21b4:	93 07       	cpc	r25, r19
    21b6:	0c f0       	brlt	.+2      	; 0x21ba <checkintersection+0x114>
    21b8:	27 c1       	rjmp	.+590    	; 0x2408 <__stack+0x209>
    21ba:	80 91 7a 03 	lds	r24, 0x037A
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	80 91 0c 02 	lds	r24, 0x020C
    21c6:	90 91 0d 02 	lds	r25, 0x020D
    21ca:	82 17       	cp	r24, r18
    21cc:	93 07       	cpc	r25, r19
    21ce:	0c f0       	brlt	.+2      	; 0x21d2 <checkintersection+0x12c>
    21d0:	1b c1       	rjmp	.+566    	; 0x2408 <__stack+0x209>
    21d2:	80 91 7c 03 	lds	r24, 0x037C
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	80 91 0c 02 	lds	r24, 0x020C
    21de:	90 91 0d 02 	lds	r25, 0x020D
    21e2:	82 17       	cp	r24, r18
    21e4:	93 07       	cpc	r25, r19
    21e6:	0c f0       	brlt	.+2      	; 0x21ea <checkintersection+0x144>
    21e8:	0f c1       	rjmp	.+542    	; 0x2408 <__stack+0x209>
	{
		buzzer_on();
    21ea:	0e 94 3a 02 	call	0x474	; 0x474 <buzzer_on>
		lcd_cursor(1,1);		
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
		lcd_string("Intersection");
    21f6:	82 e2       	ldi	r24, 0x22	; 34
    21f8:	92 e0       	ldi	r25, 0x02	; 2
    21fa:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>
		init_sensor_values();
    21fe:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <init_sensor_values>
		forward();
    2202:	0e 94 91 02 	call	0x522	; 0x522 <forward>
		velocity(leftspeed,(rightspeed-delta));
    2206:	80 91 00 02 	lds	r24, 0x0200
    220a:	90 91 01 02 	lds	r25, 0x0201
    220e:	38 2f       	mov	r19, r24
    2210:	80 91 02 02 	lds	r24, 0x0202
    2214:	90 91 03 02 	lds	r25, 0x0203
    2218:	28 2f       	mov	r18, r24
    221a:	80 91 04 02 	lds	r24, 0x0204
    221e:	90 91 05 02 	lds	r25, 0x0205
    2222:	92 2f       	mov	r25, r18
    2224:	98 1b       	sub	r25, r24
    2226:	83 2f       	mov	r24, r19
    2228:	69 2f       	mov	r22, r25
    222a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a8 e4       	ldi	r26, 0x48	; 72
    2234:	b3 e4       	ldi	r27, 0x43	; 67
    2236:	89 8f       	std	Y+25, r24	; 0x19
    2238:	9a 8f       	std	Y+26, r25	; 0x1a
    223a:	ab 8f       	std	Y+27, r26	; 0x1b
    223c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223e:	69 8d       	ldd	r22, Y+25	; 0x19
    2240:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2242:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2244:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2246:	2d ec       	ldi	r18, 0xCD	; 205
    2248:	3c ec       	ldi	r19, 0xCC	; 204
    224a:	4c e2       	ldi	r20, 0x2C	; 44
    224c:	55 e4       	ldi	r21, 0x45	; 69
    224e:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	8d 8b       	std	Y+21, r24	; 0x15
    2258:	9e 8b       	std	Y+22, r25	; 0x16
    225a:	af 8b       	std	Y+23, r26	; 0x17
    225c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    225e:	6d 89       	ldd	r22, Y+21	; 0x15
    2260:	7e 89       	ldd	r23, Y+22	; 0x16
    2262:	8f 89       	ldd	r24, Y+23	; 0x17
    2264:	98 8d       	ldd	r25, Y+24	; 0x18
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	2c f4       	brge	.+10     	; 0x2280 <__stack+0x81>
		__ticks = 1;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9c 8b       	std	Y+20, r25	; 0x14
    227c:	8b 8b       	std	Y+19, r24	; 0x13
    227e:	3f c0       	rjmp	.+126    	; 0x22fe <__stack+0xff>
	else if (__tmp > 65535)
    2280:	6d 89       	ldd	r22, Y+21	; 0x15
    2282:	7e 89       	ldd	r23, Y+22	; 0x16
    2284:	8f 89       	ldd	r24, Y+23	; 0x17
    2286:	98 8d       	ldd	r25, Y+24	; 0x18
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	3f ef       	ldi	r19, 0xFF	; 255
    228c:	4f e7       	ldi	r20, 0x7F	; 127
    228e:	57 e4       	ldi	r21, 0x47	; 71
    2290:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    2294:	18 16       	cp	r1, r24
    2296:	4c f5       	brge	.+82     	; 0x22ea <__stack+0xeb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2298:	69 8d       	ldd	r22, Y+25	; 0x19
    229a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    229c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    229e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9c 8b       	std	Y+20, r25	; 0x14
    22be:	8b 8b       	std	Y+19, r24	; 0x13
    22c0:	0f c0       	rjmp	.+30     	; 0x22e0 <__stack+0xe1>
    22c2:	84 e1       	ldi	r24, 0x14	; 20
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	9a 8b       	std	Y+18, r25	; 0x12
    22c8:	89 8b       	std	Y+17, r24	; 0x11
    22ca:	89 89       	ldd	r24, Y+17	; 0x11
    22cc:	9a 89       	ldd	r25, Y+18	; 0x12
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <__stack+0xcf>
    22d2:	9a 8b       	std	Y+18, r25	; 0x12
    22d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	8b 89       	ldd	r24, Y+19	; 0x13
    22d8:	9c 89       	ldd	r25, Y+20	; 0x14
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	9c 8b       	std	Y+20, r25	; 0x14
    22de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e0:	8b 89       	ldd	r24, Y+19	; 0x13
    22e2:	9c 89       	ldd	r25, Y+20	; 0x14
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	69 f7       	brne	.-38     	; 0x22c2 <__stack+0xc3>
    22e8:	14 c0       	rjmp	.+40     	; 0x2312 <__stack+0x113>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ea:	6d 89       	ldd	r22, Y+21	; 0x15
    22ec:	7e 89       	ldd	r23, Y+22	; 0x16
    22ee:	8f 89       	ldd	r24, Y+23	; 0x17
    22f0:	98 8d       	ldd	r25, Y+24	; 0x18
    22f2:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9c 8b       	std	Y+20, r25	; 0x14
    22fc:	8b 8b       	std	Y+19, r24	; 0x13
    22fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2300:	9c 89       	ldd	r25, Y+20	; 0x14
    2302:	98 8b       	std	Y+16, r25	; 0x10
    2304:	8f 87       	std	Y+15, r24	; 0x0f
    2306:	8f 85       	ldd	r24, Y+15	; 0x0f
    2308:	98 89       	ldd	r25, Y+16	; 0x10
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <__stack+0x10b>
    230e:	98 8b       	std	Y+16, r25	; 0x10
    2310:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);		
		stop();
    2312:	0e 94 cd 02 	call	0x59a	; 0x59a <stop>
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	aa ef       	ldi	r26, 0xFA	; 250
    231c:	b3 e4       	ldi	r27, 0x43	; 67
    231e:	8b 87       	std	Y+11, r24	; 0x0b
    2320:	9c 87       	std	Y+12, r25	; 0x0c
    2322:	ad 87       	std	Y+13, r26	; 0x0d
    2324:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	6b 85       	ldd	r22, Y+11	; 0x0b
    2328:	7c 85       	ldd	r23, Y+12	; 0x0c
    232a:	8d 85       	ldd	r24, Y+13	; 0x0d
    232c:	9e 85       	ldd	r25, Y+14	; 0x0e
    232e:	2d ec       	ldi	r18, 0xCD	; 205
    2330:	3c ec       	ldi	r19, 0xCC	; 204
    2332:	4c e2       	ldi	r20, 0x2C	; 44
    2334:	55 e4       	ldi	r21, 0x45	; 69
    2336:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	8f 83       	std	Y+7, r24	; 0x07
    2340:	98 87       	std	Y+8, r25	; 0x08
    2342:	a9 87       	std	Y+9, r26	; 0x09
    2344:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2346:	6f 81       	ldd	r22, Y+7	; 0x07
    2348:	78 85       	ldd	r23, Y+8	; 0x08
    234a:	89 85       	ldd	r24, Y+9	; 0x09
    234c:	9a 85       	ldd	r25, Y+10	; 0x0a
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	2c f4       	brge	.+10     	; 0x2368 <__stack+0x169>
		__ticks = 1;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	3f c0       	rjmp	.+126    	; 0x23e6 <__stack+0x1e7>
	else if (__tmp > 65535)
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	78 85       	ldd	r23, Y+8	; 0x08
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	4c f5       	brge	.+82     	; 0x23d2 <__stack+0x1d3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	6b 85       	ldd	r22, Y+11	; 0x0b
    2382:	7c 85       	ldd	r23, Y+12	; 0x0c
    2384:	8d 85       	ldd	r24, Y+13	; 0x0d
    2386:	9e 85       	ldd	r25, Y+14	; 0x0e
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e2       	ldi	r20, 0x20	; 32
    238e:	51 e4       	ldi	r21, 0x41	; 65
    2390:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	0f c0       	rjmp	.+30     	; 0x23c8 <__stack+0x1c9>
    23aa:	84 e1       	ldi	r24, 0x14	; 20
    23ac:	91 e0       	ldi	r25, 0x01	; 1
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <__stack+0x1b7>
    23ba:	9c 83       	std	Y+4, r25	; 0x04
    23bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23be:	8d 81       	ldd	r24, Y+5	; 0x05
    23c0:	9e 81       	ldd	r25, Y+6	; 0x06
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ca:	9e 81       	ldd	r25, Y+6	; 0x06
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	69 f7       	brne	.-38     	; 0x23aa <__stack+0x1ab>
    23d0:	14 c0       	rjmp	.+40     	; 0x23fa <__stack+0x1fb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d2:	6f 81       	ldd	r22, Y+7	; 0x07
    23d4:	78 85       	ldd	r23, Y+8	; 0x08
    23d6:	89 85       	ldd	r24, Y+9	; 0x09
    23d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23da:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9e 83       	std	Y+6, r25	; 0x06
    23e4:	8d 83       	std	Y+5, r24	; 0x05
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <__stack+0x1f3>
    23f6:	9a 83       	std	Y+2, r25	; 0x02
    23f8:	89 83       	std	Y+1, r24	; 0x01
			velocity(leftspeed,(rightspeed-delta));
		}
		stop();
		_delay_ms(500);
		*/
		buzzer_off();
    23fa:	0e 94 25 02 	call	0x44a	; 0x44a <buzzer_off>
		return 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9c a7       	std	Y+44, r25	; 0x2c
    2404:	8b a7       	std	Y+43, r24	; 0x2b
    2406:	02 c0       	rjmp	.+4      	; 0x240c <__stack+0x20d>
	}
	return 0;
    2408:	1c a6       	std	Y+44, r1	; 0x2c
    240a:	1b a6       	std	Y+43, r1	; 0x2b
    240c:	8b a5       	ldd	r24, Y+43	; 0x2b
    240e:	9c a5       	ldd	r25, Y+44	; 0x2c
}
    2410:	ac 96       	adiw	r28, 0x2c	; 44
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <follow>:


void follow()
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	66 97       	sbiw	r28, 0x16	; 22
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
	lcd_cursor(1,1);		
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
	lcd_string("Go Straight");
    243e:	8f e2       	ldi	r24, 0x2F	; 47
    2440:	92 e0       	ldi	r25, 0x02	; 2
    2442:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>
	init_sensor_values();
    2446:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <init_sensor_values>
	forward();
    244a:	0e 94 91 02 	call	0x522	; 0x522 <forward>
	//if(pow_diff < 0) velocity(max+pow_diff, max);
	//else velocity(max, max-pow_diff);
	int left = leftspeed;
    244e:	80 91 00 02 	lds	r24, 0x0200
    2452:	90 91 01 02 	lds	r25, 0x0201
    2456:	9a 8b       	std	Y+18, r25	; 0x12
    2458:	89 8b       	std	Y+17, r24	; 0x11
	int right = rightspeed-delta;
    245a:	20 91 02 02 	lds	r18, 0x0202
    245e:	30 91 03 02 	lds	r19, 0x0203
    2462:	80 91 04 02 	lds	r24, 0x0204
    2466:	90 91 05 02 	lds	r25, 0x0205
    246a:	a9 01       	movw	r20, r18
    246c:	48 1b       	sub	r20, r24
    246e:	59 0b       	sbc	r21, r25
    2470:	ca 01       	movw	r24, r20
    2472:	98 8b       	std	Y+16, r25	; 0x10
    2474:	8f 87       	std	Y+15, r24	; 0x0f
	if(cline>thresh)
    2476:	80 91 7b 03 	lds	r24, 0x037B
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	80 91 0c 02 	lds	r24, 0x020C
    2482:	90 91 0d 02 	lds	r25, 0x020D
    2486:	82 17       	cp	r24, r18
    2488:	93 07       	cpc	r25, r19
    248a:	0c f0       	brlt	.+2      	; 0x248e <follow+0x6c>
    248c:	55 c0       	rjmp	.+170    	; 0x2538 <follow+0x116>
	{
		if(lline>thresh) left = left*0.7;
    248e:	80 91 7a 03 	lds	r24, 0x037A
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	80 91 0c 02 	lds	r24, 0x020C
    249a:	90 91 0d 02 	lds	r25, 0x020D
    249e:	82 17       	cp	r24, r18
    24a0:	93 07       	cpc	r25, r19
    24a2:	fc f4       	brge	.+62     	; 0x24e2 <follow+0xc0>
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	aa 27       	eor	r26, r26
    24aa:	97 fd       	sbrc	r25, 7
    24ac:	a0 95       	com	r26
    24ae:	ba 2f       	mov	r27, r26
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__floatsisf>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	23 e3       	ldi	r18, 0x33	; 51
    24c2:	33 e3       	ldi	r19, 0x33	; 51
    24c4:	43 e3       	ldi	r20, 0x33	; 51
    24c6:	5f e3       	ldi	r21, 0x3F	; 63
    24c8:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0e 94 4a 24 	call	0x4894	; 0x4894 <__fixsfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9a 8b       	std	Y+18, r25	; 0x12
    24de:	89 8b       	std	Y+17, r24	; 0x11
    24e0:	6a c0       	rjmp	.+212    	; 0x25b6 <follow+0x194>
		else if(rline>thresh) right = right*0.7;
    24e2:	80 91 7c 03 	lds	r24, 0x037C
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	80 91 0c 02 	lds	r24, 0x020C
    24ee:	90 91 0d 02 	lds	r25, 0x020D
    24f2:	82 17       	cp	r24, r18
    24f4:	93 07       	cpc	r25, r19
    24f6:	0c f0       	brlt	.+2      	; 0x24fa <follow+0xd8>
    24f8:	5e c0       	rjmp	.+188    	; 0x25b6 <follow+0x194>
    24fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fc:	98 89       	ldd	r25, Y+16	; 0x10
    24fe:	aa 27       	eor	r26, r26
    2500:	97 fd       	sbrc	r25, 7
    2502:	a0 95       	com	r26
    2504:	ba 2f       	mov	r27, r26
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__floatsisf>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	23 e3       	ldi	r18, 0x33	; 51
    2518:	33 e3       	ldi	r19, 0x33	; 51
    251a:	43 e3       	ldi	r20, 0x33	; 51
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 4a 24 	call	0x4894	; 0x4894 <__fixsfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	98 8b       	std	Y+16, r25	; 0x10
    2534:	8f 87       	std	Y+15, r24	; 0x0f
    2536:	3f c0       	rjmp	.+126    	; 0x25b6 <follow+0x194>
	}
	else
	{
		if(lline>thresh) left = left/2;
    2538:	80 91 7a 03 	lds	r24, 0x037A
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	80 91 0c 02 	lds	r24, 0x020C
    2544:	90 91 0d 02 	lds	r25, 0x020D
    2548:	82 17       	cp	r24, r18
    254a:	93 07       	cpc	r25, r19
    254c:	ac f4       	brge	.+42     	; 0x2578 <follow+0x156>
    254e:	89 89       	ldd	r24, Y+17	; 0x11
    2550:	9a 89       	ldd	r25, Y+18	; 0x12
    2552:	9c 8b       	std	Y+20, r25	; 0x14
    2554:	8b 8b       	std	Y+19, r24	; 0x13
    2556:	8b 89       	ldd	r24, Y+19	; 0x13
    2558:	9c 89       	ldd	r25, Y+20	; 0x14
    255a:	99 23       	and	r25, r25
    255c:	34 f4       	brge	.+12     	; 0x256a <follow+0x148>
    255e:	4b 89       	ldd	r20, Y+19	; 0x13
    2560:	5c 89       	ldd	r21, Y+20	; 0x14
    2562:	4f 5f       	subi	r20, 0xFF	; 255
    2564:	5f 4f       	sbci	r21, 0xFF	; 255
    2566:	5c 8b       	std	Y+20, r21	; 0x14
    2568:	4b 8b       	std	Y+19, r20	; 0x13
    256a:	8b 89       	ldd	r24, Y+19	; 0x13
    256c:	9c 89       	ldd	r25, Y+20	; 0x14
    256e:	95 95       	asr	r25
    2570:	87 95       	ror	r24
    2572:	9a 8b       	std	Y+18, r25	; 0x12
    2574:	89 8b       	std	Y+17, r24	; 0x11
    2576:	1f c0       	rjmp	.+62     	; 0x25b6 <follow+0x194>
		else if(rline>thresh) right = right/2;
    2578:	80 91 7c 03 	lds	r24, 0x037C
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	80 91 0c 02 	lds	r24, 0x020C
    2584:	90 91 0d 02 	lds	r25, 0x020D
    2588:	82 17       	cp	r24, r18
    258a:	93 07       	cpc	r25, r19
    258c:	a4 f4       	brge	.+40     	; 0x25b6 <follow+0x194>
    258e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2590:	98 89       	ldd	r25, Y+16	; 0x10
    2592:	9e 8b       	std	Y+22, r25	; 0x16
    2594:	8d 8b       	std	Y+21, r24	; 0x15
    2596:	8d 89       	ldd	r24, Y+21	; 0x15
    2598:	9e 89       	ldd	r25, Y+22	; 0x16
    259a:	99 23       	and	r25, r25
    259c:	34 f4       	brge	.+12     	; 0x25aa <follow+0x188>
    259e:	4d 89       	ldd	r20, Y+21	; 0x15
    25a0:	5e 89       	ldd	r21, Y+22	; 0x16
    25a2:	4f 5f       	subi	r20, 0xFF	; 255
    25a4:	5f 4f       	sbci	r21, 0xFF	; 255
    25a6:	5e 8b       	std	Y+22, r21	; 0x16
    25a8:	4d 8b       	std	Y+21, r20	; 0x15
    25aa:	8d 89       	ldd	r24, Y+21	; 0x15
    25ac:	9e 89       	ldd	r25, Y+22	; 0x16
    25ae:	95 95       	asr	r25
    25b0:	87 95       	ror	r24
    25b2:	98 8b       	std	Y+16, r25	; 0x10
    25b4:	8f 87       	std	Y+15, r24	; 0x0f
	}
	velocity(left,right);
    25b6:	89 89       	ldd	r24, Y+17	; 0x11
    25b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    25ba:	69 2f       	mov	r22, r25
    25bc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>
	if((cline<thresh) && (lline<thresh) && (rline<thresh) ) 
    25c0:	80 91 7b 03 	lds	r24, 0x037B
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	80 91 0c 02 	lds	r24, 0x020C
    25cc:	90 91 0d 02 	lds	r25, 0x020D
    25d0:	28 17       	cp	r18, r24
    25d2:	39 07       	cpc	r19, r25
    25d4:	0c f0       	brlt	.+2      	; 0x25d8 <follow+0x1b6>
    25d6:	94 c0       	rjmp	.+296    	; 0x2700 <follow+0x2de>
    25d8:	80 91 7a 03 	lds	r24, 0x037A
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	80 91 0c 02 	lds	r24, 0x020C
    25e4:	90 91 0d 02 	lds	r25, 0x020D
    25e8:	28 17       	cp	r18, r24
    25ea:	39 07       	cpc	r19, r25
    25ec:	0c f0       	brlt	.+2      	; 0x25f0 <follow+0x1ce>
    25ee:	88 c0       	rjmp	.+272    	; 0x2700 <follow+0x2de>
    25f0:	80 91 7c 03 	lds	r24, 0x037C
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	80 91 0c 02 	lds	r24, 0x020C
    25fc:	90 91 0d 02 	lds	r25, 0x020D
    2600:	28 17       	cp	r18, r24
    2602:	39 07       	cpc	r19, r25
    2604:	0c f0       	brlt	.+2      	; 0x2608 <follow+0x1e6>
    2606:	7c c0       	rjmp	.+248    	; 0x2700 <follow+0x2de>
	{
		
		stop();
    2608:	0e 94 cd 02 	call	0x59a	; 0x59a <stop>
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	a8 ec       	ldi	r26, 0xC8	; 200
    2612:	b2 e4       	ldi	r27, 0x42	; 66
    2614:	8b 87       	std	Y+11, r24	; 0x0b
    2616:	9c 87       	std	Y+12, r25	; 0x0c
    2618:	ad 87       	std	Y+13, r26	; 0x0d
    261a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261c:	6b 85       	ldd	r22, Y+11	; 0x0b
    261e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2620:	8d 85       	ldd	r24, Y+13	; 0x0d
    2622:	9e 85       	ldd	r25, Y+14	; 0x0e
    2624:	2d ec       	ldi	r18, 0xCD	; 205
    2626:	3c ec       	ldi	r19, 0xCC	; 204
    2628:	4c e2       	ldi	r20, 0x2C	; 44
    262a:	55 e4       	ldi	r21, 0x45	; 69
    262c:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	8f 83       	std	Y+7, r24	; 0x07
    2636:	98 87       	std	Y+8, r25	; 0x08
    2638:	a9 87       	std	Y+9, r26	; 0x09
    263a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263c:	6f 81       	ldd	r22, Y+7	; 0x07
    263e:	78 85       	ldd	r23, Y+8	; 0x08
    2640:	89 85       	ldd	r24, Y+9	; 0x09
    2642:	9a 85       	ldd	r25, Y+10	; 0x0a
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e8       	ldi	r20, 0x80	; 128
    264a:	5f e3       	ldi	r21, 0x3F	; 63
    264c:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    2650:	88 23       	and	r24, r24
    2652:	2c f4       	brge	.+10     	; 0x265e <follow+0x23c>
		__ticks = 1;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9e 83       	std	Y+6, r25	; 0x06
    265a:	8d 83       	std	Y+5, r24	; 0x05
    265c:	3f c0       	rjmp	.+126    	; 0x26dc <follow+0x2ba>
	else if (__tmp > 65535)
    265e:	6f 81       	ldd	r22, Y+7	; 0x07
    2660:	78 85       	ldd	r23, Y+8	; 0x08
    2662:	89 85       	ldd	r24, Y+9	; 0x09
    2664:	9a 85       	ldd	r25, Y+10	; 0x0a
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	3f ef       	ldi	r19, 0xFF	; 255
    266a:	4f e7       	ldi	r20, 0x7F	; 127
    266c:	57 e4       	ldi	r21, 0x47	; 71
    266e:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    2672:	18 16       	cp	r1, r24
    2674:	4c f5       	brge	.+82     	; 0x26c8 <follow+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2676:	6b 85       	ldd	r22, Y+11	; 0x0b
    2678:	7c 85       	ldd	r23, Y+12	; 0x0c
    267a:	8d 85       	ldd	r24, Y+13	; 0x0d
    267c:	9e 85       	ldd	r25, Y+14	; 0x0e
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e2       	ldi	r20, 0x20	; 32
    2684:	51 e4       	ldi	r21, 0x41	; 65
    2686:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
    269e:	0f c0       	rjmp	.+30     	; 0x26be <follow+0x29c>
    26a0:	84 e1       	ldi	r24, 0x14	; 20
    26a2:	91 e0       	ldi	r25, 0x01	; 1
    26a4:	9c 83       	std	Y+4, r25	; 0x04
    26a6:	8b 83       	std	Y+3, r24	; 0x03
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <follow+0x28a>
    26b0:	9c 83       	std	Y+4, r25	; 0x04
    26b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b4:	8d 81       	ldd	r24, Y+5	; 0x05
    26b6:	9e 81       	ldd	r25, Y+6	; 0x06
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	9e 81       	ldd	r25, Y+6	; 0x06
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	69 f7       	brne	.-38     	; 0x26a0 <follow+0x27e>
    26c6:	14 c0       	rjmp	.+40     	; 0x26f0 <follow+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ca:	78 85       	ldd	r23, Y+8	; 0x08
    26cc:	89 85       	ldd	r24, Y+9	; 0x09
    26ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d0:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	9e 83       	std	Y+6, r25	; 0x06
    26da:	8d 83       	std	Y+5, r24	; 0x05
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	9e 81       	ldd	r25, Y+6	; 0x06
    26e0:	9a 83       	std	Y+2, r25	; 0x02
    26e2:	89 83       	std	Y+1, r24	; 0x01
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <follow+0x2c6>
    26ec:	9a 83       	std	Y+2, r25	; 0x02
    26ee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		lcd_cursor(1,1);		
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	61 e0       	ldi	r22, 0x01	; 1
    26f4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
		lcd_string("Stop");
    26f8:	8b e3       	ldi	r24, 0x3B	; 59
    26fa:	92 e0       	ldi	r25, 0x02	; 2
    26fc:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>
		
	}
}
    2700:	66 96       	adiw	r28, 0x16	; 22
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <__vector_25>:
unsigned char chkid2 = '\0';
unsigned char mytemp;
const char myid = '0';
int recv_count=0;;
SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    2712:	1f 92       	push	r1
    2714:	0f 92       	push	r0
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	0f 92       	push	r0
    271a:	00 90 5b 00 	lds	r0, 0x005B
    271e:	0f 92       	push	r0
    2720:	11 24       	eor	r1, r1
    2722:	2f 93       	push	r18
    2724:	3f 93       	push	r19
    2726:	4f 93       	push	r20
    2728:	5f 93       	push	r21
    272a:	6f 93       	push	r22
    272c:	7f 93       	push	r23
    272e:	8f 93       	push	r24
    2730:	9f 93       	push	r25
    2732:	af 93       	push	r26
    2734:	bf 93       	push	r27
    2736:	ef 93       	push	r30
    2738:	ff 93       	push	r31
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <__vector_25+0x2e>
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
	//receiving protocol : d myid data --> 3chars sent by coordinator
	cli();
    2744:	f8 94       	cli
	mytemp = UDR0 ;
    2746:	e6 ec       	ldi	r30, 0xC6	; 198
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	80 93 9d 03 	sts	0x039D, r24
	if(recv_count==0) { chkid1=mytemp; recv_count++; }
    2750:	80 91 99 03 	lds	r24, 0x0399
    2754:	90 91 9a 03 	lds	r25, 0x039A
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	71 f4       	brne	.+28     	; 0x2778 <__vector_25+0x66>
    275c:	80 91 9d 03 	lds	r24, 0x039D
    2760:	80 93 97 03 	sts	0x0397, r24
    2764:	80 91 99 03 	lds	r24, 0x0399
    2768:	90 91 9a 03 	lds	r25, 0x039A
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	90 93 9a 03 	sts	0x039A, r25
    2772:	80 93 99 03 	sts	0x0399, r24
    2776:	32 c0       	rjmp	.+100    	; 0x27dc <__vector_25+0xca>
	else if (recv_count==1) { chkid2=mytemp; recv_count++; }
    2778:	80 91 99 03 	lds	r24, 0x0399
    277c:	90 91 9a 03 	lds	r25, 0x039A
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	91 05       	cpc	r25, r1
    2784:	71 f4       	brne	.+28     	; 0x27a2 <__vector_25+0x90>
    2786:	80 91 9d 03 	lds	r24, 0x039D
    278a:	80 93 98 03 	sts	0x0398, r24
    278e:	80 91 99 03 	lds	r24, 0x0399
    2792:	90 91 9a 03 	lds	r25, 0x039A
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	90 93 9a 03 	sts	0x039A, r25
    279c:	80 93 99 03 	sts	0x0399, r24
    27a0:	1d c0       	rjmp	.+58     	; 0x27dc <__vector_25+0xca>
	else if(recv_count==2)
    27a2:	80 91 99 03 	lds	r24, 0x0399
    27a6:	90 91 9a 03 	lds	r25, 0x039A
    27aa:	82 30       	cpi	r24, 0x02	; 2
    27ac:	91 05       	cpc	r25, r1
    27ae:	b1 f4       	brne	.+44     	; 0x27dc <__vector_25+0xca>
	{
		if(chkid1 == 'g' && chkid2 == myid)
    27b0:	80 91 97 03 	lds	r24, 0x0397
    27b4:	87 36       	cpi	r24, 0x67	; 103
    27b6:	51 f4       	brne	.+20     	; 0x27cc <__vector_25+0xba>
    27b8:	90 91 98 03 	lds	r25, 0x0398
    27bc:	80 91 40 02 	lds	r24, 0x0240
    27c0:	98 17       	cp	r25, r24
    27c2:	21 f4       	brne	.+8      	; 0x27cc <__vector_25+0xba>
		{
			data=mytemp;
    27c4:	80 91 9d 03 	lds	r24, 0x039D
    27c8:	80 93 a7 03 	sts	0x03A7, r24
		}
		chkid1='\0';
    27cc:	10 92 97 03 	sts	0x0397, r1
		chkid2='\0';
    27d0:	10 92 98 03 	sts	0x0398, r1
		recv_count=0;
    27d4:	10 92 9a 03 	sts	0x039A, r1
    27d8:	10 92 99 03 	sts	0x0399, r1
	}
	sei();
    27dc:	78 94       	sei
	lcd_cursor(1,1);
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
	char msg[3];
}
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	ff 91       	pop	r31
    27f2:	ef 91       	pop	r30
    27f4:	bf 91       	pop	r27
    27f6:	af 91       	pop	r26
    27f8:	9f 91       	pop	r25
    27fa:	8f 91       	pop	r24
    27fc:	7f 91       	pop	r23
    27fe:	6f 91       	pop	r22
    2800:	5f 91       	pop	r21
    2802:	4f 91       	pop	r20
    2804:	3f 91       	pop	r19
    2806:	2f 91       	pop	r18
    2808:	0f 90       	pop	r0
    280a:	00 92 5b 00 	sts	0x005B, r0
    280e:	0f 90       	pop	r0
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	0f 90       	pop	r0
    2814:	1f 90       	pop	r1
    2816:	18 95       	reti

00002818 <xbee_sendString>:


void xbee_sendString(char str[],int strlngt)
{	
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	e0 97       	sbiw	r28, 0x30	; 48
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	9e a7       	std	Y+46, r25	; 0x2e
    282e:	8d a7       	std	Y+45, r24	; 0x2d
    2830:	78 ab       	std	Y+48, r23	; 0x30
    2832:	6f a7       	std	Y+47, r22	; 0x2f
	cli();
    2834:	f8 94       	cli
	int i;
	UDR0='#';
    2836:	e6 ec       	ldi	r30, 0xC6	; 198
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	83 e2       	ldi	r24, 0x23	; 35
    283c:	80 83       	st	Z, r24
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e8       	ldi	r26, 0x80	; 128
    2844:	bf e3       	ldi	r27, 0x3F	; 63
    2846:	8f a3       	std	Y+39, r24	; 0x27
    2848:	98 a7       	std	Y+40, r25	; 0x28
    284a:	a9 a7       	std	Y+41, r26	; 0x29
    284c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	6f a1       	ldd	r22, Y+39	; 0x27
    2850:	78 a5       	ldd	r23, Y+40	; 0x28
    2852:	89 a5       	ldd	r24, Y+41	; 0x29
    2854:	9a a5       	ldd	r25, Y+42	; 0x2a
    2856:	2d ec       	ldi	r18, 0xCD	; 205
    2858:	3c ec       	ldi	r19, 0xCC	; 204
    285a:	4c e2       	ldi	r20, 0x2C	; 44
    285c:	55 e4       	ldi	r21, 0x45	; 69
    285e:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	8b a3       	std	Y+35, r24	; 0x23
    2868:	9c a3       	std	Y+36, r25	; 0x24
    286a:	ad a3       	std	Y+37, r26	; 0x25
    286c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    286e:	6b a1       	ldd	r22, Y+35	; 0x23
    2870:	7c a1       	ldd	r23, Y+36	; 0x24
    2872:	8d a1       	ldd	r24, Y+37	; 0x25
    2874:	9e a1       	ldd	r25, Y+38	; 0x26
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    2882:	88 23       	and	r24, r24
    2884:	2c f4       	brge	.+10     	; 0x2890 <xbee_sendString+0x78>
		__ticks = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9a a3       	std	Y+34, r25	; 0x22
    288c:	89 a3       	std	Y+33, r24	; 0x21
    288e:	3f c0       	rjmp	.+126    	; 0x290e <xbee_sendString+0xf6>
	else if (__tmp > 65535)
    2890:	6b a1       	ldd	r22, Y+35	; 0x23
    2892:	7c a1       	ldd	r23, Y+36	; 0x24
    2894:	8d a1       	ldd	r24, Y+37	; 0x25
    2896:	9e a1       	ldd	r25, Y+38	; 0x26
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	4f e7       	ldi	r20, 0x7F	; 127
    289e:	57 e4       	ldi	r21, 0x47	; 71
    28a0:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	4c f5       	brge	.+82     	; 0x28fa <xbee_sendString+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a8:	6f a1       	ldd	r22, Y+39	; 0x27
    28aa:	78 a5       	ldd	r23, Y+40	; 0x28
    28ac:	89 a5       	ldd	r24, Y+41	; 0x29
    28ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9a a3       	std	Y+34, r25	; 0x22
    28ce:	89 a3       	std	Y+33, r24	; 0x21
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <xbee_sendString+0xd8>
    28d2:	84 e1       	ldi	r24, 0x14	; 20
    28d4:	91 e0       	ldi	r25, 0x01	; 1
    28d6:	98 a3       	std	Y+32, r25	; 0x20
    28d8:	8f 8f       	std	Y+31, r24	; 0x1f
    28da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28dc:	98 a1       	ldd	r25, Y+32	; 0x20
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <xbee_sendString+0xc6>
    28e2:	98 a3       	std	Y+32, r25	; 0x20
    28e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e6:	89 a1       	ldd	r24, Y+33	; 0x21
    28e8:	9a a1       	ldd	r25, Y+34	; 0x22
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	9a a3       	std	Y+34, r25	; 0x22
    28ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f0:	89 a1       	ldd	r24, Y+33	; 0x21
    28f2:	9a a1       	ldd	r25, Y+34	; 0x22
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	69 f7       	brne	.-38     	; 0x28d2 <xbee_sendString+0xba>
    28f8:	14 c0       	rjmp	.+40     	; 0x2922 <xbee_sendString+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	6b a1       	ldd	r22, Y+35	; 0x23
    28fc:	7c a1       	ldd	r23, Y+36	; 0x24
    28fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2900:	9e a1       	ldd	r25, Y+38	; 0x26
    2902:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9a a3       	std	Y+34, r25	; 0x22
    290c:	89 a3       	std	Y+33, r24	; 0x21
    290e:	89 a1       	ldd	r24, Y+33	; 0x21
    2910:	9a a1       	ldd	r25, Y+34	; 0x22
    2912:	9e 8f       	std	Y+30, r25	; 0x1e
    2914:	8d 8f       	std	Y+29, r24	; 0x1d
    2916:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2918:	9e 8d       	ldd	r25, Y+30	; 0x1e
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <xbee_sendString+0x102>
    291e:	9e 8f       	std	Y+30, r25	; 0x1e
    2920:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	for(i=0;i<strlngt;i++)
    2922:	1c a6       	std	Y+44, r1	; 0x2c
    2924:	1b a6       	std	Y+43, r1	; 0x2b
    2926:	82 c0       	rjmp	.+260    	; 0x2a2c <xbee_sendString+0x214>
	{
		UDR0=str[i];
    2928:	a6 ec       	ldi	r26, 0xC6	; 198
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	2b a5       	ldd	r18, Y+43	; 0x2b
    292e:	3c a5       	ldd	r19, Y+44	; 0x2c
    2930:	8d a5       	ldd	r24, Y+45	; 0x2d
    2932:	9e a5       	ldd	r25, Y+46	; 0x2e
    2934:	fc 01       	movw	r30, r24
    2936:	e2 0f       	add	r30, r18
    2938:	f3 1f       	adc	r31, r19
    293a:	80 81       	ld	r24, Z
    293c:	8c 93       	st	X, r24
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	a0 e8       	ldi	r26, 0x80	; 128
    2944:	bf e3       	ldi	r27, 0x3F	; 63
    2946:	89 8f       	std	Y+25, r24	; 0x19
    2948:	9a 8f       	std	Y+26, r25	; 0x1a
    294a:	ab 8f       	std	Y+27, r26	; 0x1b
    294c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294e:	69 8d       	ldd	r22, Y+25	; 0x19
    2950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2956:	2d ec       	ldi	r18, 0xCD	; 205
    2958:	3c ec       	ldi	r19, 0xCC	; 204
    295a:	4c e2       	ldi	r20, 0x2C	; 44
    295c:	55 e4       	ldi	r21, 0x45	; 69
    295e:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	8d 8b       	std	Y+21, r24	; 0x15
    2968:	9e 8b       	std	Y+22, r25	; 0x16
    296a:	af 8b       	std	Y+23, r26	; 0x17
    296c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    296e:	6d 89       	ldd	r22, Y+21	; 0x15
    2970:	7e 89       	ldd	r23, Y+22	; 0x16
    2972:	8f 89       	ldd	r24, Y+23	; 0x17
    2974:	98 8d       	ldd	r25, Y+24	; 0x18
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e8       	ldi	r20, 0x80	; 128
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    2982:	88 23       	and	r24, r24
    2984:	2c f4       	brge	.+10     	; 0x2990 <xbee_sendString+0x178>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9c 8b       	std	Y+20, r25	; 0x14
    298c:	8b 8b       	std	Y+19, r24	; 0x13
    298e:	3f c0       	rjmp	.+126    	; 0x2a0e <xbee_sendString+0x1f6>
	else if (__tmp > 65535)
    2990:	6d 89       	ldd	r22, Y+21	; 0x15
    2992:	7e 89       	ldd	r23, Y+22	; 0x16
    2994:	8f 89       	ldd	r24, Y+23	; 0x17
    2996:	98 8d       	ldd	r25, Y+24	; 0x18
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	3f ef       	ldi	r19, 0xFF	; 255
    299c:	4f e7       	ldi	r20, 0x7F	; 127
    299e:	57 e4       	ldi	r21, 0x47	; 71
    29a0:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    29a4:	18 16       	cp	r1, r24
    29a6:	4c f5       	brge	.+82     	; 0x29fa <xbee_sendString+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a8:	69 8d       	ldd	r22, Y+25	; 0x19
    29aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e2       	ldi	r20, 0x20	; 32
    29b6:	51 e4       	ldi	r21, 0x41	; 65
    29b8:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9c 8b       	std	Y+20, r25	; 0x14
    29ce:	8b 8b       	std	Y+19, r24	; 0x13
    29d0:	0f c0       	rjmp	.+30     	; 0x29f0 <xbee_sendString+0x1d8>
    29d2:	84 e1       	ldi	r24, 0x14	; 20
    29d4:	91 e0       	ldi	r25, 0x01	; 1
    29d6:	9a 8b       	std	Y+18, r25	; 0x12
    29d8:	89 8b       	std	Y+17, r24	; 0x11
    29da:	89 89       	ldd	r24, Y+17	; 0x11
    29dc:	9a 89       	ldd	r25, Y+18	; 0x12
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <xbee_sendString+0x1c6>
    29e2:	9a 8b       	std	Y+18, r25	; 0x12
    29e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e6:	8b 89       	ldd	r24, Y+19	; 0x13
    29e8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9c 8b       	std	Y+20, r25	; 0x14
    29ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	8b 89       	ldd	r24, Y+19	; 0x13
    29f2:	9c 89       	ldd	r25, Y+20	; 0x14
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	69 f7       	brne	.-38     	; 0x29d2 <xbee_sendString+0x1ba>
    29f8:	14 c0       	rjmp	.+40     	; 0x2a22 <xbee_sendString+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	6d 89       	ldd	r22, Y+21	; 0x15
    29fc:	7e 89       	ldd	r23, Y+22	; 0x16
    29fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2a00:	98 8d       	ldd	r25, Y+24	; 0x18
    2a02:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9c 8b       	std	Y+20, r25	; 0x14
    2a0c:	8b 8b       	std	Y+19, r24	; 0x13
    2a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a10:	9c 89       	ldd	r25, Y+20	; 0x14
    2a12:	98 8b       	std	Y+16, r25	; 0x10
    2a14:	8f 87       	std	Y+15, r24	; 0x0f
    2a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a18:	98 89       	ldd	r25, Y+16	; 0x10
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <xbee_sendString+0x202>
    2a1e:	98 8b       	std	Y+16, r25	; 0x10
    2a20:	8f 87       	std	Y+15, r24	; 0x0f
{	
	cli();
	int i;
	UDR0='#';
	_delay_ms(1);
	for(i=0;i<strlngt;i++)
    2a22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a24:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a26:	01 96       	adiw	r24, 0x01	; 1
    2a28:	9c a7       	std	Y+44, r25	; 0x2c
    2a2a:	8b a7       	std	Y+43, r24	; 0x2b
    2a2c:	2b a5       	ldd	r18, Y+43	; 0x2b
    2a2e:	3c a5       	ldd	r19, Y+44	; 0x2c
    2a30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a32:	98 a9       	ldd	r25, Y+48	; 0x30
    2a34:	28 17       	cp	r18, r24
    2a36:	39 07       	cpc	r19, r25
    2a38:	0c f4       	brge	.+2      	; 0x2a3c <xbee_sendString+0x224>
    2a3a:	76 cf       	rjmp	.-276    	; 0x2928 <xbee_sendString+0x110>
	{
		UDR0=str[i];
		_delay_ms(1);
	}
	UDR0='#';
    2a3c:	e6 ec       	ldi	r30, 0xC6	; 198
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	83 e2       	ldi	r24, 0x23	; 35
    2a42:	80 83       	st	Z, r24
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	a0 e8       	ldi	r26, 0x80	; 128
    2a4a:	bf e3       	ldi	r27, 0x3F	; 63
    2a4c:	8b 87       	std	Y+11, r24	; 0x0b
    2a4e:	9c 87       	std	Y+12, r25	; 0x0c
    2a50:	ad 87       	std	Y+13, r26	; 0x0d
    2a52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5c:	2d ec       	ldi	r18, 0xCD	; 205
    2a5e:	3c ec       	ldi	r19, 0xCC	; 204
    2a60:	4c e2       	ldi	r20, 0x2C	; 44
    2a62:	55 e4       	ldi	r21, 0x45	; 69
    2a64:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	8f 83       	std	Y+7, r24	; 0x07
    2a6e:	98 87       	std	Y+8, r25	; 0x08
    2a70:	a9 87       	std	Y+9, r26	; 0x09
    2a72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a74:	6f 81       	ldd	r22, Y+7	; 0x07
    2a76:	78 85       	ldd	r23, Y+8	; 0x08
    2a78:	89 85       	ldd	r24, Y+9	; 0x09
    2a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e8       	ldi	r20, 0x80	; 128
    2a82:	5f e3       	ldi	r21, 0x3F	; 63
    2a84:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    2a88:	88 23       	and	r24, r24
    2a8a:	2c f4       	brge	.+10     	; 0x2a96 <xbee_sendString+0x27e>
		__ticks = 1;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	9e 83       	std	Y+6, r25	; 0x06
    2a92:	8d 83       	std	Y+5, r24	; 0x05
    2a94:	3f c0       	rjmp	.+126    	; 0x2b14 <xbee_sendString+0x2fc>
	else if (__tmp > 65535)
    2a96:	6f 81       	ldd	r22, Y+7	; 0x07
    2a98:	78 85       	ldd	r23, Y+8	; 0x08
    2a9a:	89 85       	ldd	r24, Y+9	; 0x09
    2a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	3f ef       	ldi	r19, 0xFF	; 255
    2aa2:	4f e7       	ldi	r20, 0x7F	; 127
    2aa4:	57 e4       	ldi	r21, 0x47	; 71
    2aa6:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    2aaa:	18 16       	cp	r1, r24
    2aac:	4c f5       	brge	.+82     	; 0x2b00 <xbee_sendString+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e2       	ldi	r20, 0x20	; 32
    2abc:	51 e4       	ldi	r21, 0x41	; 65
    2abe:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
    2ad6:	0f c0       	rjmp	.+30     	; 0x2af6 <xbee_sendString+0x2de>
    2ad8:	84 e1       	ldi	r24, 0x14	; 20
    2ada:	91 e0       	ldi	r25, 0x01	; 1
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	8b 83       	std	Y+3, r24	; 0x03
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <xbee_sendString+0x2cc>
    2ae8:	9c 83       	std	Y+4, r25	; 0x04
    2aea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	9e 83       	std	Y+6, r25	; 0x06
    2af4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
    2af8:	9e 81       	ldd	r25, Y+6	; 0x06
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	69 f7       	brne	.-38     	; 0x2ad8 <xbee_sendString+0x2c0>
    2afe:	14 c0       	rjmp	.+40     	; 0x2b28 <xbee_sendString+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b00:	6f 81       	ldd	r22, Y+7	; 0x07
    2b02:	78 85       	ldd	r23, Y+8	; 0x08
    2b04:	89 85       	ldd	r24, Y+9	; 0x09
    2b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b08:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	9e 83       	std	Y+6, r25	; 0x06
    2b12:	8d 83       	std	Y+5, r24	; 0x05
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <xbee_sendString+0x308>
    2b24:	9a 83       	std	Y+2, r25	; 0x02
    2b26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	sei();
    2b28:	78 94       	sei
}
    2b2a:	e0 96       	adiw	r28, 0x30	; 48
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <senddroppedsig>:

void senddroppedsig()
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	2a 97       	sbiw	r28, 0x0a	; 10
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	str[0] = 'g';
    2b50:	87 e6       	ldi	r24, 0x67	; 103
    2b52:	89 83       	std	Y+1, r24	; 0x01
	str[1] = myid;
    2b54:	80 91 40 02 	lds	r24, 0x0240
    2b58:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '.';
    2b5a:	8e e2       	ldi	r24, 0x2E	; 46
    2b5c:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = '*'; //for dropped
    2b5e:	8a e2       	ldi	r24, 0x2A	; 42
    2b60:	8c 83       	std	Y+4, r24	; 0x04
	str[4] = '\0';
    2b62:	1d 82       	std	Y+5, r1	; 0x05
	xbee_sendString(str,4);
    2b64:	ce 01       	movw	r24, r28
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	64 e0       	ldi	r22, 0x04	; 4
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	0e 94 0c 14 	call	0x2818	; 0x2818 <xbee_sendString>
}
    2b70:	2a 96       	adiw	r28, 0x0a	; 10
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <comintersection>:

//protocol : gbot :#g srcid/destid.data#
void comintersection()
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	2a 97       	sbiw	r28, 0x0a	; 10
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	str[0] = 'g';
    2b96:	87 e6       	ldi	r24, 0x67	; 103
    2b98:	89 83       	std	Y+1, r24	; 0x01
	str[1] = myid;
    2b9a:	80 91 40 02 	lds	r24, 0x0240
    2b9e:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '.';
    2ba0:	8e e2       	ldi	r24, 0x2E	; 46
    2ba2:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = '\0';
    2ba4:	1c 82       	std	Y+4, r1	; 0x04
	xbee_sendString(str,3);
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	01 96       	adiw	r24, 0x01	; 1
    2baa:	63 e0       	ldi	r22, 0x03	; 3
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	0e 94 0c 14 	call	0x2818	; 0x2818 <xbee_sendString>

}
    2bb2:	2a 96       	adiw	r28, 0x0a	; 10
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <__vector_54>:
	lcd_string("Inter Done");
	sei();
}
*/
SIGNAL(SIG_USART3_RECV) 		// ISR for receive complete interrupt
{
    2bc4:	1f 92       	push	r1
    2bc6:	0f 92       	push	r0
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	0f 92       	push	r0
    2bcc:	00 90 5b 00 	lds	r0, 0x005B
    2bd0:	0f 92       	push	r0
    2bd2:	11 24       	eor	r1, r1
    2bd4:	2f 93       	push	r18
    2bd6:	3f 93       	push	r19
    2bd8:	4f 93       	push	r20
    2bda:	5f 93       	push	r21
    2bdc:	6f 93       	push	r22
    2bde:	7f 93       	push	r23
    2be0:	8f 93       	push	r24
    2be2:	9f 93       	push	r25
    2be4:	af 93       	push	r26
    2be6:	bf 93       	push	r27
    2be8:	ef 93       	push	r30
    2bea:	ff 93       	push	r31
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	0f 92       	push	r0
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
	cli();
    2bf6:	f8 94       	cli
	char mytemp = UDR3;
    2bf8:	e6 e3       	ldi	r30, 0x36	; 54
    2bfa:	f1 e0       	ldi	r31, 0x01	; 1
    2bfc:	80 81       	ld	r24, Z
    2bfe:	89 83       	std	Y+1, r24	; 0x01
	lcd_cursor(2,1);		
    2c00:	82 e0       	ldi	r24, 0x02	; 2
    2c02:	61 e0       	ldi	r22, 0x01	; 1
    2c04:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
	lcd_string("Reading...");	
    2c08:	81 e4       	ldi	r24, 0x41	; 65
    2c0a:	92 e0       	ldi	r25, 0x02	; 2
    2c0c:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>
	if(rfid_count==2)
    2c10:	80 91 9b 03 	lds	r24, 0x039B
    2c14:	90 91 9c 03 	lds	r25, 0x039C
    2c18:	82 30       	cpi	r24, 0x02	; 2
    2c1a:	91 05       	cpc	r25, r1
    2c1c:	49 f5       	brne	.+82     	; 0x2c70 <__vector_54+0xac>
	{
		if(mytemp !=  '0')
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	80 33       	cpi	r24, 0x30	; 48
    2c22:	e1 f0       	breq	.+56     	; 0x2c5c <__vector_54+0x98>
		{
			rfidval[rfid_count] = '0';
    2c24:	80 91 9b 03 	lds	r24, 0x039B
    2c28:	90 91 9c 03 	lds	r25, 0x039C
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	e2 55       	subi	r30, 0x52	; 82
    2c30:	fc 4f       	sbci	r31, 0xFC	; 252
    2c32:	80 e3       	ldi	r24, 0x30	; 48
    2c34:	80 83       	st	Z, r24
			rfid_count++;
    2c36:	80 91 9b 03 	lds	r24, 0x039B
    2c3a:	90 91 9c 03 	lds	r25, 0x039C
    2c3e:	01 96       	adiw	r24, 0x01	; 1
    2c40:	90 93 9c 03 	sts	0x039C, r25
    2c44:	80 93 9b 03 	sts	0x039B, r24
			rfidval[rfid_count] = mytemp;
    2c48:	80 91 9b 03 	lds	r24, 0x039B
    2c4c:	90 91 9c 03 	lds	r25, 0x039C
    2c50:	fc 01       	movw	r30, r24
    2c52:	e2 55       	subi	r30, 0x52	; 82
    2c54:	fc 4f       	sbci	r31, 0xFC	; 252
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	80 83       	st	Z, r24
    2c5a:	13 c0       	rjmp	.+38     	; 0x2c82 <__vector_54+0xbe>
		}
		else
		{
			 rfidval[rfid_count] = mytemp;
    2c5c:	80 91 9b 03 	lds	r24, 0x039B
    2c60:	90 91 9c 03 	lds	r25, 0x039C
    2c64:	fc 01       	movw	r30, r24
    2c66:	e2 55       	subi	r30, 0x52	; 82
    2c68:	fc 4f       	sbci	r31, 0xFC	; 252
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	80 83       	st	Z, r24
    2c6e:	09 c0       	rjmp	.+18     	; 0x2c82 <__vector_54+0xbe>
		}
	}
	else 
	{
		rfidval[rfid_count] = mytemp;	
    2c70:	80 91 9b 03 	lds	r24, 0x039B
    2c74:	90 91 9c 03 	lds	r25, 0x039C
    2c78:	fc 01       	movw	r30, r24
    2c7a:	e2 55       	subi	r30, 0x52	; 82
    2c7c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	80 83       	st	Z, r24
	}
	rfid_count ++;
    2c82:	80 91 9b 03 	lds	r24, 0x039B
    2c86:	90 91 9c 03 	lds	r25, 0x039C
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	90 93 9c 03 	sts	0x039C, r25
    2c90:	80 93 9b 03 	sts	0x039B, r24
	if(rfid_count == 4)
    2c94:	80 91 9b 03 	lds	r24, 0x039B
    2c98:	90 91 9c 03 	lds	r25, 0x039C
    2c9c:	84 30       	cpi	r24, 0x04	; 4
    2c9e:	91 05       	cpc	r25, r1
    2ca0:	51 f4       	brne	.+20     	; 0x2cb6 <__vector_54+0xf2>
	{
		lcd_cursor(2,1);		
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	61 e0       	ldi	r22, 0x01	; 1
    2ca6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
		lcd_string("RfidRead");
    2caa:	8c e4       	ldi	r24, 0x4C	; 76
    2cac:	92 e0       	ldi	r25, 0x02	; 2
    2cae:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>
		rfidval[4] = '\0';
    2cb2:	10 92 b2 03 	sts	0x03B2, r1
	}
	sei();
    2cb6:	78 94       	sei
}
    2cb8:	0f 90       	pop	r0
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	ff 91       	pop	r31
    2cc0:	ef 91       	pop	r30
    2cc2:	bf 91       	pop	r27
    2cc4:	af 91       	pop	r26
    2cc6:	9f 91       	pop	r25
    2cc8:	8f 91       	pop	r24
    2cca:	7f 91       	pop	r23
    2ccc:	6f 91       	pop	r22
    2cce:	5f 91       	pop	r21
    2cd0:	4f 91       	pop	r20
    2cd2:	3f 91       	pop	r19
    2cd4:	2f 91       	pop	r18
    2cd6:	0f 90       	pop	r0
    2cd8:	00 92 5b 00 	sts	0x005B, r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	0f 90       	pop	r0
    2ce2:	1f 90       	pop	r1
    2ce4:	18 95       	reti

00002ce6 <clearrfid>:

void clearrfid()
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
	rfidval[0]='\0';
    2cee:	10 92 ae 03 	sts	0x03AE, r1
	rfidval[1]='\0';
    2cf2:	10 92 af 03 	sts	0x03AF, r1
	rfidval[2]='\0';
    2cf6:	10 92 b0 03 	sts	0x03B0, r1
	rfidval[3]='\0';
    2cfa:	10 92 b1 03 	sts	0x03B1, r1
}
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <readrfidtag>:

//protocol : dbot :#g srcid/destid.data#
void readrfidtag()
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	69 97       	sbiw	r28, 0x19	; 25
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
	char str[25];
	str[0] = 'g';
    2d18:	87 e6       	ldi	r24, 0x67	; 103
    2d1a:	89 83       	std	Y+1, r24	; 0x01
	str[1] = myid;
    2d1c:	80 91 40 02 	lds	r24, 0x0240
    2d20:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '.';
    2d22:	8e e2       	ldi	r24, 0x2E	; 46
    2d24:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = rfidval[0];
    2d26:	80 91 ae 03 	lds	r24, 0x03AE
    2d2a:	8c 83       	std	Y+4, r24	; 0x04
	str[4] = rfidval[1];
    2d2c:	80 91 af 03 	lds	r24, 0x03AF
    2d30:	8d 83       	std	Y+5, r24	; 0x05
	str[5] = rfidval[2];
    2d32:	80 91 b0 03 	lds	r24, 0x03B0
    2d36:	8e 83       	std	Y+6, r24	; 0x06
	str[6] = rfidval[3];
    2d38:	80 91 b1 03 	lds	r24, 0x03B1
    2d3c:	8f 83       	std	Y+7, r24	; 0x07
	str[7] = '\0';
    2d3e:	18 86       	std	Y+8, r1	; 0x08
	rfid_count=0;
    2d40:	10 92 9c 03 	sts	0x039C, r1
    2d44:	10 92 9b 03 	sts	0x039B, r1
	xbee_sendString(str,7);
    2d48:	ce 01       	movw	r24, r28
    2d4a:	01 96       	adiw	r24, 0x01	; 1
    2d4c:	67 e0       	ldi	r22, 0x07	; 7
    2d4e:	70 e0       	ldi	r23, 0x00	; 0
    2d50:	0e 94 0c 14 	call	0x2818	; 0x2818 <xbee_sendString>
}
    2d54:	69 96       	adiw	r28, 0x19	; 25
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <servo_1>:



//Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees
void servo_1(unsigned char degrees)  
{
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	df 93       	push	r29
    2d6c:	cf 93       	push	r28
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <servo_1+0xa>
    2d70:	0f 92       	push	r0
    2d72:	0f 92       	push	r0
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionPanServo = 0;
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a0 e0       	ldi	r26, 0x00	; 0
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	9a 83       	std	Y+2, r25	; 0x02
    2d86:	ab 83       	std	Y+3, r26	; 0x03
    2d88:	bc 83       	std	Y+4, r27	; 0x04
 	PositionPanServo = ((float)degrees / 2.25) + 21.0;
    2d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8c:	88 2f       	mov	r24, r24
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	a0 e0       	ldi	r26, 0x00	; 0
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	bc 01       	movw	r22, r24
    2d96:	cd 01       	movw	r24, r26
    2d98:	0e 94 9e 24 	call	0x493c	; 0x493c <__floatunsisf>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e1       	ldi	r20, 0x10	; 16
    2daa:	50 e4       	ldi	r21, 0x40	; 64
    2dac:	0e 94 b0 22 	call	0x4560	; 0x4560 <__divsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	48 ea       	ldi	r20, 0xA8	; 168
    2dbe:	51 e4       	ldi	r21, 0x41	; 65
    2dc0:	0e 94 89 21 	call	0x4312	; 0x4312 <__addsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	89 83       	std	Y+1, r24	; 0x01
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	ab 83       	std	Y+3, r26	; 0x03
    2dce:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1AH = 0x00;
    2dd0:	e9 e8       	ldi	r30, 0x89	; 137
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	10 82       	st	Z, r1
 	OCR1AL = (unsigned char) PositionPanServo;
    2dd6:	08 e8       	ldi	r16, 0x88	; 136
    2dd8:	10 e0       	ldi	r17, 0x00	; 0
    2dda:	69 81       	ldd	r22, Y+1	; 0x01
    2ddc:	7a 81       	ldd	r23, Y+2	; 0x02
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	f8 01       	movw	r30, r16
    2dec:	80 83       	st	Z, r24
}
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	08 95       	ret

00002e02 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees
void servo_2(unsigned char degrees)
{
    2e02:	0f 93       	push	r16
    2e04:	1f 93       	push	r17
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <servo_2+0xa>
    2e0c:	0f 92       	push	r0
    2e0e:	0f 92       	push	r0
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionTiltServo = 0;
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	a0 e0       	ldi	r26, 0x00	; 0
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	9a 83       	std	Y+2, r25	; 0x02
    2e22:	ab 83       	std	Y+3, r26	; 0x03
    2e24:	bc 83       	std	Y+4, r27	; 0x04
 	PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    2e26:	8d 81       	ldd	r24, Y+5	; 0x05
    2e28:	88 2f       	mov	r24, r24
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	a0 e0       	ldi	r26, 0x00	; 0
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	bc 01       	movw	r22, r24
    2e32:	cd 01       	movw	r24, r26
    2e34:	0e 94 9e 24 	call	0x493c	; 0x493c <__floatunsisf>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e1       	ldi	r20, 0x10	; 16
    2e46:	50 e4       	ldi	r21, 0x40	; 64
    2e48:	0e 94 b0 22 	call	0x4560	; 0x4560 <__divsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	48 ea       	ldi	r20, 0xA8	; 168
    2e5a:	51 e4       	ldi	r21, 0x41	; 65
    2e5c:	0e 94 89 21 	call	0x4312	; 0x4312 <__addsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	89 83       	std	Y+1, r24	; 0x01
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	ab 83       	std	Y+3, r26	; 0x03
    2e6a:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1BH = 0x00;
    2e6c:	eb e8       	ldi	r30, 0x8B	; 139
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	10 82       	st	Z, r1
 	OCR1BL = (unsigned char) PositionTiltServo;
    2e72:	0a e8       	ldi	r16, 0x8A	; 138
    2e74:	10 e0       	ldi	r17, 0x00	; 0
    2e76:	69 81       	ldd	r22, Y+1	; 0x01
    2e78:	7a 81       	ldd	r23, Y+2	; 0x02
    2e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	f8 01       	movw	r30, r16
    2e88:	80 83       	st	Z, r24
}
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	08 95       	ret

00002e9e <servo_3>:


//Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees
void servo_3(unsigned char degrees)
{
    2e9e:	0f 93       	push	r16
    2ea0:	1f 93       	push	r17
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <servo_3+0xa>
    2ea8:	0f 92       	push	r0
    2eaa:	0f 92       	push	r0
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionTiltServo = 0;
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	a0 e0       	ldi	r26, 0x00	; 0
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	9a 83       	std	Y+2, r25	; 0x02
    2ebe:	ab 83       	std	Y+3, r26	; 0x03
    2ec0:	bc 83       	std	Y+4, r27	; 0x04
 	PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	88 2f       	mov	r24, r24
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	a0 e0       	ldi	r26, 0x00	; 0
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	0e 94 9e 24 	call	0x493c	; 0x493c <__floatunsisf>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e1       	ldi	r20, 0x10	; 16
    2ee2:	50 e4       	ldi	r21, 0x40	; 64
    2ee4:	0e 94 b0 22 	call	0x4560	; 0x4560 <__divsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	48 ea       	ldi	r20, 0xA8	; 168
    2ef6:	51 e4       	ldi	r21, 0x41	; 65
    2ef8:	0e 94 89 21 	call	0x4312	; 0x4312 <__addsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	ab 83       	std	Y+3, r26	; 0x03
    2f06:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1CH = 0x00;
    2f08:	ed e8       	ldi	r30, 0x8D	; 141
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	10 82       	st	Z, r1
 	OCR1CL = (unsigned char) PositionTiltServo;
    2f0e:	0c e8       	ldi	r16, 0x8C	; 140
    2f10:	10 e0       	ldi	r17, 0x00	; 0
    2f12:	69 81       	ldd	r22, Y+1	; 0x01
    2f14:	7a 81       	ldd	r23, Y+2	; 0x02
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	f8 01       	movw	r30, r16
    2f24:	80 83       	st	Z, r24
}
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	08 95       	ret

00002f3a <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) 	//makes servo 1 free rotating
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
 	OCR1AH = 0x03; 
    2f42:	e9 e8       	ldi	r30, 0x89	; 137
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	83 e0       	ldi	r24, 0x03	; 3
    2f48:	80 83       	st	Z, r24
 	OCR1AL = 0xFF; 			//Servo 1 off
    2f4a:	e8 e8       	ldi	r30, 0x88	; 136
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	8f ef       	ldi	r24, 0xFF	; 255
    2f50:	80 83       	st	Z, r24
}
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	08 95       	ret

00002f58 <servo_2_free>:

void servo_2_free (void) 	//makes servo 2 free rotating
{
    2f58:	df 93       	push	r29
    2f5a:	cf 93       	push	r28
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
 	OCR1BH = 0x03;
    2f60:	eb e8       	ldi	r30, 0x8B	; 139
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	83 e0       	ldi	r24, 0x03	; 3
    2f66:	80 83       	st	Z, r24
 	OCR1BL = 0xFF; 			//Servo 2 off
    2f68:	ea e8       	ldi	r30, 0x8A	; 138
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	8f ef       	ldi	r24, 0xFF	; 255
    2f6e:	80 83       	st	Z, r24
}
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <servo_3_free>:

void servo_3_free (void) 	//makes servo 3 free rotating
{
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
 	OCR1CH = 0x03;
    2f7e:	ed e8       	ldi	r30, 0x8D	; 141
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	83 e0       	ldi	r24, 0x03	; 3
    2f84:	80 83       	st	Z, r24
 	OCR1CL = 0xFF; 			//Servo 3 off
    2f86:	ec e8       	ldi	r30, 0x8C	; 140
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	8f ef       	ldi	r24, 0xFF	; 255
    2f8c:	80 83       	st	Z, r24
} 
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <go_up>:


void go_up()
{
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	2e 97       	sbiw	r28, 0x0e	; 14
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
	servo_1(30);							//Grab the ball and close the arm
    2fa8:	8e e1       	ldi	r24, 0x1E	; 30
    2faa:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <servo_1>
	servo_2(250);
    2fae:	8a ef       	ldi	r24, 0xFA	; 250
    2fb0:	0e 94 01 17 	call	0x2e02	; 0x2e02 <servo_2>
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	aa e7       	ldi	r26, 0x7A	; 122
    2fba:	b4 e4       	ldi	r27, 0x44	; 68
    2fbc:	8b 87       	std	Y+11, r24	; 0x0b
    2fbe:	9c 87       	std	Y+12, r25	; 0x0c
    2fc0:	ad 87       	std	Y+13, r26	; 0x0d
    2fc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fcc:	2d ec       	ldi	r18, 0xCD	; 205
    2fce:	3c ec       	ldi	r19, 0xCC	; 204
    2fd0:	4c e2       	ldi	r20, 0x2C	; 44
    2fd2:	55 e4       	ldi	r21, 0x45	; 69
    2fd4:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	8f 83       	std	Y+7, r24	; 0x07
    2fde:	98 87       	std	Y+8, r25	; 0x08
    2fe0:	a9 87       	std	Y+9, r26	; 0x09
    2fe2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe6:	78 85       	ldd	r23, Y+8	; 0x08
    2fe8:	89 85       	ldd	r24, Y+9	; 0x09
    2fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e8       	ldi	r20, 0x80	; 128
    2ff2:	5f e3       	ldi	r21, 0x3F	; 63
    2ff4:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    2ff8:	88 23       	and	r24, r24
    2ffa:	2c f4       	brge	.+10     	; 0x3006 <go_up+0x72>
		__ticks = 1;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
    3004:	3f c0       	rjmp	.+126    	; 0x3084 <go_up+0xf0>
	else if (__tmp > 65535)
    3006:	6f 81       	ldd	r22, Y+7	; 0x07
    3008:	78 85       	ldd	r23, Y+8	; 0x08
    300a:	89 85       	ldd	r24, Y+9	; 0x09
    300c:	9a 85       	ldd	r25, Y+10	; 0x0a
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	3f ef       	ldi	r19, 0xFF	; 255
    3012:	4f e7       	ldi	r20, 0x7F	; 127
    3014:	57 e4       	ldi	r21, 0x47	; 71
    3016:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    301a:	18 16       	cp	r1, r24
    301c:	4c f5       	brge	.+82     	; 0x3070 <go_up+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3020:	7c 85       	ldd	r23, Y+12	; 0x0c
    3022:	8d 85       	ldd	r24, Y+13	; 0x0d
    3024:	9e 85       	ldd	r25, Y+14	; 0x0e
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e2       	ldi	r20, 0x20	; 32
    302c:	51 e4       	ldi	r21, 0x41	; 65
    302e:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	9e 83       	std	Y+6, r25	; 0x06
    3044:	8d 83       	std	Y+5, r24	; 0x05
    3046:	0f c0       	rjmp	.+30     	; 0x3066 <go_up+0xd2>
    3048:	84 e1       	ldi	r24, 0x14	; 20
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	9c 83       	std	Y+4, r25	; 0x04
    304e:	8b 83       	std	Y+3, r24	; 0x03
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	9c 81       	ldd	r25, Y+4	; 0x04
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <go_up+0xc0>
    3058:	9c 83       	std	Y+4, r25	; 0x04
    305a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305c:	8d 81       	ldd	r24, Y+5	; 0x05
    305e:	9e 81       	ldd	r25, Y+6	; 0x06
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	9e 83       	std	Y+6, r25	; 0x06
    3064:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	9e 81       	ldd	r25, Y+6	; 0x06
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	69 f7       	brne	.-38     	; 0x3048 <go_up+0xb4>
    306e:	14 c0       	rjmp	.+40     	; 0x3098 <go_up+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3070:	6f 81       	ldd	r22, Y+7	; 0x07
    3072:	78 85       	ldd	r23, Y+8	; 0x08
    3074:	89 85       	ldd	r24, Y+9	; 0x09
    3076:	9a 85       	ldd	r25, Y+10	; 0x0a
    3078:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	9e 83       	std	Y+6, r25	; 0x06
    3082:	8d 83       	std	Y+5, r24	; 0x05
    3084:	8d 81       	ldd	r24, Y+5	; 0x05
    3086:	9e 81       	ldd	r25, Y+6	; 0x06
    3088:	9a 83       	std	Y+2, r25	; 0x02
    308a:	89 83       	std	Y+1, r24	; 0x01
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	9a 81       	ldd	r25, Y+2	; 0x02
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <go_up+0xfc>
    3094:	9a 83       	std	Y+2, r25	; 0x02
    3096:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);	
}
    3098:	2e 96       	adiw	r28, 0x0e	; 14
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	08 95       	ret

000030aa <go_down1>:

void go_down1()
{
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	2e 97       	sbiw	r28, 0x0e	; 14
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
	servo_1(180);								//code the open the gripper arm
    30be:	84 eb       	ldi	r24, 0xB4	; 180
    30c0:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <servo_1>
	servo_2(120);
    30c4:	88 e7       	ldi	r24, 0x78	; 120
    30c6:	0e 94 01 17 	call	0x2e02	; 0x2e02 <servo_2>
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	aa e7       	ldi	r26, 0x7A	; 122
    30d0:	b4 e4       	ldi	r27, 0x44	; 68
    30d2:	8b 87       	std	Y+11, r24	; 0x0b
    30d4:	9c 87       	std	Y+12, r25	; 0x0c
    30d6:	ad 87       	std	Y+13, r26	; 0x0d
    30d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30da:	6b 85       	ldd	r22, Y+11	; 0x0b
    30dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30de:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e2:	2d ec       	ldi	r18, 0xCD	; 205
    30e4:	3c ec       	ldi	r19, 0xCC	; 204
    30e6:	4c e2       	ldi	r20, 0x2C	; 44
    30e8:	55 e4       	ldi	r21, 0x45	; 69
    30ea:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	8f 83       	std	Y+7, r24	; 0x07
    30f4:	98 87       	std	Y+8, r25	; 0x08
    30f6:	a9 87       	std	Y+9, r26	; 0x09
    30f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30fa:	6f 81       	ldd	r22, Y+7	; 0x07
    30fc:	78 85       	ldd	r23, Y+8	; 0x08
    30fe:	89 85       	ldd	r24, Y+9	; 0x09
    3100:	9a 85       	ldd	r25, Y+10	; 0x0a
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e8       	ldi	r20, 0x80	; 128
    3108:	5f e3       	ldi	r21, 0x3F	; 63
    310a:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    310e:	88 23       	and	r24, r24
    3110:	2c f4       	brge	.+10     	; 0x311c <go_down1+0x72>
		__ticks = 1;
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	9e 83       	std	Y+6, r25	; 0x06
    3118:	8d 83       	std	Y+5, r24	; 0x05
    311a:	3f c0       	rjmp	.+126    	; 0x319a <go_down1+0xf0>
	else if (__tmp > 65535)
    311c:	6f 81       	ldd	r22, Y+7	; 0x07
    311e:	78 85       	ldd	r23, Y+8	; 0x08
    3120:	89 85       	ldd	r24, Y+9	; 0x09
    3122:	9a 85       	ldd	r25, Y+10	; 0x0a
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	3f ef       	ldi	r19, 0xFF	; 255
    3128:	4f e7       	ldi	r20, 0x7F	; 127
    312a:	57 e4       	ldi	r21, 0x47	; 71
    312c:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    3130:	18 16       	cp	r1, r24
    3132:	4c f5       	brge	.+82     	; 0x3186 <go_down1+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3134:	6b 85       	ldd	r22, Y+11	; 0x0b
    3136:	7c 85       	ldd	r23, Y+12	; 0x0c
    3138:	8d 85       	ldd	r24, Y+13	; 0x0d
    313a:	9e 85       	ldd	r25, Y+14	; 0x0e
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	40 e2       	ldi	r20, 0x20	; 32
    3142:	51 e4       	ldi	r21, 0x41	; 65
    3144:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	bc 01       	movw	r22, r24
    314e:	cd 01       	movw	r24, r26
    3150:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	9e 83       	std	Y+6, r25	; 0x06
    315a:	8d 83       	std	Y+5, r24	; 0x05
    315c:	0f c0       	rjmp	.+30     	; 0x317c <go_down1+0xd2>
    315e:	84 e1       	ldi	r24, 0x14	; 20
    3160:	91 e0       	ldi	r25, 0x01	; 1
    3162:	9c 83       	std	Y+4, r25	; 0x04
    3164:	8b 83       	std	Y+3, r24	; 0x03
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	9c 81       	ldd	r25, Y+4	; 0x04
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	f1 f7       	brne	.-4      	; 0x316a <go_down1+0xc0>
    316e:	9c 83       	std	Y+4, r25	; 0x04
    3170:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3172:	8d 81       	ldd	r24, Y+5	; 0x05
    3174:	9e 81       	ldd	r25, Y+6	; 0x06
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	69 f7       	brne	.-38     	; 0x315e <go_down1+0xb4>
    3184:	14 c0       	rjmp	.+40     	; 0x31ae <go_down1+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3186:	6f 81       	ldd	r22, Y+7	; 0x07
    3188:	78 85       	ldd	r23, Y+8	; 0x08
    318a:	89 85       	ldd	r24, Y+9	; 0x09
    318c:	9a 85       	ldd	r25, Y+10	; 0x0a
    318e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	9e 83       	std	Y+6, r25	; 0x06
    3198:	8d 83       	std	Y+5, r24	; 0x05
    319a:	8d 81       	ldd	r24, Y+5	; 0x05
    319c:	9e 81       	ldd	r25, Y+6	; 0x06
    319e:	9a 83       	std	Y+2, r25	; 0x02
    31a0:	89 83       	std	Y+1, r24	; 0x01
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	9a 81       	ldd	r25, Y+2	; 0x02
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <go_down1+0xfc>
    31aa:	9a 83       	std	Y+2, r25	; 0x02
    31ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    31ae:	2e 96       	adiw	r28, 0x0e	; 14
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	08 95       	ret

000031c0 <go_down2>:

void go_down2()
{
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	2e 97       	sbiw	r28, 0x0e	; 14
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
	servo_1(155);								//code the open the gripper arm
    31d4:	8b e9       	ldi	r24, 0x9B	; 155
    31d6:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <servo_1>
	servo_2(145);
    31da:	81 e9       	ldi	r24, 0x91	; 145
    31dc:	0e 94 01 17 	call	0x2e02	; 0x2e02 <servo_2>
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	aa e7       	ldi	r26, 0x7A	; 122
    31e6:	b4 e4       	ldi	r27, 0x44	; 68
    31e8:	8b 87       	std	Y+11, r24	; 0x0b
    31ea:	9c 87       	std	Y+12, r25	; 0x0c
    31ec:	ad 87       	std	Y+13, r26	; 0x0d
    31ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f8:	2d ec       	ldi	r18, 0xCD	; 205
    31fa:	3c ec       	ldi	r19, 0xCC	; 204
    31fc:	4c e2       	ldi	r20, 0x2C	; 44
    31fe:	55 e4       	ldi	r21, 0x45	; 69
    3200:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	8f 83       	std	Y+7, r24	; 0x07
    320a:	98 87       	std	Y+8, r25	; 0x08
    320c:	a9 87       	std	Y+9, r26	; 0x09
    320e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3210:	6f 81       	ldd	r22, Y+7	; 0x07
    3212:	78 85       	ldd	r23, Y+8	; 0x08
    3214:	89 85       	ldd	r24, Y+9	; 0x09
    3216:	9a 85       	ldd	r25, Y+10	; 0x0a
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e8       	ldi	r20, 0x80	; 128
    321e:	5f e3       	ldi	r21, 0x3F	; 63
    3220:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    3224:	88 23       	and	r24, r24
    3226:	2c f4       	brge	.+10     	; 0x3232 <go_down2+0x72>
		__ticks = 1;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	9e 83       	std	Y+6, r25	; 0x06
    322e:	8d 83       	std	Y+5, r24	; 0x05
    3230:	3f c0       	rjmp	.+126    	; 0x32b0 <go_down2+0xf0>
	else if (__tmp > 65535)
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	78 85       	ldd	r23, Y+8	; 0x08
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	3f ef       	ldi	r19, 0xFF	; 255
    323e:	4f e7       	ldi	r20, 0x7F	; 127
    3240:	57 e4       	ldi	r21, 0x47	; 71
    3242:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    3246:	18 16       	cp	r1, r24
    3248:	4c f5       	brge	.+82     	; 0x329c <go_down2+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324a:	6b 85       	ldd	r22, Y+11	; 0x0b
    324c:	7c 85       	ldd	r23, Y+12	; 0x0c
    324e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3250:	9e 85       	ldd	r25, Y+14	; 0x0e
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e2       	ldi	r20, 0x20	; 32
    3258:	51 e4       	ldi	r21, 0x41	; 65
    325a:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	9e 83       	std	Y+6, r25	; 0x06
    3270:	8d 83       	std	Y+5, r24	; 0x05
    3272:	0f c0       	rjmp	.+30     	; 0x3292 <go_down2+0xd2>
    3274:	84 e1       	ldi	r24, 0x14	; 20
    3276:	91 e0       	ldi	r25, 0x01	; 1
    3278:	9c 83       	std	Y+4, r25	; 0x04
    327a:	8b 83       	std	Y+3, r24	; 0x03
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	9c 81       	ldd	r25, Y+4	; 0x04
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <go_down2+0xc0>
    3284:	9c 83       	std	Y+4, r25	; 0x04
    3286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3288:	8d 81       	ldd	r24, Y+5	; 0x05
    328a:	9e 81       	ldd	r25, Y+6	; 0x06
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	9e 83       	std	Y+6, r25	; 0x06
    3290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3292:	8d 81       	ldd	r24, Y+5	; 0x05
    3294:	9e 81       	ldd	r25, Y+6	; 0x06
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	69 f7       	brne	.-38     	; 0x3274 <go_down2+0xb4>
    329a:	14 c0       	rjmp	.+40     	; 0x32c4 <go_down2+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    329c:	6f 81       	ldd	r22, Y+7	; 0x07
    329e:	78 85       	ldd	r23, Y+8	; 0x08
    32a0:	89 85       	ldd	r24, Y+9	; 0x09
    32a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	9e 83       	std	Y+6, r25	; 0x06
    32ae:	8d 83       	std	Y+5, r24	; 0x05
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	9a 83       	std	Y+2, r25	; 0x02
    32b6:	89 83       	std	Y+1, r24	; 0x01
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	9a 81       	ldd	r25, Y+2	; 0x02
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <go_down2+0xfc>
    32c0:	9a 83       	std	Y+2, r25	; 0x02
    32c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    32c4:	2e 96       	adiw	r28, 0x0e	; 14
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	f8 94       	cli
    32ca:	de bf       	out	0x3e, r29	; 62
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	cd bf       	out	0x3d, r28	; 61
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	08 95       	ret

000032d6 <grab>:

void grab()
{
    32d6:	df 93       	push	r29
    32d8:	cf 93       	push	r28
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	2e 97       	sbiw	r28, 0x0e	; 14
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
	servo_3(100);
    32ea:	84 e6       	ldi	r24, 0x64	; 100
    32ec:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <servo_3>
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	aa e7       	ldi	r26, 0x7A	; 122
    32f6:	b4 e4       	ldi	r27, 0x44	; 68
    32f8:	8b 87       	std	Y+11, r24	; 0x0b
    32fa:	9c 87       	std	Y+12, r25	; 0x0c
    32fc:	ad 87       	std	Y+13, r26	; 0x0d
    32fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3300:	6b 85       	ldd	r22, Y+11	; 0x0b
    3302:	7c 85       	ldd	r23, Y+12	; 0x0c
    3304:	8d 85       	ldd	r24, Y+13	; 0x0d
    3306:	9e 85       	ldd	r25, Y+14	; 0x0e
    3308:	2d ec       	ldi	r18, 0xCD	; 205
    330a:	3c ec       	ldi	r19, 0xCC	; 204
    330c:	4c e2       	ldi	r20, 0x2C	; 44
    330e:	55 e4       	ldi	r21, 0x45	; 69
    3310:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	8f 83       	std	Y+7, r24	; 0x07
    331a:	98 87       	std	Y+8, r25	; 0x08
    331c:	a9 87       	std	Y+9, r26	; 0x09
    331e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3320:	6f 81       	ldd	r22, Y+7	; 0x07
    3322:	78 85       	ldd	r23, Y+8	; 0x08
    3324:	89 85       	ldd	r24, Y+9	; 0x09
    3326:	9a 85       	ldd	r25, Y+10	; 0x0a
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e8       	ldi	r20, 0x80	; 128
    332e:	5f e3       	ldi	r21, 0x3F	; 63
    3330:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    3334:	88 23       	and	r24, r24
    3336:	2c f4       	brge	.+10     	; 0x3342 <grab+0x6c>
		__ticks = 1;
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	9e 83       	std	Y+6, r25	; 0x06
    333e:	8d 83       	std	Y+5, r24	; 0x05
    3340:	3f c0       	rjmp	.+126    	; 0x33c0 <grab+0xea>
	else if (__tmp > 65535)
    3342:	6f 81       	ldd	r22, Y+7	; 0x07
    3344:	78 85       	ldd	r23, Y+8	; 0x08
    3346:	89 85       	ldd	r24, Y+9	; 0x09
    3348:	9a 85       	ldd	r25, Y+10	; 0x0a
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	3f ef       	ldi	r19, 0xFF	; 255
    334e:	4f e7       	ldi	r20, 0x7F	; 127
    3350:	57 e4       	ldi	r21, 0x47	; 71
    3352:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    3356:	18 16       	cp	r1, r24
    3358:	4c f5       	brge	.+82     	; 0x33ac <grab+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    335a:	6b 85       	ldd	r22, Y+11	; 0x0b
    335c:	7c 85       	ldd	r23, Y+12	; 0x0c
    335e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3360:	9e 85       	ldd	r25, Y+14	; 0x0e
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e2       	ldi	r20, 0x20	; 32
    3368:	51 e4       	ldi	r21, 0x41	; 65
    336a:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	bc 01       	movw	r22, r24
    3374:	cd 01       	movw	r24, r26
    3376:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	9e 83       	std	Y+6, r25	; 0x06
    3380:	8d 83       	std	Y+5, r24	; 0x05
    3382:	0f c0       	rjmp	.+30     	; 0x33a2 <grab+0xcc>
    3384:	84 e1       	ldi	r24, 0x14	; 20
    3386:	91 e0       	ldi	r25, 0x01	; 1
    3388:	9c 83       	std	Y+4, r25	; 0x04
    338a:	8b 83       	std	Y+3, r24	; 0x03
    338c:	8b 81       	ldd	r24, Y+3	; 0x03
    338e:	9c 81       	ldd	r25, Y+4	; 0x04
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <grab+0xba>
    3394:	9c 83       	std	Y+4, r25	; 0x04
    3396:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	9e 83       	std	Y+6, r25	; 0x06
    33a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a2:	8d 81       	ldd	r24, Y+5	; 0x05
    33a4:	9e 81       	ldd	r25, Y+6	; 0x06
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	69 f7       	brne	.-38     	; 0x3384 <grab+0xae>
    33aa:	14 c0       	rjmp	.+40     	; 0x33d4 <grab+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ac:	6f 81       	ldd	r22, Y+7	; 0x07
    33ae:	78 85       	ldd	r23, Y+8	; 0x08
    33b0:	89 85       	ldd	r24, Y+9	; 0x09
    33b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	9e 83       	std	Y+6, r25	; 0x06
    33be:	8d 83       	std	Y+5, r24	; 0x05
    33c0:	8d 81       	ldd	r24, Y+5	; 0x05
    33c2:	9e 81       	ldd	r25, Y+6	; 0x06
    33c4:	9a 83       	std	Y+2, r25	; 0x02
    33c6:	89 83       	std	Y+1, r24	; 0x01
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	9a 81       	ldd	r25, Y+2	; 0x02
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <grab+0xf6>
    33d0:	9a 83       	std	Y+2, r25	; 0x02
    33d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    33d4:	2e 96       	adiw	r28, 0x0e	; 14
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <release>:

void release()
{
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    33ee:	2e 97       	sbiw	r28, 0x0e	; 14
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	f8 94       	cli
    33f4:	de bf       	out	0x3e, r29	; 62
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	cd bf       	out	0x3d, r28	; 61
	servo_3(40);
    33fa:	88 e2       	ldi	r24, 0x28	; 40
    33fc:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <servo_3>
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	aa e7       	ldi	r26, 0x7A	; 122
    3406:	b4 e4       	ldi	r27, 0x44	; 68
    3408:	8b 87       	std	Y+11, r24	; 0x0b
    340a:	9c 87       	std	Y+12, r25	; 0x0c
    340c:	ad 87       	std	Y+13, r26	; 0x0d
    340e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3410:	6b 85       	ldd	r22, Y+11	; 0x0b
    3412:	7c 85       	ldd	r23, Y+12	; 0x0c
    3414:	8d 85       	ldd	r24, Y+13	; 0x0d
    3416:	9e 85       	ldd	r25, Y+14	; 0x0e
    3418:	2d ec       	ldi	r18, 0xCD	; 205
    341a:	3c ec       	ldi	r19, 0xCC	; 204
    341c:	4c e2       	ldi	r20, 0x2C	; 44
    341e:	55 e4       	ldi	r21, 0x45	; 69
    3420:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	8f 83       	std	Y+7, r24	; 0x07
    342a:	98 87       	std	Y+8, r25	; 0x08
    342c:	a9 87       	std	Y+9, r26	; 0x09
    342e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3430:	6f 81       	ldd	r22, Y+7	; 0x07
    3432:	78 85       	ldd	r23, Y+8	; 0x08
    3434:	89 85       	ldd	r24, Y+9	; 0x09
    3436:	9a 85       	ldd	r25, Y+10	; 0x0a
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	40 e8       	ldi	r20, 0x80	; 128
    343e:	5f e3       	ldi	r21, 0x3F	; 63
    3440:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    3444:	88 23       	and	r24, r24
    3446:	2c f4       	brge	.+10     	; 0x3452 <release+0x6c>
		__ticks = 1;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	3f c0       	rjmp	.+126    	; 0x34d0 <release+0xea>
	else if (__tmp > 65535)
    3452:	6f 81       	ldd	r22, Y+7	; 0x07
    3454:	78 85       	ldd	r23, Y+8	; 0x08
    3456:	89 85       	ldd	r24, Y+9	; 0x09
    3458:	9a 85       	ldd	r25, Y+10	; 0x0a
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	3f ef       	ldi	r19, 0xFF	; 255
    345e:	4f e7       	ldi	r20, 0x7F	; 127
    3460:	57 e4       	ldi	r21, 0x47	; 71
    3462:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    3466:	18 16       	cp	r1, r24
    3468:	4c f5       	brge	.+82     	; 0x34bc <release+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346a:	6b 85       	ldd	r22, Y+11	; 0x0b
    346c:	7c 85       	ldd	r23, Y+12	; 0x0c
    346e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3470:	9e 85       	ldd	r25, Y+14	; 0x0e
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e2       	ldi	r20, 0x20	; 32
    3478:	51 e4       	ldi	r21, 0x41	; 65
    347a:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	bc 01       	movw	r22, r24
    3484:	cd 01       	movw	r24, r26
    3486:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
    3492:	0f c0       	rjmp	.+30     	; 0x34b2 <release+0xcc>
    3494:	84 e1       	ldi	r24, 0x14	; 20
    3496:	91 e0       	ldi	r25, 0x01	; 1
    3498:	9c 83       	std	Y+4, r25	; 0x04
    349a:	8b 83       	std	Y+3, r24	; 0x03
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	9c 81       	ldd	r25, Y+4	; 0x04
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <release+0xba>
    34a4:	9c 83       	std	Y+4, r25	; 0x04
    34a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a8:	8d 81       	ldd	r24, Y+5	; 0x05
    34aa:	9e 81       	ldd	r25, Y+6	; 0x06
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	9e 83       	std	Y+6, r25	; 0x06
    34b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b2:	8d 81       	ldd	r24, Y+5	; 0x05
    34b4:	9e 81       	ldd	r25, Y+6	; 0x06
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	69 f7       	brne	.-38     	; 0x3494 <release+0xae>
    34ba:	14 c0       	rjmp	.+40     	; 0x34e4 <release+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34bc:	6f 81       	ldd	r22, Y+7	; 0x07
    34be:	78 85       	ldd	r23, Y+8	; 0x08
    34c0:	89 85       	ldd	r24, Y+9	; 0x09
    34c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	9e 83       	std	Y+6, r25	; 0x06
    34ce:	8d 83       	std	Y+5, r24	; 0x05
    34d0:	8d 81       	ldd	r24, Y+5	; 0x05
    34d2:	9e 81       	ldd	r25, Y+6	; 0x06
    34d4:	9a 83       	std	Y+2, r25	; 0x02
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	9a 81       	ldd	r25, Y+2	; 0x02
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <release+0xf6>
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);    
}
    34e4:	2e 96       	adiw	r28, 0x0e	; 14
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	cf 91       	pop	r28
    34f2:	df 91       	pop	r29
    34f4:	08 95       	ret

000034f6 <checkfollow>:
#include "adc.h"
#include "signals.h"
#include "rfid.h"
#include "servo.h"
void checkfollow(void)
{
    34f6:	df 93       	push	r29
    34f8:	cf 93       	push	r28
    34fa:	0f 92       	push	r0
    34fc:	0f 92       	push	r0
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
	int temp12=0;
    3502:	1a 82       	std	Y+2, r1	; 0x02
    3504:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		init_sensor_values();
    3506:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <init_sensor_values>
		while(checkobstacle()==0) {} 		
    350a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <checkobstacle>
    350e:	00 97       	sbiw	r24, 0x00	; 0
    3510:	e1 f3       	breq	.-8      	; 0x350a <checkfollow+0x14>
		if(checkintersection() == 1 )
    3512:	0e 94 53 10 	call	0x20a6	; 0x20a6 <checkintersection>
    3516:	81 30       	cpi	r24, 0x01	; 1
    3518:	91 05       	cpc	r25, r1
    351a:	91 f4       	brne	.+36     	; 0x3540 <checkfollow+0x4a>
		{	
			temp12++;
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	9a 81       	ldd	r25, Y+2	; 0x02
    3520:	01 96       	adiw	r24, 0x01	; 1
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01
			if(temp12==2){ turn_left(); temp12=0; }
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	82 30       	cpi	r24, 0x02	; 2
    352c:	91 05       	cpc	r25, r1
    352e:	29 f4       	brne	.+10     	; 0x353a <checkfollow+0x44>
    3530:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <turn_left>
    3534:	1a 82       	std	Y+2, r1	; 0x02
    3536:	19 82       	std	Y+1, r1	; 0x01
    3538:	e6 cf       	rjmp	.-52     	; 0x3506 <checkfollow+0x10>
			else follow();
    353a:	0e 94 11 12 	call	0x2422	; 0x2422 <follow>
    353e:	e3 cf       	rjmp	.-58     	; 0x3506 <checkfollow+0x10>
			
		}
		else 
		{
			follow();
    3540:	0e 94 11 12 	call	0x2422	; 0x2422 <follow>
    3544:	e0 cf       	rjmp	.-64     	; 0x3506 <checkfollow+0x10>

00003546 <checkarm>:
		
	}
}

void checkarm(void)
{
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	6c 97       	sbiw	r28, 0x1c	; 28
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		go_down1();
    355a:	0e 94 55 18 	call	0x30aa	; 0x30aa <go_down1>
	    grab();
    355e:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <grab>
		go_up();
    3562:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <go_up>
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	aa e7       	ldi	r26, 0x7A	; 122
    356c:	b4 e4       	ldi	r27, 0x44	; 68
    356e:	89 8f       	std	Y+25, r24	; 0x19
    3570:	9a 8f       	std	Y+26, r25	; 0x1a
    3572:	ab 8f       	std	Y+27, r26	; 0x1b
    3574:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3576:	69 8d       	ldd	r22, Y+25	; 0x19
    3578:	7a 8d       	ldd	r23, Y+26	; 0x1a
    357a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    357c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    357e:	2d ec       	ldi	r18, 0xCD	; 205
    3580:	3c ec       	ldi	r19, 0xCC	; 204
    3582:	4c e2       	ldi	r20, 0x2C	; 44
    3584:	55 e4       	ldi	r21, 0x45	; 69
    3586:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	8d 8b       	std	Y+21, r24	; 0x15
    3590:	9e 8b       	std	Y+22, r25	; 0x16
    3592:	af 8b       	std	Y+23, r26	; 0x17
    3594:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3596:	6d 89       	ldd	r22, Y+21	; 0x15
    3598:	7e 89       	ldd	r23, Y+22	; 0x16
    359a:	8f 89       	ldd	r24, Y+23	; 0x17
    359c:	98 8d       	ldd	r25, Y+24	; 0x18
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e8       	ldi	r20, 0x80	; 128
    35a4:	5f e3       	ldi	r21, 0x3F	; 63
    35a6:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    35aa:	88 23       	and	r24, r24
    35ac:	2c f4       	brge	.+10     	; 0x35b8 <checkarm+0x72>
		__ticks = 1;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	9c 8b       	std	Y+20, r25	; 0x14
    35b4:	8b 8b       	std	Y+19, r24	; 0x13
    35b6:	3f c0       	rjmp	.+126    	; 0x3636 <checkarm+0xf0>
	else if (__tmp > 65535)
    35b8:	6d 89       	ldd	r22, Y+21	; 0x15
    35ba:	7e 89       	ldd	r23, Y+22	; 0x16
    35bc:	8f 89       	ldd	r24, Y+23	; 0x17
    35be:	98 8d       	ldd	r25, Y+24	; 0x18
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	3f ef       	ldi	r19, 0xFF	; 255
    35c4:	4f e7       	ldi	r20, 0x7F	; 127
    35c6:	57 e4       	ldi	r21, 0x47	; 71
    35c8:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    35cc:	18 16       	cp	r1, r24
    35ce:	4c f5       	brge	.+82     	; 0x3622 <checkarm+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d0:	69 8d       	ldd	r22, Y+25	; 0x19
    35d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 e2       	ldi	r20, 0x20	; 32
    35de:	51 e4       	ldi	r21, 0x41	; 65
    35e0:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	bc 01       	movw	r22, r24
    35ea:	cd 01       	movw	r24, r26
    35ec:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	9c 8b       	std	Y+20, r25	; 0x14
    35f6:	8b 8b       	std	Y+19, r24	; 0x13
    35f8:	0f c0       	rjmp	.+30     	; 0x3618 <checkarm+0xd2>
    35fa:	84 e1       	ldi	r24, 0x14	; 20
    35fc:	91 e0       	ldi	r25, 0x01	; 1
    35fe:	9a 8b       	std	Y+18, r25	; 0x12
    3600:	89 8b       	std	Y+17, r24	; 0x11
    3602:	89 89       	ldd	r24, Y+17	; 0x11
    3604:	9a 89       	ldd	r25, Y+18	; 0x12
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <checkarm+0xc0>
    360a:	9a 8b       	std	Y+18, r25	; 0x12
    360c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360e:	8b 89       	ldd	r24, Y+19	; 0x13
    3610:	9c 89       	ldd	r25, Y+20	; 0x14
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	9c 8b       	std	Y+20, r25	; 0x14
    3616:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3618:	8b 89       	ldd	r24, Y+19	; 0x13
    361a:	9c 89       	ldd	r25, Y+20	; 0x14
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	69 f7       	brne	.-38     	; 0x35fa <checkarm+0xb4>
    3620:	14 c0       	rjmp	.+40     	; 0x364a <checkarm+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3622:	6d 89       	ldd	r22, Y+21	; 0x15
    3624:	7e 89       	ldd	r23, Y+22	; 0x16
    3626:	8f 89       	ldd	r24, Y+23	; 0x17
    3628:	98 8d       	ldd	r25, Y+24	; 0x18
    362a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	9c 8b       	std	Y+20, r25	; 0x14
    3634:	8b 8b       	std	Y+19, r24	; 0x13
    3636:	8b 89       	ldd	r24, Y+19	; 0x13
    3638:	9c 89       	ldd	r25, Y+20	; 0x14
    363a:	98 8b       	std	Y+16, r25	; 0x10
    363c:	8f 87       	std	Y+15, r24	; 0x0f
    363e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3640:	98 89       	ldd	r25, Y+16	; 0x10
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <checkarm+0xfc>
    3646:	98 8b       	std	Y+16, r25	; 0x10
    3648:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		go_down2();
    364a:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <go_down2>
		release();
    364e:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <release>
	    go_up();
    3652:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <go_up>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	aa e7       	ldi	r26, 0x7A	; 122
    365c:	b4 e4       	ldi	r27, 0x44	; 68
    365e:	8b 87       	std	Y+11, r24	; 0x0b
    3660:	9c 87       	std	Y+12, r25	; 0x0c
    3662:	ad 87       	std	Y+13, r26	; 0x0d
    3664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3666:	6b 85       	ldd	r22, Y+11	; 0x0b
    3668:	7c 85       	ldd	r23, Y+12	; 0x0c
    366a:	8d 85       	ldd	r24, Y+13	; 0x0d
    366c:	9e 85       	ldd	r25, Y+14	; 0x0e
    366e:	2d ec       	ldi	r18, 0xCD	; 205
    3670:	3c ec       	ldi	r19, 0xCC	; 204
    3672:	4c e2       	ldi	r20, 0x2C	; 44
    3674:	55 e4       	ldi	r21, 0x45	; 69
    3676:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	8f 83       	std	Y+7, r24	; 0x07
    3680:	98 87       	std	Y+8, r25	; 0x08
    3682:	a9 87       	std	Y+9, r26	; 0x09
    3684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3686:	6f 81       	ldd	r22, Y+7	; 0x07
    3688:	78 85       	ldd	r23, Y+8	; 0x08
    368a:	89 85       	ldd	r24, Y+9	; 0x09
    368c:	9a 85       	ldd	r25, Y+10	; 0x0a
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e8       	ldi	r20, 0x80	; 128
    3694:	5f e3       	ldi	r21, 0x3F	; 63
    3696:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    369a:	88 23       	and	r24, r24
    369c:	2c f4       	brge	.+10     	; 0x36a8 <checkarm+0x162>
		__ticks = 1;
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	9e 83       	std	Y+6, r25	; 0x06
    36a4:	8d 83       	std	Y+5, r24	; 0x05
    36a6:	3f c0       	rjmp	.+126    	; 0x3726 <checkarm+0x1e0>
	else if (__tmp > 65535)
    36a8:	6f 81       	ldd	r22, Y+7	; 0x07
    36aa:	78 85       	ldd	r23, Y+8	; 0x08
    36ac:	89 85       	ldd	r24, Y+9	; 0x09
    36ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	3f ef       	ldi	r19, 0xFF	; 255
    36b4:	4f e7       	ldi	r20, 0x7F	; 127
    36b6:	57 e4       	ldi	r21, 0x47	; 71
    36b8:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    36bc:	18 16       	cp	r1, r24
    36be:	4c f5       	brge	.+82     	; 0x3712 <checkarm+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e2       	ldi	r20, 0x20	; 32
    36ce:	51 e4       	ldi	r21, 0x41	; 65
    36d0:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	bc 01       	movw	r22, r24
    36da:	cd 01       	movw	r24, r26
    36dc:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9e 83       	std	Y+6, r25	; 0x06
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	0f c0       	rjmp	.+30     	; 0x3708 <checkarm+0x1c2>
    36ea:	84 e1       	ldi	r24, 0x14	; 20
    36ec:	91 e0       	ldi	r25, 0x01	; 1
    36ee:	9c 83       	std	Y+4, r25	; 0x04
    36f0:	8b 83       	std	Y+3, r24	; 0x03
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	9c 81       	ldd	r25, Y+4	; 0x04
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <checkarm+0x1b0>
    36fa:	9c 83       	std	Y+4, r25	; 0x04
    36fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3700:	9e 81       	ldd	r25, Y+6	; 0x06
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	9e 83       	std	Y+6, r25	; 0x06
    3706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3708:	8d 81       	ldd	r24, Y+5	; 0x05
    370a:	9e 81       	ldd	r25, Y+6	; 0x06
    370c:	00 97       	sbiw	r24, 0x00	; 0
    370e:	69 f7       	brne	.-38     	; 0x36ea <checkarm+0x1a4>
    3710:	24 cf       	rjmp	.-440    	; 0x355a <checkarm+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3712:	6f 81       	ldd	r22, Y+7	; 0x07
    3714:	78 85       	ldd	r23, Y+8	; 0x08
    3716:	89 85       	ldd	r24, Y+9	; 0x09
    3718:	9a 85       	ldd	r25, Y+10	; 0x0a
    371a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	9e 83       	std	Y+6, r25	; 0x06
    3724:	8d 83       	std	Y+5, r24	; 0x05
    3726:	8d 81       	ldd	r24, Y+5	; 0x05
    3728:	9e 81       	ldd	r25, Y+6	; 0x06
    372a:	9a 83       	std	Y+2, r25	; 0x02
    372c:	89 83       	std	Y+1, r24	; 0x01
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	9a 81       	ldd	r25, Y+2	; 0x02
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	f1 f7       	brne	.-4      	; 0x3732 <checkarm+0x1ec>
    3736:	9a 83       	std	Y+2, r25	; 0x02
    3738:	89 83       	std	Y+1, r24	; 0x01
    373a:	0f cf       	rjmp	.-482    	; 0x355a <checkarm+0x14>

0000373c <checkstraight>:
		_delay_ms(1000);
	}
}

void checkstraight()
{
    373c:	df 93       	push	r29
    373e:	cf 93       	push	r28
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		follow();
    3744:	0e 94 11 12 	call	0x2422	; 0x2422 <follow>
    3748:	fd cf       	rjmp	.-6      	; 0x3744 <checkstraight+0x8>

0000374a <move_bot>:
	}
}


int move_bot()
{
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	cd b7       	in	r28, 0x3d	; 61
    3750:	de b7       	in	r29, 0x3e	; 62
    3752:	60 97       	sbiw	r28, 0x10	; 16
    3754:	0f b6       	in	r0, 0x3f	; 63
    3756:	f8 94       	cli
    3758:	de bf       	out	0x3e, r29	; 62
    375a:	0f be       	out	0x3f, r0	; 63
    375c:	cd bf       	out	0x3d, r28	; 61
	init_sensor_values();
    375e:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <init_sensor_values>
	while(checkobstacle()==0) {} 
    3762:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <checkobstacle>
    3766:	00 97       	sbiw	r24, 0x00	; 0
    3768:	e1 f3       	breq	.-8      	; 0x3762 <move_bot+0x18>
	buzzer_off();
    376a:	0e 94 25 02 	call	0x44a	; 0x44a <buzzer_off>
	if(checkintersection() == 1)
    376e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <checkintersection>
    3772:	81 30       	cpi	r24, 0x01	; 1
    3774:	91 05       	cpc	r25, r1
    3776:	09 f0       	breq	.+2      	; 0x377a <move_bot+0x30>
    3778:	79 c0       	rjmp	.+242    	; 0x386c <move_bot+0x122>
	{	
		//communicate with coordinator
		comintersection();
    377a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <comintersection>
		stop();
    377e:	0e 94 cd 02 	call	0x59a	; 0x59a <stop>
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	a8 ec       	ldi	r26, 0xC8	; 200
    3788:	b2 e4       	ldi	r27, 0x42	; 66
    378a:	8b 87       	std	Y+11, r24	; 0x0b
    378c:	9c 87       	std	Y+12, r25	; 0x0c
    378e:	ad 87       	std	Y+13, r26	; 0x0d
    3790:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3792:	6b 85       	ldd	r22, Y+11	; 0x0b
    3794:	7c 85       	ldd	r23, Y+12	; 0x0c
    3796:	8d 85       	ldd	r24, Y+13	; 0x0d
    3798:	9e 85       	ldd	r25, Y+14	; 0x0e
    379a:	2d ec       	ldi	r18, 0xCD	; 205
    379c:	3c ec       	ldi	r19, 0xCC	; 204
    379e:	4c e2       	ldi	r20, 0x2C	; 44
    37a0:	55 e4       	ldi	r21, 0x45	; 69
    37a2:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	8f 83       	std	Y+7, r24	; 0x07
    37ac:	98 87       	std	Y+8, r25	; 0x08
    37ae:	a9 87       	std	Y+9, r26	; 0x09
    37b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37b2:	6f 81       	ldd	r22, Y+7	; 0x07
    37b4:	78 85       	ldd	r23, Y+8	; 0x08
    37b6:	89 85       	ldd	r24, Y+9	; 0x09
    37b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	40 e8       	ldi	r20, 0x80	; 128
    37c0:	5f e3       	ldi	r21, 0x3F	; 63
    37c2:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    37c6:	88 23       	and	r24, r24
    37c8:	2c f4       	brge	.+10     	; 0x37d4 <move_bot+0x8a>
		__ticks = 1;
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	9e 83       	std	Y+6, r25	; 0x06
    37d0:	8d 83       	std	Y+5, r24	; 0x05
    37d2:	3f c0       	rjmp	.+126    	; 0x3852 <move_bot+0x108>
	else if (__tmp > 65535)
    37d4:	6f 81       	ldd	r22, Y+7	; 0x07
    37d6:	78 85       	ldd	r23, Y+8	; 0x08
    37d8:	89 85       	ldd	r24, Y+9	; 0x09
    37da:	9a 85       	ldd	r25, Y+10	; 0x0a
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	3f ef       	ldi	r19, 0xFF	; 255
    37e0:	4f e7       	ldi	r20, 0x7F	; 127
    37e2:	57 e4       	ldi	r21, 0x47	; 71
    37e4:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    37e8:	18 16       	cp	r1, r24
    37ea:	4c f5       	brge	.+82     	; 0x383e <move_bot+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e2       	ldi	r20, 0x20	; 32
    37fa:	51 e4       	ldi	r21, 0x41	; 65
    37fc:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	9e 83       	std	Y+6, r25	; 0x06
    3812:	8d 83       	std	Y+5, r24	; 0x05
    3814:	0f c0       	rjmp	.+30     	; 0x3834 <move_bot+0xea>
    3816:	84 e1       	ldi	r24, 0x14	; 20
    3818:	91 e0       	ldi	r25, 0x01	; 1
    381a:	9c 83       	std	Y+4, r25	; 0x04
    381c:	8b 83       	std	Y+3, r24	; 0x03
    381e:	8b 81       	ldd	r24, Y+3	; 0x03
    3820:	9c 81       	ldd	r25, Y+4	; 0x04
    3822:	01 97       	sbiw	r24, 0x01	; 1
    3824:	f1 f7       	brne	.-4      	; 0x3822 <move_bot+0xd8>
    3826:	9c 83       	std	Y+4, r25	; 0x04
    3828:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382a:	8d 81       	ldd	r24, Y+5	; 0x05
    382c:	9e 81       	ldd	r25, Y+6	; 0x06
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	9e 83       	std	Y+6, r25	; 0x06
    3832:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3834:	8d 81       	ldd	r24, Y+5	; 0x05
    3836:	9e 81       	ldd	r25, Y+6	; 0x06
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	69 f7       	brne	.-38     	; 0x3816 <move_bot+0xcc>
    383c:	14 c0       	rjmp	.+40     	; 0x3866 <move_bot+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383e:	6f 81       	ldd	r22, Y+7	; 0x07
    3840:	78 85       	ldd	r23, Y+8	; 0x08
    3842:	89 85       	ldd	r24, Y+9	; 0x09
    3844:	9a 85       	ldd	r25, Y+10	; 0x0a
    3846:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	9e 83       	std	Y+6, r25	; 0x06
    3850:	8d 83       	std	Y+5, r24	; 0x05
    3852:	8d 81       	ldd	r24, Y+5	; 0x05
    3854:	9e 81       	ldd	r25, Y+6	; 0x06
    3856:	9a 83       	std	Y+2, r25	; 0x02
    3858:	89 83       	std	Y+1, r24	; 0x01
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	9a 81       	ldd	r25, Y+2	; 0x02
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	f1 f7       	brne	.-4      	; 0x385e <move_bot+0x114>
    3862:	9a 83       	std	Y+2, r25	; 0x02
    3864:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		return 0;
    3866:	18 8a       	std	Y+16, r1	; 0x10
    3868:	1f 86       	std	Y+15, r1	; 0x0f
    386a:	06 c0       	rjmp	.+12     	; 0x3878 <move_bot+0x12e>
	}
	else 
	{
		follow();
    386c:	0e 94 11 12 	call	0x2422	; 0x2422 <follow>
		return 1;
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	98 8b       	std	Y+16, r25	; 0x10
    3876:	8f 87       	std	Y+15, r24	; 0x0f
    3878:	8f 85       	ldd	r24, Y+15	; 0x0f
    387a:	98 89       	ldd	r25, Y+16	; 0x10
	}
}
    387c:	60 96       	adiw	r28, 0x10	; 16
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	de bf       	out	0x3e, r29	; 62
    3884:	0f be       	out	0x3f, r0	; 63
    3886:	cd bf       	out	0x3d, r28	; 61
    3888:	cf 91       	pop	r28
    388a:	df 91       	pop	r29
    388c:	08 95       	ret

0000388e <run>:
void run(void)
{
    388e:	0f 93       	push	r16
    3890:	1f 93       	push	r17
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
    389a:	c4 55       	subi	r28, 0x54	; 84
    389c:	d0 40       	sbci	r29, 0x00	; 0
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
	data='w';
    38a8:	87 e7       	ldi	r24, 0x77	; 119
    38aa:	80 93 a7 03 	sts	0x03A7, r24
	while(1)
	{
		while(data == 'w') //waiting for signal
    38ae:	80 91 a7 03 	lds	r24, 0x03A7
    38b2:	87 37       	cpi	r24, 0x77	; 119
    38b4:	e1 f3       	breq	.-8      	; 0x38ae <run+0x20>
    38b6:	3c c1       	rjmp	.+632    	; 0x3b30 <run+0x2a2>
		{	
		}
		while(data == '\0' )
		{
			stop();
    38b8:	0e 94 cd 02 	call	0x59a	; 0x59a <stop>
    38bc:	fe 01       	movw	r30, r28
    38be:	ef 5a       	subi	r30, 0xAF	; 175
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	aa e7       	ldi	r26, 0x7A	; 122
    38c8:	b5 e4       	ldi	r27, 0x45	; 69
    38ca:	80 83       	st	Z, r24
    38cc:	91 83       	std	Z+1, r25	; 0x01
    38ce:	a2 83       	std	Z+2, r26	; 0x02
    38d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d2:	8e 01       	movw	r16, r28
    38d4:	03 5b       	subi	r16, 0xB3	; 179
    38d6:	1f 4f       	sbci	r17, 0xFF	; 255
    38d8:	fe 01       	movw	r30, r28
    38da:	ef 5a       	subi	r30, 0xAF	; 175
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	60 81       	ld	r22, Z
    38e0:	71 81       	ldd	r23, Z+1	; 0x01
    38e2:	82 81       	ldd	r24, Z+2	; 0x02
    38e4:	93 81       	ldd	r25, Z+3	; 0x03
    38e6:	2d ec       	ldi	r18, 0xCD	; 205
    38e8:	3c ec       	ldi	r19, 0xCC	; 204
    38ea:	4c e2       	ldi	r20, 0x2C	; 44
    38ec:	55 e4       	ldi	r21, 0x45	; 69
    38ee:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	f8 01       	movw	r30, r16
    38f8:	80 83       	st	Z, r24
    38fa:	91 83       	std	Z+1, r25	; 0x01
    38fc:	a2 83       	std	Z+2, r26	; 0x02
    38fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3900:	fe 01       	movw	r30, r28
    3902:	e3 5b       	subi	r30, 0xB3	; 179
    3904:	ff 4f       	sbci	r31, 0xFF	; 255
    3906:	60 81       	ld	r22, Z
    3908:	71 81       	ldd	r23, Z+1	; 0x01
    390a:	82 81       	ldd	r24, Z+2	; 0x02
    390c:	93 81       	ldd	r25, Z+3	; 0x03
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e8       	ldi	r20, 0x80	; 128
    3914:	5f e3       	ldi	r21, 0x3F	; 63
    3916:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    391a:	88 23       	and	r24, r24
    391c:	44 f4       	brge	.+16     	; 0x392e <run+0xa0>
		__ticks = 1;
    391e:	fe 01       	movw	r30, r28
    3920:	e5 5b       	subi	r30, 0xB5	; 181
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	91 83       	std	Z+1, r25	; 0x01
    392a:	80 83       	st	Z, r24
    392c:	64 c0       	rjmp	.+200    	; 0x39f6 <run+0x168>
	else if (__tmp > 65535)
    392e:	fe 01       	movw	r30, r28
    3930:	e3 5b       	subi	r30, 0xB3	; 179
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	60 81       	ld	r22, Z
    3936:	71 81       	ldd	r23, Z+1	; 0x01
    3938:	82 81       	ldd	r24, Z+2	; 0x02
    393a:	93 81       	ldd	r25, Z+3	; 0x03
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	3f ef       	ldi	r19, 0xFF	; 255
    3940:	4f e7       	ldi	r20, 0x7F	; 127
    3942:	57 e4       	ldi	r21, 0x47	; 71
    3944:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    3948:	18 16       	cp	r1, r24
    394a:	0c f0       	brlt	.+2      	; 0x394e <run+0xc0>
    394c:	43 c0       	rjmp	.+134    	; 0x39d4 <run+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    394e:	fe 01       	movw	r30, r28
    3950:	ef 5a       	subi	r30, 0xAF	; 175
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	60 81       	ld	r22, Z
    3956:	71 81       	ldd	r23, Z+1	; 0x01
    3958:	82 81       	ldd	r24, Z+2	; 0x02
    395a:	93 81       	ldd	r25, Z+3	; 0x03
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	40 e2       	ldi	r20, 0x20	; 32
    3962:	51 e4       	ldi	r21, 0x41	; 65
    3964:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	8e 01       	movw	r16, r28
    396e:	05 5b       	subi	r16, 0xB5	; 181
    3970:	1f 4f       	sbci	r17, 0xFF	; 255
    3972:	bc 01       	movw	r22, r24
    3974:	cd 01       	movw	r24, r26
    3976:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	f8 01       	movw	r30, r16
    3980:	91 83       	std	Z+1, r25	; 0x01
    3982:	80 83       	st	Z, r24
    3984:	1f c0       	rjmp	.+62     	; 0x39c4 <run+0x136>
    3986:	fe 01       	movw	r30, r28
    3988:	e7 5b       	subi	r30, 0xB7	; 183
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	84 e1       	ldi	r24, 0x14	; 20
    398e:	91 e0       	ldi	r25, 0x01	; 1
    3990:	91 83       	std	Z+1, r25	; 0x01
    3992:	80 83       	st	Z, r24
    3994:	fe 01       	movw	r30, r28
    3996:	e7 5b       	subi	r30, 0xB7	; 183
    3998:	ff 4f       	sbci	r31, 0xFF	; 255
    399a:	80 81       	ld	r24, Z
    399c:	91 81       	ldd	r25, Z+1	; 0x01
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	f1 f7       	brne	.-4      	; 0x399e <run+0x110>
    39a2:	fe 01       	movw	r30, r28
    39a4:	e7 5b       	subi	r30, 0xB7	; 183
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	91 83       	std	Z+1, r25	; 0x01
    39aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ac:	de 01       	movw	r26, r28
    39ae:	a5 5b       	subi	r26, 0xB5	; 181
    39b0:	bf 4f       	sbci	r27, 0xFF	; 255
    39b2:	fe 01       	movw	r30, r28
    39b4:	e5 5b       	subi	r30, 0xB5	; 181
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	80 81       	ld	r24, Z
    39ba:	91 81       	ldd	r25, Z+1	; 0x01
    39bc:	01 97       	sbiw	r24, 0x01	; 1
    39be:	11 96       	adiw	r26, 0x01	; 1
    39c0:	9c 93       	st	X, r25
    39c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c4:	fe 01       	movw	r30, r28
    39c6:	e5 5b       	subi	r30, 0xB5	; 181
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	80 81       	ld	r24, Z
    39cc:	91 81       	ldd	r25, Z+1	; 0x01
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	d1 f6       	brne	.-76     	; 0x3986 <run+0xf8>
    39d2:	27 c0       	rjmp	.+78     	; 0x3a22 <run+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d4:	8e 01       	movw	r16, r28
    39d6:	05 5b       	subi	r16, 0xB5	; 181
    39d8:	1f 4f       	sbci	r17, 0xFF	; 255
    39da:	fe 01       	movw	r30, r28
    39dc:	e3 5b       	subi	r30, 0xB3	; 179
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	60 81       	ld	r22, Z
    39e2:	71 81       	ldd	r23, Z+1	; 0x01
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	f8 01       	movw	r30, r16
    39f2:	91 83       	std	Z+1, r25	; 0x01
    39f4:	80 83       	st	Z, r24
    39f6:	de 01       	movw	r26, r28
    39f8:	a9 5b       	subi	r26, 0xB9	; 185
    39fa:	bf 4f       	sbci	r27, 0xFF	; 255
    39fc:	fe 01       	movw	r30, r28
    39fe:	e5 5b       	subi	r30, 0xB5	; 181
    3a00:	ff 4f       	sbci	r31, 0xFF	; 255
    3a02:	80 81       	ld	r24, Z
    3a04:	91 81       	ldd	r25, Z+1	; 0x01
    3a06:	8d 93       	st	X+, r24
    3a08:	9c 93       	st	X, r25
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	e9 5b       	subi	r30, 0xB9	; 185
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	80 81       	ld	r24, Z
    3a12:	91 81       	ldd	r25, Z+1	; 0x01
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <run+0x186>
    3a18:	fe 01       	movw	r30, r28
    3a1a:	e9 5b       	subi	r30, 0xB9	; 185
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	91 83       	std	Z+1, r25	; 0x01
    3a20:	80 83       	st	Z, r24
			_delay_ms(4000);
			comintersection();
    3a22:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <comintersection>
    3a26:	fe 01       	movw	r30, r28
    3a28:	ed 5b       	subi	r30, 0xBD	; 189
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	a8 ec       	ldi	r26, 0xC8	; 200
    3a32:	b2 e4       	ldi	r27, 0x42	; 66
    3a34:	80 83       	st	Z, r24
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	a2 83       	std	Z+2, r26	; 0x02
    3a3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3c:	8e 01       	movw	r16, r28
    3a3e:	01 5c       	subi	r16, 0xC1	; 193
    3a40:	1f 4f       	sbci	r17, 0xFF	; 255
    3a42:	fe 01       	movw	r30, r28
    3a44:	ed 5b       	subi	r30, 0xBD	; 189
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	60 81       	ld	r22, Z
    3a4a:	71 81       	ldd	r23, Z+1	; 0x01
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	2d ec       	ldi	r18, 0xCD	; 205
    3a52:	3c ec       	ldi	r19, 0xCC	; 204
    3a54:	4c e2       	ldi	r20, 0x2C	; 44
    3a56:	55 e4       	ldi	r21, 0x45	; 69
    3a58:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	f8 01       	movw	r30, r16
    3a62:	80 83       	st	Z, r24
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	a2 83       	std	Z+2, r26	; 0x02
    3a68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	ff 96       	adiw	r30, 0x3f	; 63
    3a6e:	60 81       	ld	r22, Z
    3a70:	71 81       	ldd	r23, Z+1	; 0x01
    3a72:	82 81       	ldd	r24, Z+2	; 0x02
    3a74:	93 81       	ldd	r25, Z+3	; 0x03
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e8       	ldi	r20, 0x80	; 128
    3a7c:	5f e3       	ldi	r21, 0x3F	; 63
    3a7e:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    3a82:	88 23       	and	r24, r24
    3a84:	2c f4       	brge	.+10     	; 0x3a90 <run+0x202>
		__ticks = 1;
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	9e af       	std	Y+62, r25	; 0x3e
    3a8c:	8d af       	std	Y+61, r24	; 0x3d
    3a8e:	46 c0       	rjmp	.+140    	; 0x3b1c <run+0x28e>
	else if (__tmp > 65535)
    3a90:	fe 01       	movw	r30, r28
    3a92:	ff 96       	adiw	r30, 0x3f	; 63
    3a94:	60 81       	ld	r22, Z
    3a96:	71 81       	ldd	r23, Z+1	; 0x01
    3a98:	82 81       	ldd	r24, Z+2	; 0x02
    3a9a:	93 81       	ldd	r25, Z+3	; 0x03
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	3f ef       	ldi	r19, 0xFF	; 255
    3aa0:	4f e7       	ldi	r20, 0x7F	; 127
    3aa2:	57 e4       	ldi	r21, 0x47	; 71
    3aa4:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    3aa8:	18 16       	cp	r1, r24
    3aaa:	64 f5       	brge	.+88     	; 0x3b04 <run+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aac:	fe 01       	movw	r30, r28
    3aae:	ed 5b       	subi	r30, 0xBD	; 189
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	60 81       	ld	r22, Z
    3ab4:	71 81       	ldd	r23, Z+1	; 0x01
    3ab6:	82 81       	ldd	r24, Z+2	; 0x02
    3ab8:	93 81       	ldd	r25, Z+3	; 0x03
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	40 e2       	ldi	r20, 0x20	; 32
    3ac0:	51 e4       	ldi	r21, 0x41	; 65
    3ac2:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	bc 01       	movw	r22, r24
    3acc:	cd 01       	movw	r24, r26
    3ace:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	9e af       	std	Y+62, r25	; 0x3e
    3ad8:	8d af       	std	Y+61, r24	; 0x3d
    3ada:	0f c0       	rjmp	.+30     	; 0x3afa <run+0x26c>
    3adc:	84 e1       	ldi	r24, 0x14	; 20
    3ade:	91 e0       	ldi	r25, 0x01	; 1
    3ae0:	9c af       	std	Y+60, r25	; 0x3c
    3ae2:	8b af       	std	Y+59, r24	; 0x3b
    3ae4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ae6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <run+0x25a>
    3aec:	9c af       	std	Y+60, r25	; 0x3c
    3aee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3af2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	9e af       	std	Y+62, r25	; 0x3e
    3af8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afa:	8d ad       	ldd	r24, Y+61	; 0x3d
    3afc:	9e ad       	ldd	r25, Y+62	; 0x3e
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	69 f7       	brne	.-38     	; 0x3adc <run+0x24e>
    3b02:	16 c0       	rjmp	.+44     	; 0x3b30 <run+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b04:	fe 01       	movw	r30, r28
    3b06:	ff 96       	adiw	r30, 0x3f	; 63
    3b08:	60 81       	ld	r22, Z
    3b0a:	71 81       	ldd	r23, Z+1	; 0x01
    3b0c:	82 81       	ldd	r24, Z+2	; 0x02
    3b0e:	93 81       	ldd	r25, Z+3	; 0x03
    3b10:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	9e af       	std	Y+62, r25	; 0x3e
    3b1a:	8d af       	std	Y+61, r24	; 0x3d
    3b1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b20:	9a af       	std	Y+58, r25	; 0x3a
    3b22:	89 af       	std	Y+57, r24	; 0x39
    3b24:	89 ad       	ldd	r24, Y+57	; 0x39
    3b26:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b28:	01 97       	sbiw	r24, 0x01	; 1
    3b2a:	f1 f7       	brne	.-4      	; 0x3b28 <run+0x29a>
    3b2c:	9a af       	std	Y+58, r25	; 0x3a
    3b2e:	89 af       	std	Y+57, r24	; 0x39
	while(1)
	{
		while(data == 'w') //waiting for signal
		{	
		}
		while(data == '\0' )
    3b30:	80 91 a7 03 	lds	r24, 0x03A7
    3b34:	88 23       	and	r24, r24
    3b36:	09 f4       	brne	.+2      	; 0x3b3a <run+0x2ac>
    3b38:	bf ce       	rjmp	.-642    	; 0x38b8 <run+0x2a>
			stop();
			_delay_ms(4000);
			comintersection();
			_delay_ms(100);
		}
		if(data=='f') // forward
    3b3a:	80 91 a7 03 	lds	r24, 0x03A7
    3b3e:	86 36       	cpi	r24, 0x66	; 102
    3b40:	11 f4       	brne	.+4      	; 0x3b46 <run+0x2b8>
		{
			data='\0';
    3b42:	10 92 a7 03 	sts	0x03A7, r1
		}
		if(data=='r') // right	
    3b46:	80 91 a7 03 	lds	r24, 0x03A7
    3b4a:	82 37       	cpi	r24, 0x72	; 114
    3b4c:	21 f4       	brne	.+8      	; 0x3b56 <run+0x2c8>
		{
			data='\0';
    3b4e:	10 92 a7 03 	sts	0x03A7, r1
			turn_right();
    3b52:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <turn_right>
		}
		if(data=='l') // left
    3b56:	80 91 a7 03 	lds	r24, 0x03A7
    3b5a:	8c 36       	cpi	r24, 0x6C	; 108
    3b5c:	21 f4       	brne	.+8      	; 0x3b66 <run+0x2d8>
		{
			data='\0';
    3b5e:	10 92 a7 03 	sts	0x03A7, r1
			turn_left();
    3b62:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <turn_left>
		} 
		if(data == 'h') // halt
    3b66:	80 91 a7 03 	lds	r24, 0x03A7
    3b6a:	88 36       	cpi	r24, 0x68	; 104
    3b6c:	09 f0       	breq	.+2      	; 0x3b70 <run+0x2e2>
    3b6e:	77 c0       	rjmp	.+238    	; 0x3c5e <run+0x3d0>
		{
			data='\0';
    3b70:	10 92 a7 03 	sts	0x03A7, r1
			stop();
    3b74:	0e 94 cd 02 	call	0x59a	; 0x59a <stop>
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	a8 ec       	ldi	r26, 0xC8	; 200
    3b7e:	b2 e4       	ldi	r27, 0x42	; 66
    3b80:	8d ab       	std	Y+53, r24	; 0x35
    3b82:	9e ab       	std	Y+54, r25	; 0x36
    3b84:	af ab       	std	Y+55, r26	; 0x37
    3b86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b88:	6d a9       	ldd	r22, Y+53	; 0x35
    3b8a:	7e a9       	ldd	r23, Y+54	; 0x36
    3b8c:	8f a9       	ldd	r24, Y+55	; 0x37
    3b8e:	98 ad       	ldd	r25, Y+56	; 0x38
    3b90:	2d ec       	ldi	r18, 0xCD	; 205
    3b92:	3c ec       	ldi	r19, 0xCC	; 204
    3b94:	4c e2       	ldi	r20, 0x2C	; 44
    3b96:	55 e4       	ldi	r21, 0x45	; 69
    3b98:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	89 ab       	std	Y+49, r24	; 0x31
    3ba2:	9a ab       	std	Y+50, r25	; 0x32
    3ba4:	ab ab       	std	Y+51, r26	; 0x33
    3ba6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ba8:	69 a9       	ldd	r22, Y+49	; 0x31
    3baa:	7a a9       	ldd	r23, Y+50	; 0x32
    3bac:	8b a9       	ldd	r24, Y+51	; 0x33
    3bae:	9c a9       	ldd	r25, Y+52	; 0x34
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 e8       	ldi	r20, 0x80	; 128
    3bb6:	5f e3       	ldi	r21, 0x3F	; 63
    3bb8:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    3bbc:	88 23       	and	r24, r24
    3bbe:	2c f4       	brge	.+10     	; 0x3bca <run+0x33c>
		__ticks = 1;
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	98 ab       	std	Y+48, r25	; 0x30
    3bc6:	8f a7       	std	Y+47, r24	; 0x2f
    3bc8:	3f c0       	rjmp	.+126    	; 0x3c48 <run+0x3ba>
	else if (__tmp > 65535)
    3bca:	69 a9       	ldd	r22, Y+49	; 0x31
    3bcc:	7a a9       	ldd	r23, Y+50	; 0x32
    3bce:	8b a9       	ldd	r24, Y+51	; 0x33
    3bd0:	9c a9       	ldd	r25, Y+52	; 0x34
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	3f ef       	ldi	r19, 0xFF	; 255
    3bd6:	4f e7       	ldi	r20, 0x7F	; 127
    3bd8:	57 e4       	ldi	r21, 0x47	; 71
    3bda:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    3bde:	18 16       	cp	r1, r24
    3be0:	4c f5       	brge	.+82     	; 0x3c34 <run+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be2:	6d a9       	ldd	r22, Y+53	; 0x35
    3be4:	7e a9       	ldd	r23, Y+54	; 0x36
    3be6:	8f a9       	ldd	r24, Y+55	; 0x37
    3be8:	98 ad       	ldd	r25, Y+56	; 0x38
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	40 e2       	ldi	r20, 0x20	; 32
    3bf0:	51 e4       	ldi	r21, 0x41	; 65
    3bf2:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	bc 01       	movw	r22, r24
    3bfc:	cd 01       	movw	r24, r26
    3bfe:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	98 ab       	std	Y+48, r25	; 0x30
    3c08:	8f a7       	std	Y+47, r24	; 0x2f
    3c0a:	0f c0       	rjmp	.+30     	; 0x3c2a <run+0x39c>
    3c0c:	84 e1       	ldi	r24, 0x14	; 20
    3c0e:	91 e0       	ldi	r25, 0x01	; 1
    3c10:	9e a7       	std	Y+46, r25	; 0x2e
    3c12:	8d a7       	std	Y+45, r24	; 0x2d
    3c14:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c16:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <run+0x38a>
    3c1c:	9e a7       	std	Y+46, r25	; 0x2e
    3c1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c20:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c22:	98 a9       	ldd	r25, Y+48	; 0x30
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	98 ab       	std	Y+48, r25	; 0x30
    3c28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c2c:	98 a9       	ldd	r25, Y+48	; 0x30
    3c2e:	00 97       	sbiw	r24, 0x00	; 0
    3c30:	69 f7       	brne	.-38     	; 0x3c0c <run+0x37e>
    3c32:	3d ce       	rjmp	.-902    	; 0x38ae <run+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c34:	69 a9       	ldd	r22, Y+49	; 0x31
    3c36:	7a a9       	ldd	r23, Y+50	; 0x32
    3c38:	8b a9       	ldd	r24, Y+51	; 0x33
    3c3a:	9c a9       	ldd	r25, Y+52	; 0x34
    3c3c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3c40:	dc 01       	movw	r26, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	98 ab       	std	Y+48, r25	; 0x30
    3c46:	8f a7       	std	Y+47, r24	; 0x2f
    3c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    3c4c:	9c a7       	std	Y+44, r25	; 0x2c
    3c4e:	8b a7       	std	Y+43, r24	; 0x2b
    3c50:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c52:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c54:	01 97       	sbiw	r24, 0x01	; 1
    3c56:	f1 f7       	brne	.-4      	; 0x3c54 <run+0x3c6>
    3c58:	9c a7       	std	Y+44, r25	; 0x2c
    3c5a:	8b a7       	std	Y+43, r24	; 0x2b
    3c5c:	28 ce       	rjmp	.-944    	; 0x38ae <run+0x20>
			_delay_ms(100);
			continue;
		
		}
		if(data == 'o') // origin
    3c5e:	80 91 a7 03 	lds	r24, 0x03A7
    3c62:	8f 36       	cpi	r24, 0x6F	; 111
    3c64:	09 f0       	breq	.+2      	; 0x3c68 <run+0x3da>
    3c66:	78 c0       	rjmp	.+240    	; 0x3d58 <run+0x4ca>
		{
			data='w';
    3c68:	87 e7       	ldi	r24, 0x77	; 119
    3c6a:	80 93 a7 03 	sts	0x03A7, r24
			stop();
    3c6e:	0e 94 cd 02 	call	0x59a	; 0x59a <stop>
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	a8 ec       	ldi	r26, 0xC8	; 200
    3c78:	b2 e4       	ldi	r27, 0x42	; 66
    3c7a:	8f a3       	std	Y+39, r24	; 0x27
    3c7c:	98 a7       	std	Y+40, r25	; 0x28
    3c7e:	a9 a7       	std	Y+41, r26	; 0x29
    3c80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c82:	6f a1       	ldd	r22, Y+39	; 0x27
    3c84:	78 a5       	ldd	r23, Y+40	; 0x28
    3c86:	89 a5       	ldd	r24, Y+41	; 0x29
    3c88:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c8a:	2d ec       	ldi	r18, 0xCD	; 205
    3c8c:	3c ec       	ldi	r19, 0xCC	; 204
    3c8e:	4c e2       	ldi	r20, 0x2C	; 44
    3c90:	55 e4       	ldi	r21, 0x45	; 69
    3c92:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	8b a3       	std	Y+35, r24	; 0x23
    3c9c:	9c a3       	std	Y+36, r25	; 0x24
    3c9e:	ad a3       	std	Y+37, r26	; 0x25
    3ca0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ca2:	6b a1       	ldd	r22, Y+35	; 0x23
    3ca4:	7c a1       	ldd	r23, Y+36	; 0x24
    3ca6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ca8:	9e a1       	ldd	r25, Y+38	; 0x26
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	40 e8       	ldi	r20, 0x80	; 128
    3cb0:	5f e3       	ldi	r21, 0x3F	; 63
    3cb2:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    3cb6:	88 23       	and	r24, r24
    3cb8:	2c f4       	brge	.+10     	; 0x3cc4 <run+0x436>
		__ticks = 1;
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	9a a3       	std	Y+34, r25	; 0x22
    3cc0:	89 a3       	std	Y+33, r24	; 0x21
    3cc2:	3f c0       	rjmp	.+126    	; 0x3d42 <run+0x4b4>
	else if (__tmp > 65535)
    3cc4:	6b a1       	ldd	r22, Y+35	; 0x23
    3cc6:	7c a1       	ldd	r23, Y+36	; 0x24
    3cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    3cca:	9e a1       	ldd	r25, Y+38	; 0x26
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	3f ef       	ldi	r19, 0xFF	; 255
    3cd0:	4f e7       	ldi	r20, 0x7F	; 127
    3cd2:	57 e4       	ldi	r21, 0x47	; 71
    3cd4:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    3cd8:	18 16       	cp	r1, r24
    3cda:	4c f5       	brge	.+82     	; 0x3d2e <run+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cdc:	6f a1       	ldd	r22, Y+39	; 0x27
    3cde:	78 a5       	ldd	r23, Y+40	; 0x28
    3ce0:	89 a5       	ldd	r24, Y+41	; 0x29
    3ce2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	40 e2       	ldi	r20, 0x20	; 32
    3cea:	51 e4       	ldi	r21, 0x41	; 65
    3cec:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	bc 01       	movw	r22, r24
    3cf6:	cd 01       	movw	r24, r26
    3cf8:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	9a a3       	std	Y+34, r25	; 0x22
    3d02:	89 a3       	std	Y+33, r24	; 0x21
    3d04:	0f c0       	rjmp	.+30     	; 0x3d24 <run+0x496>
    3d06:	84 e1       	ldi	r24, 0x14	; 20
    3d08:	91 e0       	ldi	r25, 0x01	; 1
    3d0a:	98 a3       	std	Y+32, r25	; 0x20
    3d0c:	8f 8f       	std	Y+31, r24	; 0x1f
    3d0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d10:	98 a1       	ldd	r25, Y+32	; 0x20
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	f1 f7       	brne	.-4      	; 0x3d12 <run+0x484>
    3d16:	98 a3       	std	Y+32, r25	; 0x20
    3d18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d1c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d1e:	01 97       	sbiw	r24, 0x01	; 1
    3d20:	9a a3       	std	Y+34, r25	; 0x22
    3d22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d24:	89 a1       	ldd	r24, Y+33	; 0x21
    3d26:	9a a1       	ldd	r25, Y+34	; 0x22
    3d28:	00 97       	sbiw	r24, 0x00	; 0
    3d2a:	69 f7       	brne	.-38     	; 0x3d06 <run+0x478>
    3d2c:	c0 cd       	rjmp	.-1152   	; 0x38ae <run+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    3d30:	7c a1       	ldd	r23, Y+36	; 0x24
    3d32:	8d a1       	ldd	r24, Y+37	; 0x25
    3d34:	9e a1       	ldd	r25, Y+38	; 0x26
    3d36:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	9a a3       	std	Y+34, r25	; 0x22
    3d40:	89 a3       	std	Y+33, r24	; 0x21
    3d42:	89 a1       	ldd	r24, Y+33	; 0x21
    3d44:	9a a1       	ldd	r25, Y+34	; 0x22
    3d46:	9e 8f       	std	Y+30, r25	; 0x1e
    3d48:	8d 8f       	std	Y+29, r24	; 0x1d
    3d4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d4e:	01 97       	sbiw	r24, 0x01	; 1
    3d50:	f1 f7       	brne	.-4      	; 0x3d4e <run+0x4c0>
    3d52:	9e 8f       	std	Y+30, r25	; 0x1e
    3d54:	8d 8f       	std	Y+29, r24	; 0x1d
    3d56:	ab cd       	rjmp	.-1194   	; 0x38ae <run+0x20>
			_delay_ms(100);
			continue;
		}
		if(data == 'c') //collect item data -> i when the bot is trying to pick up an rfid
    3d58:	80 91 a7 03 	lds	r24, 0x03A7
    3d5c:	83 36       	cpi	r24, 0x63	; 99
    3d5e:	09 f0       	breq	.+2      	; 0x3d62 <run+0x4d4>
    3d60:	88 c0       	rjmp	.+272    	; 0x3e72 <run+0x5e4>
		{
			data='w';
    3d62:	87 e7       	ldi	r24, 0x77	; 119
    3d64:	80 93 a7 03 	sts	0x03A7, r24
			lcd_cursor(2,1);
    3d68:	82 e0       	ldi	r24, 0x02	; 2
    3d6a:	61 e0       	ldi	r22, 0x01	; 1
    3d6c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
			lcd_string("Collecting");
    3d70:	85 e5       	ldi	r24, 0x55	; 85
    3d72:	92 e0       	ldi	r25, 0x02	; 2
    3d74:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>

			go_down1();
    3d78:	0e 94 55 18 	call	0x30aa	; 0x30aa <go_down1>
			
			
	       	grab();
    3d7c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <grab>
			
			go_up();
    3d80:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <go_up>
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	aa ef       	ldi	r26, 0xFA	; 250
    3d8a:	b4 e4       	ldi	r27, 0x44	; 68
    3d8c:	89 8f       	std	Y+25, r24	; 0x19
    3d8e:	9a 8f       	std	Y+26, r25	; 0x1a
    3d90:	ab 8f       	std	Y+27, r26	; 0x1b
    3d92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d94:	69 8d       	ldd	r22, Y+25	; 0x19
    3d96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d9c:	2d ec       	ldi	r18, 0xCD	; 205
    3d9e:	3c ec       	ldi	r19, 0xCC	; 204
    3da0:	4c e2       	ldi	r20, 0x2C	; 44
    3da2:	55 e4       	ldi	r21, 0x45	; 69
    3da4:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	8d 8b       	std	Y+21, r24	; 0x15
    3dae:	9e 8b       	std	Y+22, r25	; 0x16
    3db0:	af 8b       	std	Y+23, r26	; 0x17
    3db2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3db4:	6d 89       	ldd	r22, Y+21	; 0x15
    3db6:	7e 89       	ldd	r23, Y+22	; 0x16
    3db8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dba:	98 8d       	ldd	r25, Y+24	; 0x18
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	40 e8       	ldi	r20, 0x80	; 128
    3dc2:	5f e3       	ldi	r21, 0x3F	; 63
    3dc4:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    3dc8:	88 23       	and	r24, r24
    3dca:	2c f4       	brge	.+10     	; 0x3dd6 <run+0x548>
		__ticks = 1;
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	9c 8b       	std	Y+20, r25	; 0x14
    3dd2:	8b 8b       	std	Y+19, r24	; 0x13
    3dd4:	3f c0       	rjmp	.+126    	; 0x3e54 <run+0x5c6>
	else if (__tmp > 65535)
    3dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3dda:	8f 89       	ldd	r24, Y+23	; 0x17
    3ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	3f ef       	ldi	r19, 0xFF	; 255
    3de2:	4f e7       	ldi	r20, 0x7F	; 127
    3de4:	57 e4       	ldi	r21, 0x47	; 71
    3de6:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    3dea:	18 16       	cp	r1, r24
    3dec:	4c f5       	brge	.+82     	; 0x3e40 <run+0x5b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dee:	69 8d       	ldd	r22, Y+25	; 0x19
    3df0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3df2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3df4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	40 e2       	ldi	r20, 0x20	; 32
    3dfc:	51 e4       	ldi	r21, 0x41	; 65
    3dfe:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	bc 01       	movw	r22, r24
    3e08:	cd 01       	movw	r24, r26
    3e0a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	9c 8b       	std	Y+20, r25	; 0x14
    3e14:	8b 8b       	std	Y+19, r24	; 0x13
    3e16:	0f c0       	rjmp	.+30     	; 0x3e36 <run+0x5a8>
    3e18:	84 e1       	ldi	r24, 0x14	; 20
    3e1a:	91 e0       	ldi	r25, 0x01	; 1
    3e1c:	9a 8b       	std	Y+18, r25	; 0x12
    3e1e:	89 8b       	std	Y+17, r24	; 0x11
    3e20:	89 89       	ldd	r24, Y+17	; 0x11
    3e22:	9a 89       	ldd	r25, Y+18	; 0x12
    3e24:	01 97       	sbiw	r24, 0x01	; 1
    3e26:	f1 f7       	brne	.-4      	; 0x3e24 <run+0x596>
    3e28:	9a 8b       	std	Y+18, r25	; 0x12
    3e2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e30:	01 97       	sbiw	r24, 0x01	; 1
    3e32:	9c 8b       	std	Y+20, r25	; 0x14
    3e34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e36:	8b 89       	ldd	r24, Y+19	; 0x13
    3e38:	9c 89       	ldd	r25, Y+20	; 0x14
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	69 f7       	brne	.-38     	; 0x3e18 <run+0x58a>
    3e3e:	14 c0       	rjmp	.+40     	; 0x3e68 <run+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e40:	6d 89       	ldd	r22, Y+21	; 0x15
    3e42:	7e 89       	ldd	r23, Y+22	; 0x16
    3e44:	8f 89       	ldd	r24, Y+23	; 0x17
    3e46:	98 8d       	ldd	r25, Y+24	; 0x18
    3e48:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	9c 8b       	std	Y+20, r25	; 0x14
    3e52:	8b 8b       	std	Y+19, r24	; 0x13
    3e54:	8b 89       	ldd	r24, Y+19	; 0x13
    3e56:	9c 89       	ldd	r25, Y+20	; 0x14
    3e58:	98 8b       	std	Y+16, r25	; 0x10
    3e5a:	8f 87       	std	Y+15, r24	; 0x0f
    3e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e5e:	98 89       	ldd	r25, Y+16	; 0x10
    3e60:	01 97       	sbiw	r24, 0x01	; 1
    3e62:	f1 f7       	brne	.-4      	; 0x3e60 <run+0x5d2>
    3e64:	98 8b       	std	Y+16, r25	; 0x10
    3e66:	8f 87       	std	Y+15, r24	; 0x0f
		    
		    
			
			_delay_ms(2000);
			readrfidtag();	
    3e68:	0e 94 82 16 	call	0x2d04	; 0x2d04 <readrfidtag>
			clearrfid();     
    3e6c:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <clearrfid>
    3e70:	1e cd       	rjmp	.-1476   	; 0x38ae <run+0x20>
			continue;   
			
		}
		if(data == 'd') //drop_item
    3e72:	80 91 a7 03 	lds	r24, 0x03A7
    3e76:	84 36       	cpi	r24, 0x64	; 100
    3e78:	09 f0       	breq	.+2      	; 0x3e7c <run+0x5ee>
    3e7a:	86 c0       	rjmp	.+268    	; 0x3f88 <run+0x6fa>
		{
			data='w';
    3e7c:	87 e7       	ldi	r24, 0x77	; 119
    3e7e:	80 93 a7 03 	sts	0x03A7, r24
			lcd_cursor(2,1);
    3e82:	82 e0       	ldi	r24, 0x02	; 2
    3e84:	61 e0       	ldi	r22, 0x01	; 1
    3e86:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
			lcd_string("Dropping");
    3e8a:	80 e6       	ldi	r24, 0x60	; 96
    3e8c:	92 e0       	ldi	r25, 0x02	; 2
    3e8e:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>

			go_down2();
    3e92:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <go_down2>
			
			release();
    3e96:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <release>
			
	        go_up();
    3e9a:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <go_up>
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	aa ef       	ldi	r26, 0xFA	; 250
    3ea4:	b4 e4       	ldi	r27, 0x44	; 68
    3ea6:	8b 87       	std	Y+11, r24	; 0x0b
    3ea8:	9c 87       	std	Y+12, r25	; 0x0c
    3eaa:	ad 87       	std	Y+13, r26	; 0x0d
    3eac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eb6:	2d ec       	ldi	r18, 0xCD	; 205
    3eb8:	3c ec       	ldi	r19, 0xCC	; 204
    3eba:	4c e2       	ldi	r20, 0x2C	; 44
    3ebc:	55 e4       	ldi	r21, 0x45	; 69
    3ebe:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	8f 83       	std	Y+7, r24	; 0x07
    3ec8:	98 87       	std	Y+8, r25	; 0x08
    3eca:	a9 87       	std	Y+9, r26	; 0x09
    3ecc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ece:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed0:	78 85       	ldd	r23, Y+8	; 0x08
    3ed2:	89 85       	ldd	r24, Y+9	; 0x09
    3ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 e8       	ldi	r20, 0x80	; 128
    3edc:	5f e3       	ldi	r21, 0x3F	; 63
    3ede:	0e 94 bc 23 	call	0x4778	; 0x4778 <__ltsf2>
    3ee2:	88 23       	and	r24, r24
    3ee4:	2c f4       	brge	.+10     	; 0x3ef0 <run+0x662>
		__ticks = 1;
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	9e 83       	std	Y+6, r25	; 0x06
    3eec:	8d 83       	std	Y+5, r24	; 0x05
    3eee:	3f c0       	rjmp	.+126    	; 0x3f6e <run+0x6e0>
	else if (__tmp > 65535)
    3ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ef2:	78 85       	ldd	r23, Y+8	; 0x08
    3ef4:	89 85       	ldd	r24, Y+9	; 0x09
    3ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	3f ef       	ldi	r19, 0xFF	; 255
    3efc:	4f e7       	ldi	r20, 0x7F	; 127
    3efe:	57 e4       	ldi	r21, 0x47	; 71
    3f00:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__gtsf2>
    3f04:	18 16       	cp	r1, r24
    3f06:	4c f5       	brge	.+82     	; 0x3f5a <run+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	40 e2       	ldi	r20, 0x20	; 32
    3f16:	51 e4       	ldi	r21, 0x41	; 65
    3f18:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsf3>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
    3f20:	bc 01       	movw	r22, r24
    3f22:	cd 01       	movw	r24, r26
    3f24:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	9e 83       	std	Y+6, r25	; 0x06
    3f2e:	8d 83       	std	Y+5, r24	; 0x05
    3f30:	0f c0       	rjmp	.+30     	; 0x3f50 <run+0x6c2>
    3f32:	84 e1       	ldi	r24, 0x14	; 20
    3f34:	91 e0       	ldi	r25, 0x01	; 1
    3f36:	9c 83       	std	Y+4, r25	; 0x04
    3f38:	8b 83       	std	Y+3, r24	; 0x03
    3f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f3e:	01 97       	sbiw	r24, 0x01	; 1
    3f40:	f1 f7       	brne	.-4      	; 0x3f3e <run+0x6b0>
    3f42:	9c 83       	std	Y+4, r25	; 0x04
    3f44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f46:	8d 81       	ldd	r24, Y+5	; 0x05
    3f48:	9e 81       	ldd	r25, Y+6	; 0x06
    3f4a:	01 97       	sbiw	r24, 0x01	; 1
    3f4c:	9e 83       	std	Y+6, r25	; 0x06
    3f4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f50:	8d 81       	ldd	r24, Y+5	; 0x05
    3f52:	9e 81       	ldd	r25, Y+6	; 0x06
    3f54:	00 97       	sbiw	r24, 0x00	; 0
    3f56:	69 f7       	brne	.-38     	; 0x3f32 <run+0x6a4>
    3f58:	14 c0       	rjmp	.+40     	; 0x3f82 <run+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f5c:	78 85       	ldd	r23, Y+8	; 0x08
    3f5e:	89 85       	ldd	r24, Y+9	; 0x09
    3f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f62:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfsi>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	9e 83       	std	Y+6, r25	; 0x06
    3f6c:	8d 83       	std	Y+5, r24	; 0x05
    3f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f70:	9e 81       	ldd	r25, Y+6	; 0x06
    3f72:	9a 83       	std	Y+2, r25	; 0x02
    3f74:	89 83       	std	Y+1, r24	; 0x01
    3f76:	89 81       	ldd	r24, Y+1	; 0x01
    3f78:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7a:	01 97       	sbiw	r24, 0x01	; 1
    3f7c:	f1 f7       	brne	.-4      	; 0x3f7a <run+0x6ec>
    3f7e:	9a 83       	std	Y+2, r25	; 0x02
    3f80:	89 83       	std	Y+1, r24	; 0x01
			
			
			_delay_ms(2000);
			senddroppedsig();
    3f82:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <senddroppedsig>
    3f86:	93 cc       	rjmp	.-1754   	; 0x38ae <run+0x20>
			continue;
		}
		
		while(1) 
		{
			if(move_bot() == 1)
    3f88:	0e 94 a5 1b 	call	0x374a	; 0x374a <move_bot>
    3f8c:	81 30       	cpi	r24, 0x01	; 1
    3f8e:	91 05       	cpc	r25, r1
    3f90:	09 f0       	breq	.+2      	; 0x3f94 <run+0x706>
    3f92:	8d cc       	rjmp	.-1766   	; 0x38ae <run+0x20>
    3f94:	f9 cf       	rjmp	.-14     	; 0x3f88 <run+0x6fa>

00003f96 <main>:
}



int main(void)
{
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    3f9e:	0e 94 0c 02 	call	0x418	; 0x418 <init_devices>
	lcd_cursor(1,1);		
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	61 e0       	ldi	r22, 0x01	; 1
    3fa6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <lcd_cursor>
	lcd_string("Welcome");
    3faa:	89 e6       	ldi	r24, 0x69	; 105
    3fac:	92 e0       	ldi	r25, 0x02	; 2
    3fae:	0e 94 28 0b 	call	0x1650	; 0x1650 <lcd_string>
	//UDR0 = 'a';
	//checkstraight();

	//checkfollow();
	//checkarm();
	run();
    3fb2:	0e 94 47 1c 	call	0x388e	; 0x388e <run>
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
	
	
}
    3fba:	cf 91       	pop	r28
    3fbc:	df 91       	pop	r29
    3fbe:	08 95       	ret

00003fc0 <__fixunssfsi>:
    3fc0:	ef 92       	push	r14
    3fc2:	ff 92       	push	r15
    3fc4:	0f 93       	push	r16
    3fc6:	1f 93       	push	r17
    3fc8:	7b 01       	movw	r14, r22
    3fca:	8c 01       	movw	r16, r24
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	5f e4       	ldi	r21, 0x4F	; 79
    3fd4:	0e 94 8c 23 	call	0x4718	; 0x4718 <__gesf2>
    3fd8:	88 23       	and	r24, r24
    3fda:	8c f0       	brlt	.+34     	; 0x3ffe <__fixunssfsi+0x3e>
    3fdc:	c8 01       	movw	r24, r16
    3fde:	b7 01       	movw	r22, r14
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	40 e0       	ldi	r20, 0x00	; 0
    3fe6:	5f e4       	ldi	r21, 0x4F	; 79
    3fe8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__subsf3>
    3fec:	0e 94 4a 24 	call	0x4894	; 0x4894 <__fixsfsi>
    3ff0:	9b 01       	movw	r18, r22
    3ff2:	ac 01       	movw	r20, r24
    3ff4:	20 50       	subi	r18, 0x00	; 0
    3ff6:	30 40       	sbci	r19, 0x00	; 0
    3ff8:	40 40       	sbci	r20, 0x00	; 0
    3ffa:	50 48       	sbci	r21, 0x80	; 128
    3ffc:	06 c0       	rjmp	.+12     	; 0x400a <__fixunssfsi+0x4a>
    3ffe:	c8 01       	movw	r24, r16
    4000:	b7 01       	movw	r22, r14
    4002:	0e 94 4a 24 	call	0x4894	; 0x4894 <__fixsfsi>
    4006:	9b 01       	movw	r18, r22
    4008:	ac 01       	movw	r20, r24
    400a:	b9 01       	movw	r22, r18
    400c:	ca 01       	movw	r24, r20
    400e:	1f 91       	pop	r17
    4010:	0f 91       	pop	r16
    4012:	ff 90       	pop	r15
    4014:	ef 90       	pop	r14
    4016:	08 95       	ret

00004018 <_fpadd_parts>:
    4018:	a0 e0       	ldi	r26, 0x00	; 0
    401a:	b0 e0       	ldi	r27, 0x00	; 0
    401c:	e2 e1       	ldi	r30, 0x12	; 18
    401e:	f0 e2       	ldi	r31, 0x20	; 32
    4020:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__prologue_saves__>
    4024:	dc 01       	movw	r26, r24
    4026:	2b 01       	movw	r4, r22
    4028:	fa 01       	movw	r30, r20
    402a:	9c 91       	ld	r25, X
    402c:	92 30       	cpi	r25, 0x02	; 2
    402e:	08 f4       	brcc	.+2      	; 0x4032 <_fpadd_parts+0x1a>
    4030:	39 c1       	rjmp	.+626    	; 0x42a4 <_fpadd_parts+0x28c>
    4032:	eb 01       	movw	r28, r22
    4034:	88 81       	ld	r24, Y
    4036:	82 30       	cpi	r24, 0x02	; 2
    4038:	08 f4       	brcc	.+2      	; 0x403c <_fpadd_parts+0x24>
    403a:	33 c1       	rjmp	.+614    	; 0x42a2 <_fpadd_parts+0x28a>
    403c:	94 30       	cpi	r25, 0x04	; 4
    403e:	69 f4       	brne	.+26     	; 0x405a <_fpadd_parts+0x42>
    4040:	84 30       	cpi	r24, 0x04	; 4
    4042:	09 f0       	breq	.+2      	; 0x4046 <_fpadd_parts+0x2e>
    4044:	2f c1       	rjmp	.+606    	; 0x42a4 <_fpadd_parts+0x28c>
    4046:	11 96       	adiw	r26, 0x01	; 1
    4048:	9c 91       	ld	r25, X
    404a:	11 97       	sbiw	r26, 0x01	; 1
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	98 17       	cp	r25, r24
    4050:	09 f4       	brne	.+2      	; 0x4054 <_fpadd_parts+0x3c>
    4052:	28 c1       	rjmp	.+592    	; 0x42a4 <_fpadd_parts+0x28c>
    4054:	a1 e7       	ldi	r26, 0x71	; 113
    4056:	b2 e0       	ldi	r27, 0x02	; 2
    4058:	25 c1       	rjmp	.+586    	; 0x42a4 <_fpadd_parts+0x28c>
    405a:	84 30       	cpi	r24, 0x04	; 4
    405c:	09 f4       	brne	.+2      	; 0x4060 <_fpadd_parts+0x48>
    405e:	21 c1       	rjmp	.+578    	; 0x42a2 <_fpadd_parts+0x28a>
    4060:	82 30       	cpi	r24, 0x02	; 2
    4062:	a9 f4       	brne	.+42     	; 0x408e <_fpadd_parts+0x76>
    4064:	92 30       	cpi	r25, 0x02	; 2
    4066:	09 f0       	breq	.+2      	; 0x406a <_fpadd_parts+0x52>
    4068:	1d c1       	rjmp	.+570    	; 0x42a4 <_fpadd_parts+0x28c>
    406a:	9a 01       	movw	r18, r20
    406c:	ad 01       	movw	r20, r26
    406e:	88 e0       	ldi	r24, 0x08	; 8
    4070:	ea 01       	movw	r28, r20
    4072:	09 90       	ld	r0, Y+
    4074:	ae 01       	movw	r20, r28
    4076:	e9 01       	movw	r28, r18
    4078:	09 92       	st	Y+, r0
    407a:	9e 01       	movw	r18, r28
    407c:	81 50       	subi	r24, 0x01	; 1
    407e:	c1 f7       	brne	.-16     	; 0x4070 <_fpadd_parts+0x58>
    4080:	e2 01       	movw	r28, r4
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	11 96       	adiw	r26, 0x01	; 1
    4086:	9c 91       	ld	r25, X
    4088:	89 23       	and	r24, r25
    408a:	81 83       	std	Z+1, r24	; 0x01
    408c:	08 c1       	rjmp	.+528    	; 0x429e <_fpadd_parts+0x286>
    408e:	92 30       	cpi	r25, 0x02	; 2
    4090:	09 f4       	brne	.+2      	; 0x4094 <_fpadd_parts+0x7c>
    4092:	07 c1       	rjmp	.+526    	; 0x42a2 <_fpadd_parts+0x28a>
    4094:	12 96       	adiw	r26, 0x02	; 2
    4096:	2d 90       	ld	r2, X+
    4098:	3c 90       	ld	r3, X
    409a:	13 97       	sbiw	r26, 0x03	; 3
    409c:	eb 01       	movw	r28, r22
    409e:	8a 81       	ldd	r24, Y+2	; 0x02
    40a0:	9b 81       	ldd	r25, Y+3	; 0x03
    40a2:	14 96       	adiw	r26, 0x04	; 4
    40a4:	ad 90       	ld	r10, X+
    40a6:	bd 90       	ld	r11, X+
    40a8:	cd 90       	ld	r12, X+
    40aa:	dc 90       	ld	r13, X
    40ac:	17 97       	sbiw	r26, 0x07	; 7
    40ae:	ec 80       	ldd	r14, Y+4	; 0x04
    40b0:	fd 80       	ldd	r15, Y+5	; 0x05
    40b2:	0e 81       	ldd	r16, Y+6	; 0x06
    40b4:	1f 81       	ldd	r17, Y+7	; 0x07
    40b6:	91 01       	movw	r18, r2
    40b8:	28 1b       	sub	r18, r24
    40ba:	39 0b       	sbc	r19, r25
    40bc:	b9 01       	movw	r22, r18
    40be:	37 ff       	sbrs	r19, 7
    40c0:	04 c0       	rjmp	.+8      	; 0x40ca <_fpadd_parts+0xb2>
    40c2:	66 27       	eor	r22, r22
    40c4:	77 27       	eor	r23, r23
    40c6:	62 1b       	sub	r22, r18
    40c8:	73 0b       	sbc	r23, r19
    40ca:	60 32       	cpi	r22, 0x20	; 32
    40cc:	71 05       	cpc	r23, r1
    40ce:	0c f0       	brlt	.+2      	; 0x40d2 <_fpadd_parts+0xba>
    40d0:	61 c0       	rjmp	.+194    	; 0x4194 <_fpadd_parts+0x17c>
    40d2:	12 16       	cp	r1, r18
    40d4:	13 06       	cpc	r1, r19
    40d6:	6c f5       	brge	.+90     	; 0x4132 <_fpadd_parts+0x11a>
    40d8:	37 01       	movw	r6, r14
    40da:	48 01       	movw	r8, r16
    40dc:	06 2e       	mov	r0, r22
    40de:	04 c0       	rjmp	.+8      	; 0x40e8 <_fpadd_parts+0xd0>
    40e0:	96 94       	lsr	r9
    40e2:	87 94       	ror	r8
    40e4:	77 94       	ror	r7
    40e6:	67 94       	ror	r6
    40e8:	0a 94       	dec	r0
    40ea:	d2 f7       	brpl	.-12     	; 0x40e0 <_fpadd_parts+0xc8>
    40ec:	21 e0       	ldi	r18, 0x01	; 1
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	40 e0       	ldi	r20, 0x00	; 0
    40f2:	50 e0       	ldi	r21, 0x00	; 0
    40f4:	04 c0       	rjmp	.+8      	; 0x40fe <_fpadd_parts+0xe6>
    40f6:	22 0f       	add	r18, r18
    40f8:	33 1f       	adc	r19, r19
    40fa:	44 1f       	adc	r20, r20
    40fc:	55 1f       	adc	r21, r21
    40fe:	6a 95       	dec	r22
    4100:	d2 f7       	brpl	.-12     	; 0x40f6 <_fpadd_parts+0xde>
    4102:	21 50       	subi	r18, 0x01	; 1
    4104:	30 40       	sbci	r19, 0x00	; 0
    4106:	40 40       	sbci	r20, 0x00	; 0
    4108:	50 40       	sbci	r21, 0x00	; 0
    410a:	2e 21       	and	r18, r14
    410c:	3f 21       	and	r19, r15
    410e:	40 23       	and	r20, r16
    4110:	51 23       	and	r21, r17
    4112:	21 15       	cp	r18, r1
    4114:	31 05       	cpc	r19, r1
    4116:	41 05       	cpc	r20, r1
    4118:	51 05       	cpc	r21, r1
    411a:	21 f0       	breq	.+8      	; 0x4124 <_fpadd_parts+0x10c>
    411c:	21 e0       	ldi	r18, 0x01	; 1
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	40 e0       	ldi	r20, 0x00	; 0
    4122:	50 e0       	ldi	r21, 0x00	; 0
    4124:	79 01       	movw	r14, r18
    4126:	8a 01       	movw	r16, r20
    4128:	e6 28       	or	r14, r6
    412a:	f7 28       	or	r15, r7
    412c:	08 29       	or	r16, r8
    412e:	19 29       	or	r17, r9
    4130:	3c c0       	rjmp	.+120    	; 0x41aa <_fpadd_parts+0x192>
    4132:	23 2b       	or	r18, r19
    4134:	d1 f1       	breq	.+116    	; 0x41aa <_fpadd_parts+0x192>
    4136:	26 0e       	add	r2, r22
    4138:	37 1e       	adc	r3, r23
    413a:	35 01       	movw	r6, r10
    413c:	46 01       	movw	r8, r12
    413e:	06 2e       	mov	r0, r22
    4140:	04 c0       	rjmp	.+8      	; 0x414a <_fpadd_parts+0x132>
    4142:	96 94       	lsr	r9
    4144:	87 94       	ror	r8
    4146:	77 94       	ror	r7
    4148:	67 94       	ror	r6
    414a:	0a 94       	dec	r0
    414c:	d2 f7       	brpl	.-12     	; 0x4142 <_fpadd_parts+0x12a>
    414e:	21 e0       	ldi	r18, 0x01	; 1
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	40 e0       	ldi	r20, 0x00	; 0
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	04 c0       	rjmp	.+8      	; 0x4160 <_fpadd_parts+0x148>
    4158:	22 0f       	add	r18, r18
    415a:	33 1f       	adc	r19, r19
    415c:	44 1f       	adc	r20, r20
    415e:	55 1f       	adc	r21, r21
    4160:	6a 95       	dec	r22
    4162:	d2 f7       	brpl	.-12     	; 0x4158 <_fpadd_parts+0x140>
    4164:	21 50       	subi	r18, 0x01	; 1
    4166:	30 40       	sbci	r19, 0x00	; 0
    4168:	40 40       	sbci	r20, 0x00	; 0
    416a:	50 40       	sbci	r21, 0x00	; 0
    416c:	2a 21       	and	r18, r10
    416e:	3b 21       	and	r19, r11
    4170:	4c 21       	and	r20, r12
    4172:	5d 21       	and	r21, r13
    4174:	21 15       	cp	r18, r1
    4176:	31 05       	cpc	r19, r1
    4178:	41 05       	cpc	r20, r1
    417a:	51 05       	cpc	r21, r1
    417c:	21 f0       	breq	.+8      	; 0x4186 <_fpadd_parts+0x16e>
    417e:	21 e0       	ldi	r18, 0x01	; 1
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e0       	ldi	r20, 0x00	; 0
    4184:	50 e0       	ldi	r21, 0x00	; 0
    4186:	59 01       	movw	r10, r18
    4188:	6a 01       	movw	r12, r20
    418a:	a6 28       	or	r10, r6
    418c:	b7 28       	or	r11, r7
    418e:	c8 28       	or	r12, r8
    4190:	d9 28       	or	r13, r9
    4192:	0b c0       	rjmp	.+22     	; 0x41aa <_fpadd_parts+0x192>
    4194:	82 15       	cp	r24, r2
    4196:	93 05       	cpc	r25, r3
    4198:	2c f0       	brlt	.+10     	; 0x41a4 <_fpadd_parts+0x18c>
    419a:	1c 01       	movw	r2, r24
    419c:	aa 24       	eor	r10, r10
    419e:	bb 24       	eor	r11, r11
    41a0:	65 01       	movw	r12, r10
    41a2:	03 c0       	rjmp	.+6      	; 0x41aa <_fpadd_parts+0x192>
    41a4:	ee 24       	eor	r14, r14
    41a6:	ff 24       	eor	r15, r15
    41a8:	87 01       	movw	r16, r14
    41aa:	11 96       	adiw	r26, 0x01	; 1
    41ac:	9c 91       	ld	r25, X
    41ae:	d2 01       	movw	r26, r4
    41b0:	11 96       	adiw	r26, 0x01	; 1
    41b2:	8c 91       	ld	r24, X
    41b4:	98 17       	cp	r25, r24
    41b6:	09 f4       	brne	.+2      	; 0x41ba <_fpadd_parts+0x1a2>
    41b8:	45 c0       	rjmp	.+138    	; 0x4244 <_fpadd_parts+0x22c>
    41ba:	99 23       	and	r25, r25
    41bc:	39 f0       	breq	.+14     	; 0x41cc <_fpadd_parts+0x1b4>
    41be:	a8 01       	movw	r20, r16
    41c0:	97 01       	movw	r18, r14
    41c2:	2a 19       	sub	r18, r10
    41c4:	3b 09       	sbc	r19, r11
    41c6:	4c 09       	sbc	r20, r12
    41c8:	5d 09       	sbc	r21, r13
    41ca:	06 c0       	rjmp	.+12     	; 0x41d8 <_fpadd_parts+0x1c0>
    41cc:	a6 01       	movw	r20, r12
    41ce:	95 01       	movw	r18, r10
    41d0:	2e 19       	sub	r18, r14
    41d2:	3f 09       	sbc	r19, r15
    41d4:	40 0b       	sbc	r20, r16
    41d6:	51 0b       	sbc	r21, r17
    41d8:	57 fd       	sbrc	r21, 7
    41da:	08 c0       	rjmp	.+16     	; 0x41ec <_fpadd_parts+0x1d4>
    41dc:	11 82       	std	Z+1, r1	; 0x01
    41de:	33 82       	std	Z+3, r3	; 0x03
    41e0:	22 82       	std	Z+2, r2	; 0x02
    41e2:	24 83       	std	Z+4, r18	; 0x04
    41e4:	35 83       	std	Z+5, r19	; 0x05
    41e6:	46 83       	std	Z+6, r20	; 0x06
    41e8:	57 83       	std	Z+7, r21	; 0x07
    41ea:	1d c0       	rjmp	.+58     	; 0x4226 <_fpadd_parts+0x20e>
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	81 83       	std	Z+1, r24	; 0x01
    41f0:	33 82       	std	Z+3, r3	; 0x03
    41f2:	22 82       	std	Z+2, r2	; 0x02
    41f4:	88 27       	eor	r24, r24
    41f6:	99 27       	eor	r25, r25
    41f8:	dc 01       	movw	r26, r24
    41fa:	82 1b       	sub	r24, r18
    41fc:	93 0b       	sbc	r25, r19
    41fe:	a4 0b       	sbc	r26, r20
    4200:	b5 0b       	sbc	r27, r21
    4202:	84 83       	std	Z+4, r24	; 0x04
    4204:	95 83       	std	Z+5, r25	; 0x05
    4206:	a6 83       	std	Z+6, r26	; 0x06
    4208:	b7 83       	std	Z+7, r27	; 0x07
    420a:	0d c0       	rjmp	.+26     	; 0x4226 <_fpadd_parts+0x20e>
    420c:	22 0f       	add	r18, r18
    420e:	33 1f       	adc	r19, r19
    4210:	44 1f       	adc	r20, r20
    4212:	55 1f       	adc	r21, r21
    4214:	24 83       	std	Z+4, r18	; 0x04
    4216:	35 83       	std	Z+5, r19	; 0x05
    4218:	46 83       	std	Z+6, r20	; 0x06
    421a:	57 83       	std	Z+7, r21	; 0x07
    421c:	82 81       	ldd	r24, Z+2	; 0x02
    421e:	93 81       	ldd	r25, Z+3	; 0x03
    4220:	01 97       	sbiw	r24, 0x01	; 1
    4222:	93 83       	std	Z+3, r25	; 0x03
    4224:	82 83       	std	Z+2, r24	; 0x02
    4226:	24 81       	ldd	r18, Z+4	; 0x04
    4228:	35 81       	ldd	r19, Z+5	; 0x05
    422a:	46 81       	ldd	r20, Z+6	; 0x06
    422c:	57 81       	ldd	r21, Z+7	; 0x07
    422e:	da 01       	movw	r26, r20
    4230:	c9 01       	movw	r24, r18
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	a1 09       	sbc	r26, r1
    4236:	b1 09       	sbc	r27, r1
    4238:	8f 5f       	subi	r24, 0xFF	; 255
    423a:	9f 4f       	sbci	r25, 0xFF	; 255
    423c:	af 4f       	sbci	r26, 0xFF	; 255
    423e:	bf 43       	sbci	r27, 0x3F	; 63
    4240:	28 f3       	brcs	.-54     	; 0x420c <_fpadd_parts+0x1f4>
    4242:	0b c0       	rjmp	.+22     	; 0x425a <_fpadd_parts+0x242>
    4244:	91 83       	std	Z+1, r25	; 0x01
    4246:	33 82       	std	Z+3, r3	; 0x03
    4248:	22 82       	std	Z+2, r2	; 0x02
    424a:	ea 0c       	add	r14, r10
    424c:	fb 1c       	adc	r15, r11
    424e:	0c 1d       	adc	r16, r12
    4250:	1d 1d       	adc	r17, r13
    4252:	e4 82       	std	Z+4, r14	; 0x04
    4254:	f5 82       	std	Z+5, r15	; 0x05
    4256:	06 83       	std	Z+6, r16	; 0x06
    4258:	17 83       	std	Z+7, r17	; 0x07
    425a:	83 e0       	ldi	r24, 0x03	; 3
    425c:	80 83       	st	Z, r24
    425e:	24 81       	ldd	r18, Z+4	; 0x04
    4260:	35 81       	ldd	r19, Z+5	; 0x05
    4262:	46 81       	ldd	r20, Z+6	; 0x06
    4264:	57 81       	ldd	r21, Z+7	; 0x07
    4266:	57 ff       	sbrs	r21, 7
    4268:	1a c0       	rjmp	.+52     	; 0x429e <_fpadd_parts+0x286>
    426a:	c9 01       	movw	r24, r18
    426c:	aa 27       	eor	r26, r26
    426e:	97 fd       	sbrc	r25, 7
    4270:	a0 95       	com	r26
    4272:	ba 2f       	mov	r27, r26
    4274:	81 70       	andi	r24, 0x01	; 1
    4276:	90 70       	andi	r25, 0x00	; 0
    4278:	a0 70       	andi	r26, 0x00	; 0
    427a:	b0 70       	andi	r27, 0x00	; 0
    427c:	56 95       	lsr	r21
    427e:	47 95       	ror	r20
    4280:	37 95       	ror	r19
    4282:	27 95       	ror	r18
    4284:	82 2b       	or	r24, r18
    4286:	93 2b       	or	r25, r19
    4288:	a4 2b       	or	r26, r20
    428a:	b5 2b       	or	r27, r21
    428c:	84 83       	std	Z+4, r24	; 0x04
    428e:	95 83       	std	Z+5, r25	; 0x05
    4290:	a6 83       	std	Z+6, r26	; 0x06
    4292:	b7 83       	std	Z+7, r27	; 0x07
    4294:	82 81       	ldd	r24, Z+2	; 0x02
    4296:	93 81       	ldd	r25, Z+3	; 0x03
    4298:	01 96       	adiw	r24, 0x01	; 1
    429a:	93 83       	std	Z+3, r25	; 0x03
    429c:	82 83       	std	Z+2, r24	; 0x02
    429e:	df 01       	movw	r26, r30
    42a0:	01 c0       	rjmp	.+2      	; 0x42a4 <_fpadd_parts+0x28c>
    42a2:	d2 01       	movw	r26, r4
    42a4:	cd 01       	movw	r24, r26
    42a6:	cd b7       	in	r28, 0x3d	; 61
    42a8:	de b7       	in	r29, 0x3e	; 62
    42aa:	e2 e1       	ldi	r30, 0x12	; 18
    42ac:	0c 94 3c 27 	jmp	0x4e78	; 0x4e78 <__epilogue_restores__>

000042b0 <__subsf3>:
    42b0:	a0 e2       	ldi	r26, 0x20	; 32
    42b2:	b0 e0       	ldi	r27, 0x00	; 0
    42b4:	ee e5       	ldi	r30, 0x5E	; 94
    42b6:	f1 e2       	ldi	r31, 0x21	; 33
    42b8:	0c 94 2c 27 	jmp	0x4e58	; 0x4e58 <__prologue_saves__+0x18>
    42bc:	69 83       	std	Y+1, r22	; 0x01
    42be:	7a 83       	std	Y+2, r23	; 0x02
    42c0:	8b 83       	std	Y+3, r24	; 0x03
    42c2:	9c 83       	std	Y+4, r25	; 0x04
    42c4:	2d 83       	std	Y+5, r18	; 0x05
    42c6:	3e 83       	std	Y+6, r19	; 0x06
    42c8:	4f 83       	std	Y+7, r20	; 0x07
    42ca:	58 87       	std	Y+8, r21	; 0x08
    42cc:	e9 e0       	ldi	r30, 0x09	; 9
    42ce:	ee 2e       	mov	r14, r30
    42d0:	f1 2c       	mov	r15, r1
    42d2:	ec 0e       	add	r14, r28
    42d4:	fd 1e       	adc	r15, r29
    42d6:	ce 01       	movw	r24, r28
    42d8:	01 96       	adiw	r24, 0x01	; 1
    42da:	b7 01       	movw	r22, r14
    42dc:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    42e0:	8e 01       	movw	r16, r28
    42e2:	0f 5e       	subi	r16, 0xEF	; 239
    42e4:	1f 4f       	sbci	r17, 0xFF	; 255
    42e6:	ce 01       	movw	r24, r28
    42e8:	05 96       	adiw	r24, 0x05	; 5
    42ea:	b8 01       	movw	r22, r16
    42ec:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    42f0:	8a 89       	ldd	r24, Y+18	; 0x12
    42f2:	91 e0       	ldi	r25, 0x01	; 1
    42f4:	89 27       	eor	r24, r25
    42f6:	8a 8b       	std	Y+18, r24	; 0x12
    42f8:	c7 01       	movw	r24, r14
    42fa:	b8 01       	movw	r22, r16
    42fc:	ae 01       	movw	r20, r28
    42fe:	47 5e       	subi	r20, 0xE7	; 231
    4300:	5f 4f       	sbci	r21, 0xFF	; 255
    4302:	0e 94 0c 20 	call	0x4018	; 0x4018 <_fpadd_parts>
    4306:	0e 94 66 25 	call	0x4acc	; 0x4acc <__pack_f>
    430a:	a0 96       	adiw	r28, 0x20	; 32
    430c:	e6 e0       	ldi	r30, 0x06	; 6
    430e:	0c 94 48 27 	jmp	0x4e90	; 0x4e90 <__epilogue_restores__+0x18>

00004312 <__addsf3>:
    4312:	a0 e2       	ldi	r26, 0x20	; 32
    4314:	b0 e0       	ldi	r27, 0x00	; 0
    4316:	ef e8       	ldi	r30, 0x8F	; 143
    4318:	f1 e2       	ldi	r31, 0x21	; 33
    431a:	0c 94 2c 27 	jmp	0x4e58	; 0x4e58 <__prologue_saves__+0x18>
    431e:	69 83       	std	Y+1, r22	; 0x01
    4320:	7a 83       	std	Y+2, r23	; 0x02
    4322:	8b 83       	std	Y+3, r24	; 0x03
    4324:	9c 83       	std	Y+4, r25	; 0x04
    4326:	2d 83       	std	Y+5, r18	; 0x05
    4328:	3e 83       	std	Y+6, r19	; 0x06
    432a:	4f 83       	std	Y+7, r20	; 0x07
    432c:	58 87       	std	Y+8, r21	; 0x08
    432e:	f9 e0       	ldi	r31, 0x09	; 9
    4330:	ef 2e       	mov	r14, r31
    4332:	f1 2c       	mov	r15, r1
    4334:	ec 0e       	add	r14, r28
    4336:	fd 1e       	adc	r15, r29
    4338:	ce 01       	movw	r24, r28
    433a:	01 96       	adiw	r24, 0x01	; 1
    433c:	b7 01       	movw	r22, r14
    433e:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    4342:	8e 01       	movw	r16, r28
    4344:	0f 5e       	subi	r16, 0xEF	; 239
    4346:	1f 4f       	sbci	r17, 0xFF	; 255
    4348:	ce 01       	movw	r24, r28
    434a:	05 96       	adiw	r24, 0x05	; 5
    434c:	b8 01       	movw	r22, r16
    434e:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    4352:	c7 01       	movw	r24, r14
    4354:	b8 01       	movw	r22, r16
    4356:	ae 01       	movw	r20, r28
    4358:	47 5e       	subi	r20, 0xE7	; 231
    435a:	5f 4f       	sbci	r21, 0xFF	; 255
    435c:	0e 94 0c 20 	call	0x4018	; 0x4018 <_fpadd_parts>
    4360:	0e 94 66 25 	call	0x4acc	; 0x4acc <__pack_f>
    4364:	a0 96       	adiw	r28, 0x20	; 32
    4366:	e6 e0       	ldi	r30, 0x06	; 6
    4368:	0c 94 48 27 	jmp	0x4e90	; 0x4e90 <__epilogue_restores__+0x18>

0000436c <__mulsf3>:
    436c:	a0 e2       	ldi	r26, 0x20	; 32
    436e:	b0 e0       	ldi	r27, 0x00	; 0
    4370:	ec eb       	ldi	r30, 0xBC	; 188
    4372:	f1 e2       	ldi	r31, 0x21	; 33
    4374:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__prologue_saves__>
    4378:	69 83       	std	Y+1, r22	; 0x01
    437a:	7a 83       	std	Y+2, r23	; 0x02
    437c:	8b 83       	std	Y+3, r24	; 0x03
    437e:	9c 83       	std	Y+4, r25	; 0x04
    4380:	2d 83       	std	Y+5, r18	; 0x05
    4382:	3e 83       	std	Y+6, r19	; 0x06
    4384:	4f 83       	std	Y+7, r20	; 0x07
    4386:	58 87       	std	Y+8, r21	; 0x08
    4388:	ce 01       	movw	r24, r28
    438a:	01 96       	adiw	r24, 0x01	; 1
    438c:	be 01       	movw	r22, r28
    438e:	67 5f       	subi	r22, 0xF7	; 247
    4390:	7f 4f       	sbci	r23, 0xFF	; 255
    4392:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    4396:	ce 01       	movw	r24, r28
    4398:	05 96       	adiw	r24, 0x05	; 5
    439a:	be 01       	movw	r22, r28
    439c:	6f 5e       	subi	r22, 0xEF	; 239
    439e:	7f 4f       	sbci	r23, 0xFF	; 255
    43a0:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    43a4:	99 85       	ldd	r25, Y+9	; 0x09
    43a6:	92 30       	cpi	r25, 0x02	; 2
    43a8:	88 f0       	brcs	.+34     	; 0x43cc <__mulsf3+0x60>
    43aa:	89 89       	ldd	r24, Y+17	; 0x11
    43ac:	82 30       	cpi	r24, 0x02	; 2
    43ae:	c8 f0       	brcs	.+50     	; 0x43e2 <__mulsf3+0x76>
    43b0:	94 30       	cpi	r25, 0x04	; 4
    43b2:	19 f4       	brne	.+6      	; 0x43ba <__mulsf3+0x4e>
    43b4:	82 30       	cpi	r24, 0x02	; 2
    43b6:	51 f4       	brne	.+20     	; 0x43cc <__mulsf3+0x60>
    43b8:	04 c0       	rjmp	.+8      	; 0x43c2 <__mulsf3+0x56>
    43ba:	84 30       	cpi	r24, 0x04	; 4
    43bc:	29 f4       	brne	.+10     	; 0x43c8 <__mulsf3+0x5c>
    43be:	92 30       	cpi	r25, 0x02	; 2
    43c0:	81 f4       	brne	.+32     	; 0x43e2 <__mulsf3+0x76>
    43c2:	81 e7       	ldi	r24, 0x71	; 113
    43c4:	92 e0       	ldi	r25, 0x02	; 2
    43c6:	c6 c0       	rjmp	.+396    	; 0x4554 <__mulsf3+0x1e8>
    43c8:	92 30       	cpi	r25, 0x02	; 2
    43ca:	49 f4       	brne	.+18     	; 0x43de <__mulsf3+0x72>
    43cc:	20 e0       	ldi	r18, 0x00	; 0
    43ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d0:	8a 89       	ldd	r24, Y+18	; 0x12
    43d2:	98 13       	cpse	r25, r24
    43d4:	21 e0       	ldi	r18, 0x01	; 1
    43d6:	2a 87       	std	Y+10, r18	; 0x0a
    43d8:	ce 01       	movw	r24, r28
    43da:	09 96       	adiw	r24, 0x09	; 9
    43dc:	bb c0       	rjmp	.+374    	; 0x4554 <__mulsf3+0x1e8>
    43de:	82 30       	cpi	r24, 0x02	; 2
    43e0:	49 f4       	brne	.+18     	; 0x43f4 <__mulsf3+0x88>
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e6:	8a 89       	ldd	r24, Y+18	; 0x12
    43e8:	98 13       	cpse	r25, r24
    43ea:	21 e0       	ldi	r18, 0x01	; 1
    43ec:	2a 8b       	std	Y+18, r18	; 0x12
    43ee:	ce 01       	movw	r24, r28
    43f0:	41 96       	adiw	r24, 0x11	; 17
    43f2:	b0 c0       	rjmp	.+352    	; 0x4554 <__mulsf3+0x1e8>
    43f4:	2d 84       	ldd	r2, Y+13	; 0x0d
    43f6:	3e 84       	ldd	r3, Y+14	; 0x0e
    43f8:	4f 84       	ldd	r4, Y+15	; 0x0f
    43fa:	58 88       	ldd	r5, Y+16	; 0x10
    43fc:	6d 88       	ldd	r6, Y+21	; 0x15
    43fe:	7e 88       	ldd	r7, Y+22	; 0x16
    4400:	8f 88       	ldd	r8, Y+23	; 0x17
    4402:	98 8c       	ldd	r9, Y+24	; 0x18
    4404:	ee 24       	eor	r14, r14
    4406:	ff 24       	eor	r15, r15
    4408:	87 01       	movw	r16, r14
    440a:	aa 24       	eor	r10, r10
    440c:	bb 24       	eor	r11, r11
    440e:	65 01       	movw	r12, r10
    4410:	40 e0       	ldi	r20, 0x00	; 0
    4412:	50 e0       	ldi	r21, 0x00	; 0
    4414:	60 e0       	ldi	r22, 0x00	; 0
    4416:	70 e0       	ldi	r23, 0x00	; 0
    4418:	e0 e0       	ldi	r30, 0x00	; 0
    441a:	f0 e0       	ldi	r31, 0x00	; 0
    441c:	c1 01       	movw	r24, r2
    441e:	81 70       	andi	r24, 0x01	; 1
    4420:	90 70       	andi	r25, 0x00	; 0
    4422:	89 2b       	or	r24, r25
    4424:	e9 f0       	breq	.+58     	; 0x4460 <__mulsf3+0xf4>
    4426:	e6 0c       	add	r14, r6
    4428:	f7 1c       	adc	r15, r7
    442a:	08 1d       	adc	r16, r8
    442c:	19 1d       	adc	r17, r9
    442e:	9a 01       	movw	r18, r20
    4430:	ab 01       	movw	r20, r22
    4432:	2a 0d       	add	r18, r10
    4434:	3b 1d       	adc	r19, r11
    4436:	4c 1d       	adc	r20, r12
    4438:	5d 1d       	adc	r21, r13
    443a:	80 e0       	ldi	r24, 0x00	; 0
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	a0 e0       	ldi	r26, 0x00	; 0
    4440:	b0 e0       	ldi	r27, 0x00	; 0
    4442:	e6 14       	cp	r14, r6
    4444:	f7 04       	cpc	r15, r7
    4446:	08 05       	cpc	r16, r8
    4448:	19 05       	cpc	r17, r9
    444a:	20 f4       	brcc	.+8      	; 0x4454 <__mulsf3+0xe8>
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	a0 e0       	ldi	r26, 0x00	; 0
    4452:	b0 e0       	ldi	r27, 0x00	; 0
    4454:	ba 01       	movw	r22, r20
    4456:	a9 01       	movw	r20, r18
    4458:	48 0f       	add	r20, r24
    445a:	59 1f       	adc	r21, r25
    445c:	6a 1f       	adc	r22, r26
    445e:	7b 1f       	adc	r23, r27
    4460:	aa 0c       	add	r10, r10
    4462:	bb 1c       	adc	r11, r11
    4464:	cc 1c       	adc	r12, r12
    4466:	dd 1c       	adc	r13, r13
    4468:	97 fe       	sbrs	r9, 7
    446a:	08 c0       	rjmp	.+16     	; 0x447c <__mulsf3+0x110>
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	a0 e0       	ldi	r26, 0x00	; 0
    4472:	b0 e0       	ldi	r27, 0x00	; 0
    4474:	a8 2a       	or	r10, r24
    4476:	b9 2a       	or	r11, r25
    4478:	ca 2a       	or	r12, r26
    447a:	db 2a       	or	r13, r27
    447c:	31 96       	adiw	r30, 0x01	; 1
    447e:	e0 32       	cpi	r30, 0x20	; 32
    4480:	f1 05       	cpc	r31, r1
    4482:	49 f0       	breq	.+18     	; 0x4496 <__mulsf3+0x12a>
    4484:	66 0c       	add	r6, r6
    4486:	77 1c       	adc	r7, r7
    4488:	88 1c       	adc	r8, r8
    448a:	99 1c       	adc	r9, r9
    448c:	56 94       	lsr	r5
    448e:	47 94       	ror	r4
    4490:	37 94       	ror	r3
    4492:	27 94       	ror	r2
    4494:	c3 cf       	rjmp	.-122    	; 0x441c <__mulsf3+0xb0>
    4496:	fa 85       	ldd	r31, Y+10	; 0x0a
    4498:	ea 89       	ldd	r30, Y+18	; 0x12
    449a:	2b 89       	ldd	r18, Y+19	; 0x13
    449c:	3c 89       	ldd	r19, Y+20	; 0x14
    449e:	8b 85       	ldd	r24, Y+11	; 0x0b
    44a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    44a2:	28 0f       	add	r18, r24
    44a4:	39 1f       	adc	r19, r25
    44a6:	2e 5f       	subi	r18, 0xFE	; 254
    44a8:	3f 4f       	sbci	r19, 0xFF	; 255
    44aa:	17 c0       	rjmp	.+46     	; 0x44da <__mulsf3+0x16e>
    44ac:	ca 01       	movw	r24, r20
    44ae:	81 70       	andi	r24, 0x01	; 1
    44b0:	90 70       	andi	r25, 0x00	; 0
    44b2:	89 2b       	or	r24, r25
    44b4:	61 f0       	breq	.+24     	; 0x44ce <__mulsf3+0x162>
    44b6:	16 95       	lsr	r17
    44b8:	07 95       	ror	r16
    44ba:	f7 94       	ror	r15
    44bc:	e7 94       	ror	r14
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	a0 e0       	ldi	r26, 0x00	; 0
    44c4:	b0 e8       	ldi	r27, 0x80	; 128
    44c6:	e8 2a       	or	r14, r24
    44c8:	f9 2a       	or	r15, r25
    44ca:	0a 2b       	or	r16, r26
    44cc:	1b 2b       	or	r17, r27
    44ce:	76 95       	lsr	r23
    44d0:	67 95       	ror	r22
    44d2:	57 95       	ror	r21
    44d4:	47 95       	ror	r20
    44d6:	2f 5f       	subi	r18, 0xFF	; 255
    44d8:	3f 4f       	sbci	r19, 0xFF	; 255
    44da:	77 fd       	sbrc	r23, 7
    44dc:	e7 cf       	rjmp	.-50     	; 0x44ac <__mulsf3+0x140>
    44de:	0c c0       	rjmp	.+24     	; 0x44f8 <__mulsf3+0x18c>
    44e0:	44 0f       	add	r20, r20
    44e2:	55 1f       	adc	r21, r21
    44e4:	66 1f       	adc	r22, r22
    44e6:	77 1f       	adc	r23, r23
    44e8:	17 fd       	sbrc	r17, 7
    44ea:	41 60       	ori	r20, 0x01	; 1
    44ec:	ee 0c       	add	r14, r14
    44ee:	ff 1c       	adc	r15, r15
    44f0:	00 1f       	adc	r16, r16
    44f2:	11 1f       	adc	r17, r17
    44f4:	21 50       	subi	r18, 0x01	; 1
    44f6:	30 40       	sbci	r19, 0x00	; 0
    44f8:	40 30       	cpi	r20, 0x00	; 0
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	59 07       	cpc	r21, r25
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	69 07       	cpc	r22, r25
    4502:	90 e4       	ldi	r25, 0x40	; 64
    4504:	79 07       	cpc	r23, r25
    4506:	60 f3       	brcs	.-40     	; 0x44e0 <__mulsf3+0x174>
    4508:	2b 8f       	std	Y+27, r18	; 0x1b
    450a:	3c 8f       	std	Y+28, r19	; 0x1c
    450c:	db 01       	movw	r26, r22
    450e:	ca 01       	movw	r24, r20
    4510:	8f 77       	andi	r24, 0x7F	; 127
    4512:	90 70       	andi	r25, 0x00	; 0
    4514:	a0 70       	andi	r26, 0x00	; 0
    4516:	b0 70       	andi	r27, 0x00	; 0
    4518:	80 34       	cpi	r24, 0x40	; 64
    451a:	91 05       	cpc	r25, r1
    451c:	a1 05       	cpc	r26, r1
    451e:	b1 05       	cpc	r27, r1
    4520:	61 f4       	brne	.+24     	; 0x453a <__mulsf3+0x1ce>
    4522:	47 fd       	sbrc	r20, 7
    4524:	0a c0       	rjmp	.+20     	; 0x453a <__mulsf3+0x1ce>
    4526:	e1 14       	cp	r14, r1
    4528:	f1 04       	cpc	r15, r1
    452a:	01 05       	cpc	r16, r1
    452c:	11 05       	cpc	r17, r1
    452e:	29 f0       	breq	.+10     	; 0x453a <__mulsf3+0x1ce>
    4530:	40 5c       	subi	r20, 0xC0	; 192
    4532:	5f 4f       	sbci	r21, 0xFF	; 255
    4534:	6f 4f       	sbci	r22, 0xFF	; 255
    4536:	7f 4f       	sbci	r23, 0xFF	; 255
    4538:	40 78       	andi	r20, 0x80	; 128
    453a:	1a 8e       	std	Y+26, r1	; 0x1a
    453c:	fe 17       	cp	r31, r30
    453e:	11 f0       	breq	.+4      	; 0x4544 <__mulsf3+0x1d8>
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	8a 8f       	std	Y+26, r24	; 0x1a
    4544:	4d 8f       	std	Y+29, r20	; 0x1d
    4546:	5e 8f       	std	Y+30, r21	; 0x1e
    4548:	6f 8f       	std	Y+31, r22	; 0x1f
    454a:	78 a3       	std	Y+32, r23	; 0x20
    454c:	83 e0       	ldi	r24, 0x03	; 3
    454e:	89 8f       	std	Y+25, r24	; 0x19
    4550:	ce 01       	movw	r24, r28
    4552:	49 96       	adiw	r24, 0x19	; 25
    4554:	0e 94 66 25 	call	0x4acc	; 0x4acc <__pack_f>
    4558:	a0 96       	adiw	r28, 0x20	; 32
    455a:	e2 e1       	ldi	r30, 0x12	; 18
    455c:	0c 94 3c 27 	jmp	0x4e78	; 0x4e78 <__epilogue_restores__>

00004560 <__divsf3>:
    4560:	a8 e1       	ldi	r26, 0x18	; 24
    4562:	b0 e0       	ldi	r27, 0x00	; 0
    4564:	e6 eb       	ldi	r30, 0xB6	; 182
    4566:	f2 e2       	ldi	r31, 0x22	; 34
    4568:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__prologue_saves__+0x10>
    456c:	69 83       	std	Y+1, r22	; 0x01
    456e:	7a 83       	std	Y+2, r23	; 0x02
    4570:	8b 83       	std	Y+3, r24	; 0x03
    4572:	9c 83       	std	Y+4, r25	; 0x04
    4574:	2d 83       	std	Y+5, r18	; 0x05
    4576:	3e 83       	std	Y+6, r19	; 0x06
    4578:	4f 83       	std	Y+7, r20	; 0x07
    457a:	58 87       	std	Y+8, r21	; 0x08
    457c:	b9 e0       	ldi	r27, 0x09	; 9
    457e:	eb 2e       	mov	r14, r27
    4580:	f1 2c       	mov	r15, r1
    4582:	ec 0e       	add	r14, r28
    4584:	fd 1e       	adc	r15, r29
    4586:	ce 01       	movw	r24, r28
    4588:	01 96       	adiw	r24, 0x01	; 1
    458a:	b7 01       	movw	r22, r14
    458c:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    4590:	8e 01       	movw	r16, r28
    4592:	0f 5e       	subi	r16, 0xEF	; 239
    4594:	1f 4f       	sbci	r17, 0xFF	; 255
    4596:	ce 01       	movw	r24, r28
    4598:	05 96       	adiw	r24, 0x05	; 5
    459a:	b8 01       	movw	r22, r16
    459c:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    45a0:	29 85       	ldd	r18, Y+9	; 0x09
    45a2:	22 30       	cpi	r18, 0x02	; 2
    45a4:	08 f4       	brcc	.+2      	; 0x45a8 <__divsf3+0x48>
    45a6:	7e c0       	rjmp	.+252    	; 0x46a4 <__divsf3+0x144>
    45a8:	39 89       	ldd	r19, Y+17	; 0x11
    45aa:	32 30       	cpi	r19, 0x02	; 2
    45ac:	10 f4       	brcc	.+4      	; 0x45b2 <__divsf3+0x52>
    45ae:	b8 01       	movw	r22, r16
    45b0:	7c c0       	rjmp	.+248    	; 0x46aa <__divsf3+0x14a>
    45b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    45b4:	9a 89       	ldd	r25, Y+18	; 0x12
    45b6:	89 27       	eor	r24, r25
    45b8:	8a 87       	std	Y+10, r24	; 0x0a
    45ba:	24 30       	cpi	r18, 0x04	; 4
    45bc:	11 f0       	breq	.+4      	; 0x45c2 <__divsf3+0x62>
    45be:	22 30       	cpi	r18, 0x02	; 2
    45c0:	31 f4       	brne	.+12     	; 0x45ce <__divsf3+0x6e>
    45c2:	23 17       	cp	r18, r19
    45c4:	09 f0       	breq	.+2      	; 0x45c8 <__divsf3+0x68>
    45c6:	6e c0       	rjmp	.+220    	; 0x46a4 <__divsf3+0x144>
    45c8:	61 e7       	ldi	r22, 0x71	; 113
    45ca:	72 e0       	ldi	r23, 0x02	; 2
    45cc:	6e c0       	rjmp	.+220    	; 0x46aa <__divsf3+0x14a>
    45ce:	34 30       	cpi	r19, 0x04	; 4
    45d0:	39 f4       	brne	.+14     	; 0x45e0 <__divsf3+0x80>
    45d2:	1d 86       	std	Y+13, r1	; 0x0d
    45d4:	1e 86       	std	Y+14, r1	; 0x0e
    45d6:	1f 86       	std	Y+15, r1	; 0x0f
    45d8:	18 8a       	std	Y+16, r1	; 0x10
    45da:	1c 86       	std	Y+12, r1	; 0x0c
    45dc:	1b 86       	std	Y+11, r1	; 0x0b
    45de:	04 c0       	rjmp	.+8      	; 0x45e8 <__divsf3+0x88>
    45e0:	32 30       	cpi	r19, 0x02	; 2
    45e2:	21 f4       	brne	.+8      	; 0x45ec <__divsf3+0x8c>
    45e4:	84 e0       	ldi	r24, 0x04	; 4
    45e6:	89 87       	std	Y+9, r24	; 0x09
    45e8:	b7 01       	movw	r22, r14
    45ea:	5f c0       	rjmp	.+190    	; 0x46aa <__divsf3+0x14a>
    45ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    45ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    45f0:	8b 89       	ldd	r24, Y+19	; 0x13
    45f2:	9c 89       	ldd	r25, Y+20	; 0x14
    45f4:	28 1b       	sub	r18, r24
    45f6:	39 0b       	sbc	r19, r25
    45f8:	3c 87       	std	Y+12, r19	; 0x0c
    45fa:	2b 87       	std	Y+11, r18	; 0x0b
    45fc:	ed 84       	ldd	r14, Y+13	; 0x0d
    45fe:	fe 84       	ldd	r15, Y+14	; 0x0e
    4600:	0f 85       	ldd	r16, Y+15	; 0x0f
    4602:	18 89       	ldd	r17, Y+16	; 0x10
    4604:	ad 88       	ldd	r10, Y+21	; 0x15
    4606:	be 88       	ldd	r11, Y+22	; 0x16
    4608:	cf 88       	ldd	r12, Y+23	; 0x17
    460a:	d8 8c       	ldd	r13, Y+24	; 0x18
    460c:	ea 14       	cp	r14, r10
    460e:	fb 04       	cpc	r15, r11
    4610:	0c 05       	cpc	r16, r12
    4612:	1d 05       	cpc	r17, r13
    4614:	40 f4       	brcc	.+16     	; 0x4626 <__divsf3+0xc6>
    4616:	ee 0c       	add	r14, r14
    4618:	ff 1c       	adc	r15, r15
    461a:	00 1f       	adc	r16, r16
    461c:	11 1f       	adc	r17, r17
    461e:	21 50       	subi	r18, 0x01	; 1
    4620:	30 40       	sbci	r19, 0x00	; 0
    4622:	3c 87       	std	Y+12, r19	; 0x0c
    4624:	2b 87       	std	Y+11, r18	; 0x0b
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e0       	ldi	r20, 0x00	; 0
    462c:	50 e0       	ldi	r21, 0x00	; 0
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	a0 e0       	ldi	r26, 0x00	; 0
    4634:	b0 e4       	ldi	r27, 0x40	; 64
    4636:	60 e0       	ldi	r22, 0x00	; 0
    4638:	70 e0       	ldi	r23, 0x00	; 0
    463a:	ea 14       	cp	r14, r10
    463c:	fb 04       	cpc	r15, r11
    463e:	0c 05       	cpc	r16, r12
    4640:	1d 05       	cpc	r17, r13
    4642:	40 f0       	brcs	.+16     	; 0x4654 <__divsf3+0xf4>
    4644:	28 2b       	or	r18, r24
    4646:	39 2b       	or	r19, r25
    4648:	4a 2b       	or	r20, r26
    464a:	5b 2b       	or	r21, r27
    464c:	ea 18       	sub	r14, r10
    464e:	fb 08       	sbc	r15, r11
    4650:	0c 09       	sbc	r16, r12
    4652:	1d 09       	sbc	r17, r13
    4654:	b6 95       	lsr	r27
    4656:	a7 95       	ror	r26
    4658:	97 95       	ror	r25
    465a:	87 95       	ror	r24
    465c:	ee 0c       	add	r14, r14
    465e:	ff 1c       	adc	r15, r15
    4660:	00 1f       	adc	r16, r16
    4662:	11 1f       	adc	r17, r17
    4664:	6f 5f       	subi	r22, 0xFF	; 255
    4666:	7f 4f       	sbci	r23, 0xFF	; 255
    4668:	6f 31       	cpi	r22, 0x1F	; 31
    466a:	71 05       	cpc	r23, r1
    466c:	31 f7       	brne	.-52     	; 0x463a <__divsf3+0xda>
    466e:	da 01       	movw	r26, r20
    4670:	c9 01       	movw	r24, r18
    4672:	8f 77       	andi	r24, 0x7F	; 127
    4674:	90 70       	andi	r25, 0x00	; 0
    4676:	a0 70       	andi	r26, 0x00	; 0
    4678:	b0 70       	andi	r27, 0x00	; 0
    467a:	80 34       	cpi	r24, 0x40	; 64
    467c:	91 05       	cpc	r25, r1
    467e:	a1 05       	cpc	r26, r1
    4680:	b1 05       	cpc	r27, r1
    4682:	61 f4       	brne	.+24     	; 0x469c <__divsf3+0x13c>
    4684:	27 fd       	sbrc	r18, 7
    4686:	0a c0       	rjmp	.+20     	; 0x469c <__divsf3+0x13c>
    4688:	e1 14       	cp	r14, r1
    468a:	f1 04       	cpc	r15, r1
    468c:	01 05       	cpc	r16, r1
    468e:	11 05       	cpc	r17, r1
    4690:	29 f0       	breq	.+10     	; 0x469c <__divsf3+0x13c>
    4692:	20 5c       	subi	r18, 0xC0	; 192
    4694:	3f 4f       	sbci	r19, 0xFF	; 255
    4696:	4f 4f       	sbci	r20, 0xFF	; 255
    4698:	5f 4f       	sbci	r21, 0xFF	; 255
    469a:	20 78       	andi	r18, 0x80	; 128
    469c:	2d 87       	std	Y+13, r18	; 0x0d
    469e:	3e 87       	std	Y+14, r19	; 0x0e
    46a0:	4f 87       	std	Y+15, r20	; 0x0f
    46a2:	58 8b       	std	Y+16, r21	; 0x10
    46a4:	be 01       	movw	r22, r28
    46a6:	67 5f       	subi	r22, 0xF7	; 247
    46a8:	7f 4f       	sbci	r23, 0xFF	; 255
    46aa:	cb 01       	movw	r24, r22
    46ac:	0e 94 66 25 	call	0x4acc	; 0x4acc <__pack_f>
    46b0:	68 96       	adiw	r28, 0x18	; 24
    46b2:	ea e0       	ldi	r30, 0x0A	; 10
    46b4:	0c 94 44 27 	jmp	0x4e88	; 0x4e88 <__epilogue_restores__+0x10>

000046b8 <__gtsf2>:
    46b8:	a8 e1       	ldi	r26, 0x18	; 24
    46ba:	b0 e0       	ldi	r27, 0x00	; 0
    46bc:	e2 e6       	ldi	r30, 0x62	; 98
    46be:	f3 e2       	ldi	r31, 0x23	; 35
    46c0:	0c 94 2c 27 	jmp	0x4e58	; 0x4e58 <__prologue_saves__+0x18>
    46c4:	69 83       	std	Y+1, r22	; 0x01
    46c6:	7a 83       	std	Y+2, r23	; 0x02
    46c8:	8b 83       	std	Y+3, r24	; 0x03
    46ca:	9c 83       	std	Y+4, r25	; 0x04
    46cc:	2d 83       	std	Y+5, r18	; 0x05
    46ce:	3e 83       	std	Y+6, r19	; 0x06
    46d0:	4f 83       	std	Y+7, r20	; 0x07
    46d2:	58 87       	std	Y+8, r21	; 0x08
    46d4:	89 e0       	ldi	r24, 0x09	; 9
    46d6:	e8 2e       	mov	r14, r24
    46d8:	f1 2c       	mov	r15, r1
    46da:	ec 0e       	add	r14, r28
    46dc:	fd 1e       	adc	r15, r29
    46de:	ce 01       	movw	r24, r28
    46e0:	01 96       	adiw	r24, 0x01	; 1
    46e2:	b7 01       	movw	r22, r14
    46e4:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    46e8:	8e 01       	movw	r16, r28
    46ea:	0f 5e       	subi	r16, 0xEF	; 239
    46ec:	1f 4f       	sbci	r17, 0xFF	; 255
    46ee:	ce 01       	movw	r24, r28
    46f0:	05 96       	adiw	r24, 0x05	; 5
    46f2:	b8 01       	movw	r22, r16
    46f4:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    46f8:	89 85       	ldd	r24, Y+9	; 0x09
    46fa:	82 30       	cpi	r24, 0x02	; 2
    46fc:	40 f0       	brcs	.+16     	; 0x470e <__gtsf2+0x56>
    46fe:	89 89       	ldd	r24, Y+17	; 0x11
    4700:	82 30       	cpi	r24, 0x02	; 2
    4702:	28 f0       	brcs	.+10     	; 0x470e <__gtsf2+0x56>
    4704:	c7 01       	movw	r24, r14
    4706:	b8 01       	movw	r22, r16
    4708:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <__fpcmp_parts_f>
    470c:	01 c0       	rjmp	.+2      	; 0x4710 <__gtsf2+0x58>
    470e:	8f ef       	ldi	r24, 0xFF	; 255
    4710:	68 96       	adiw	r28, 0x18	; 24
    4712:	e6 e0       	ldi	r30, 0x06	; 6
    4714:	0c 94 48 27 	jmp	0x4e90	; 0x4e90 <__epilogue_restores__+0x18>

00004718 <__gesf2>:
    4718:	a8 e1       	ldi	r26, 0x18	; 24
    471a:	b0 e0       	ldi	r27, 0x00	; 0
    471c:	e2 e9       	ldi	r30, 0x92	; 146
    471e:	f3 e2       	ldi	r31, 0x23	; 35
    4720:	0c 94 2c 27 	jmp	0x4e58	; 0x4e58 <__prologue_saves__+0x18>
    4724:	69 83       	std	Y+1, r22	; 0x01
    4726:	7a 83       	std	Y+2, r23	; 0x02
    4728:	8b 83       	std	Y+3, r24	; 0x03
    472a:	9c 83       	std	Y+4, r25	; 0x04
    472c:	2d 83       	std	Y+5, r18	; 0x05
    472e:	3e 83       	std	Y+6, r19	; 0x06
    4730:	4f 83       	std	Y+7, r20	; 0x07
    4732:	58 87       	std	Y+8, r21	; 0x08
    4734:	89 e0       	ldi	r24, 0x09	; 9
    4736:	e8 2e       	mov	r14, r24
    4738:	f1 2c       	mov	r15, r1
    473a:	ec 0e       	add	r14, r28
    473c:	fd 1e       	adc	r15, r29
    473e:	ce 01       	movw	r24, r28
    4740:	01 96       	adiw	r24, 0x01	; 1
    4742:	b7 01       	movw	r22, r14
    4744:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    4748:	8e 01       	movw	r16, r28
    474a:	0f 5e       	subi	r16, 0xEF	; 239
    474c:	1f 4f       	sbci	r17, 0xFF	; 255
    474e:	ce 01       	movw	r24, r28
    4750:	05 96       	adiw	r24, 0x05	; 5
    4752:	b8 01       	movw	r22, r16
    4754:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    4758:	89 85       	ldd	r24, Y+9	; 0x09
    475a:	82 30       	cpi	r24, 0x02	; 2
    475c:	40 f0       	brcs	.+16     	; 0x476e <__gesf2+0x56>
    475e:	89 89       	ldd	r24, Y+17	; 0x11
    4760:	82 30       	cpi	r24, 0x02	; 2
    4762:	28 f0       	brcs	.+10     	; 0x476e <__gesf2+0x56>
    4764:	c7 01       	movw	r24, r14
    4766:	b8 01       	movw	r22, r16
    4768:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <__fpcmp_parts_f>
    476c:	01 c0       	rjmp	.+2      	; 0x4770 <__gesf2+0x58>
    476e:	8f ef       	ldi	r24, 0xFF	; 255
    4770:	68 96       	adiw	r28, 0x18	; 24
    4772:	e6 e0       	ldi	r30, 0x06	; 6
    4774:	0c 94 48 27 	jmp	0x4e90	; 0x4e90 <__epilogue_restores__+0x18>

00004778 <__ltsf2>:
    4778:	a8 e1       	ldi	r26, 0x18	; 24
    477a:	b0 e0       	ldi	r27, 0x00	; 0
    477c:	e2 ec       	ldi	r30, 0xC2	; 194
    477e:	f3 e2       	ldi	r31, 0x23	; 35
    4780:	0c 94 2c 27 	jmp	0x4e58	; 0x4e58 <__prologue_saves__+0x18>
    4784:	69 83       	std	Y+1, r22	; 0x01
    4786:	7a 83       	std	Y+2, r23	; 0x02
    4788:	8b 83       	std	Y+3, r24	; 0x03
    478a:	9c 83       	std	Y+4, r25	; 0x04
    478c:	2d 83       	std	Y+5, r18	; 0x05
    478e:	3e 83       	std	Y+6, r19	; 0x06
    4790:	4f 83       	std	Y+7, r20	; 0x07
    4792:	58 87       	std	Y+8, r21	; 0x08
    4794:	89 e0       	ldi	r24, 0x09	; 9
    4796:	e8 2e       	mov	r14, r24
    4798:	f1 2c       	mov	r15, r1
    479a:	ec 0e       	add	r14, r28
    479c:	fd 1e       	adc	r15, r29
    479e:	ce 01       	movw	r24, r28
    47a0:	01 96       	adiw	r24, 0x01	; 1
    47a2:	b7 01       	movw	r22, r14
    47a4:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    47a8:	8e 01       	movw	r16, r28
    47aa:	0f 5e       	subi	r16, 0xEF	; 239
    47ac:	1f 4f       	sbci	r17, 0xFF	; 255
    47ae:	ce 01       	movw	r24, r28
    47b0:	05 96       	adiw	r24, 0x05	; 5
    47b2:	b8 01       	movw	r22, r16
    47b4:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    47b8:	89 85       	ldd	r24, Y+9	; 0x09
    47ba:	82 30       	cpi	r24, 0x02	; 2
    47bc:	40 f0       	brcs	.+16     	; 0x47ce <__ltsf2+0x56>
    47be:	89 89       	ldd	r24, Y+17	; 0x11
    47c0:	82 30       	cpi	r24, 0x02	; 2
    47c2:	28 f0       	brcs	.+10     	; 0x47ce <__ltsf2+0x56>
    47c4:	c7 01       	movw	r24, r14
    47c6:	b8 01       	movw	r22, r16
    47c8:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <__fpcmp_parts_f>
    47cc:	01 c0       	rjmp	.+2      	; 0x47d0 <__ltsf2+0x58>
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	68 96       	adiw	r28, 0x18	; 24
    47d2:	e6 e0       	ldi	r30, 0x06	; 6
    47d4:	0c 94 48 27 	jmp	0x4e90	; 0x4e90 <__epilogue_restores__+0x18>

000047d8 <__floatsisf>:
    47d8:	a8 e0       	ldi	r26, 0x08	; 8
    47da:	b0 e0       	ldi	r27, 0x00	; 0
    47dc:	e2 ef       	ldi	r30, 0xF2	; 242
    47de:	f3 e2       	ldi	r31, 0x23	; 35
    47e0:	0c 94 29 27 	jmp	0x4e52	; 0x4e52 <__prologue_saves__+0x12>
    47e4:	9b 01       	movw	r18, r22
    47e6:	ac 01       	movw	r20, r24
    47e8:	83 e0       	ldi	r24, 0x03	; 3
    47ea:	89 83       	std	Y+1, r24	; 0x01
    47ec:	da 01       	movw	r26, r20
    47ee:	c9 01       	movw	r24, r18
    47f0:	88 27       	eor	r24, r24
    47f2:	b7 fd       	sbrc	r27, 7
    47f4:	83 95       	inc	r24
    47f6:	99 27       	eor	r25, r25
    47f8:	aa 27       	eor	r26, r26
    47fa:	bb 27       	eor	r27, r27
    47fc:	b8 2e       	mov	r11, r24
    47fe:	21 15       	cp	r18, r1
    4800:	31 05       	cpc	r19, r1
    4802:	41 05       	cpc	r20, r1
    4804:	51 05       	cpc	r21, r1
    4806:	19 f4       	brne	.+6      	; 0x480e <__floatsisf+0x36>
    4808:	82 e0       	ldi	r24, 0x02	; 2
    480a:	89 83       	std	Y+1, r24	; 0x01
    480c:	3a c0       	rjmp	.+116    	; 0x4882 <__floatsisf+0xaa>
    480e:	88 23       	and	r24, r24
    4810:	a9 f0       	breq	.+42     	; 0x483c <__floatsisf+0x64>
    4812:	20 30       	cpi	r18, 0x00	; 0
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	38 07       	cpc	r19, r24
    4818:	80 e0       	ldi	r24, 0x00	; 0
    481a:	48 07       	cpc	r20, r24
    481c:	80 e8       	ldi	r24, 0x80	; 128
    481e:	58 07       	cpc	r21, r24
    4820:	29 f4       	brne	.+10     	; 0x482c <__floatsisf+0x54>
    4822:	60 e0       	ldi	r22, 0x00	; 0
    4824:	70 e0       	ldi	r23, 0x00	; 0
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	9f ec       	ldi	r25, 0xCF	; 207
    482a:	30 c0       	rjmp	.+96     	; 0x488c <__floatsisf+0xb4>
    482c:	ee 24       	eor	r14, r14
    482e:	ff 24       	eor	r15, r15
    4830:	87 01       	movw	r16, r14
    4832:	e2 1a       	sub	r14, r18
    4834:	f3 0a       	sbc	r15, r19
    4836:	04 0b       	sbc	r16, r20
    4838:	15 0b       	sbc	r17, r21
    483a:	02 c0       	rjmp	.+4      	; 0x4840 <__floatsisf+0x68>
    483c:	79 01       	movw	r14, r18
    483e:	8a 01       	movw	r16, r20
    4840:	8e e1       	ldi	r24, 0x1E	; 30
    4842:	c8 2e       	mov	r12, r24
    4844:	d1 2c       	mov	r13, r1
    4846:	dc 82       	std	Y+4, r13	; 0x04
    4848:	cb 82       	std	Y+3, r12	; 0x03
    484a:	ed 82       	std	Y+5, r14	; 0x05
    484c:	fe 82       	std	Y+6, r15	; 0x06
    484e:	0f 83       	std	Y+7, r16	; 0x07
    4850:	18 87       	std	Y+8, r17	; 0x08
    4852:	c8 01       	movw	r24, r16
    4854:	b7 01       	movw	r22, r14
    4856:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <__clzsi2>
    485a:	01 97       	sbiw	r24, 0x01	; 1
    485c:	18 16       	cp	r1, r24
    485e:	19 06       	cpc	r1, r25
    4860:	84 f4       	brge	.+32     	; 0x4882 <__floatsisf+0xaa>
    4862:	08 2e       	mov	r0, r24
    4864:	04 c0       	rjmp	.+8      	; 0x486e <__floatsisf+0x96>
    4866:	ee 0c       	add	r14, r14
    4868:	ff 1c       	adc	r15, r15
    486a:	00 1f       	adc	r16, r16
    486c:	11 1f       	adc	r17, r17
    486e:	0a 94       	dec	r0
    4870:	d2 f7       	brpl	.-12     	; 0x4866 <__floatsisf+0x8e>
    4872:	ed 82       	std	Y+5, r14	; 0x05
    4874:	fe 82       	std	Y+6, r15	; 0x06
    4876:	0f 83       	std	Y+7, r16	; 0x07
    4878:	18 87       	std	Y+8, r17	; 0x08
    487a:	c8 1a       	sub	r12, r24
    487c:	d9 0a       	sbc	r13, r25
    487e:	dc 82       	std	Y+4, r13	; 0x04
    4880:	cb 82       	std	Y+3, r12	; 0x03
    4882:	ba 82       	std	Y+2, r11	; 0x02
    4884:	ce 01       	movw	r24, r28
    4886:	01 96       	adiw	r24, 0x01	; 1
    4888:	0e 94 66 25 	call	0x4acc	; 0x4acc <__pack_f>
    488c:	28 96       	adiw	r28, 0x08	; 8
    488e:	e9 e0       	ldi	r30, 0x09	; 9
    4890:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__epilogue_restores__+0x12>

00004894 <__fixsfsi>:
    4894:	ac e0       	ldi	r26, 0x0C	; 12
    4896:	b0 e0       	ldi	r27, 0x00	; 0
    4898:	e0 e5       	ldi	r30, 0x50	; 80
    489a:	f4 e2       	ldi	r31, 0x24	; 36
    489c:	0c 94 30 27 	jmp	0x4e60	; 0x4e60 <__prologue_saves__+0x20>
    48a0:	69 83       	std	Y+1, r22	; 0x01
    48a2:	7a 83       	std	Y+2, r23	; 0x02
    48a4:	8b 83       	std	Y+3, r24	; 0x03
    48a6:	9c 83       	std	Y+4, r25	; 0x04
    48a8:	ce 01       	movw	r24, r28
    48aa:	01 96       	adiw	r24, 0x01	; 1
    48ac:	be 01       	movw	r22, r28
    48ae:	6b 5f       	subi	r22, 0xFB	; 251
    48b0:	7f 4f       	sbci	r23, 0xFF	; 255
    48b2:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <__unpack_f>
    48b6:	8d 81       	ldd	r24, Y+5	; 0x05
    48b8:	82 30       	cpi	r24, 0x02	; 2
    48ba:	61 f1       	breq	.+88     	; 0x4914 <__fixsfsi+0x80>
    48bc:	82 30       	cpi	r24, 0x02	; 2
    48be:	50 f1       	brcs	.+84     	; 0x4914 <__fixsfsi+0x80>
    48c0:	84 30       	cpi	r24, 0x04	; 4
    48c2:	21 f4       	brne	.+8      	; 0x48cc <__fixsfsi+0x38>
    48c4:	8e 81       	ldd	r24, Y+6	; 0x06
    48c6:	88 23       	and	r24, r24
    48c8:	51 f1       	breq	.+84     	; 0x491e <__fixsfsi+0x8a>
    48ca:	2e c0       	rjmp	.+92     	; 0x4928 <__fixsfsi+0x94>
    48cc:	2f 81       	ldd	r18, Y+7	; 0x07
    48ce:	38 85       	ldd	r19, Y+8	; 0x08
    48d0:	37 fd       	sbrc	r19, 7
    48d2:	20 c0       	rjmp	.+64     	; 0x4914 <__fixsfsi+0x80>
    48d4:	6e 81       	ldd	r22, Y+6	; 0x06
    48d6:	2f 31       	cpi	r18, 0x1F	; 31
    48d8:	31 05       	cpc	r19, r1
    48da:	1c f0       	brlt	.+6      	; 0x48e2 <__fixsfsi+0x4e>
    48dc:	66 23       	and	r22, r22
    48de:	f9 f0       	breq	.+62     	; 0x491e <__fixsfsi+0x8a>
    48e0:	23 c0       	rjmp	.+70     	; 0x4928 <__fixsfsi+0x94>
    48e2:	8e e1       	ldi	r24, 0x1E	; 30
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	82 1b       	sub	r24, r18
    48e8:	93 0b       	sbc	r25, r19
    48ea:	29 85       	ldd	r18, Y+9	; 0x09
    48ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    48ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    48f0:	5c 85       	ldd	r21, Y+12	; 0x0c
    48f2:	04 c0       	rjmp	.+8      	; 0x48fc <__fixsfsi+0x68>
    48f4:	56 95       	lsr	r21
    48f6:	47 95       	ror	r20
    48f8:	37 95       	ror	r19
    48fa:	27 95       	ror	r18
    48fc:	8a 95       	dec	r24
    48fe:	d2 f7       	brpl	.-12     	; 0x48f4 <__fixsfsi+0x60>
    4900:	66 23       	and	r22, r22
    4902:	b1 f0       	breq	.+44     	; 0x4930 <__fixsfsi+0x9c>
    4904:	50 95       	com	r21
    4906:	40 95       	com	r20
    4908:	30 95       	com	r19
    490a:	21 95       	neg	r18
    490c:	3f 4f       	sbci	r19, 0xFF	; 255
    490e:	4f 4f       	sbci	r20, 0xFF	; 255
    4910:	5f 4f       	sbci	r21, 0xFF	; 255
    4912:	0e c0       	rjmp	.+28     	; 0x4930 <__fixsfsi+0x9c>
    4914:	20 e0       	ldi	r18, 0x00	; 0
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	40 e0       	ldi	r20, 0x00	; 0
    491a:	50 e0       	ldi	r21, 0x00	; 0
    491c:	09 c0       	rjmp	.+18     	; 0x4930 <__fixsfsi+0x9c>
    491e:	2f ef       	ldi	r18, 0xFF	; 255
    4920:	3f ef       	ldi	r19, 0xFF	; 255
    4922:	4f ef       	ldi	r20, 0xFF	; 255
    4924:	5f e7       	ldi	r21, 0x7F	; 127
    4926:	04 c0       	rjmp	.+8      	; 0x4930 <__fixsfsi+0x9c>
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	40 e0       	ldi	r20, 0x00	; 0
    492e:	50 e8       	ldi	r21, 0x80	; 128
    4930:	b9 01       	movw	r22, r18
    4932:	ca 01       	movw	r24, r20
    4934:	2c 96       	adiw	r28, 0x0c	; 12
    4936:	e2 e0       	ldi	r30, 0x02	; 2
    4938:	0c 94 4c 27 	jmp	0x4e98	; 0x4e98 <__epilogue_restores__+0x20>

0000493c <__floatunsisf>:
    493c:	a8 e0       	ldi	r26, 0x08	; 8
    493e:	b0 e0       	ldi	r27, 0x00	; 0
    4940:	e4 ea       	ldi	r30, 0xA4	; 164
    4942:	f4 e2       	ldi	r31, 0x24	; 36
    4944:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__prologue_saves__+0x10>
    4948:	7b 01       	movw	r14, r22
    494a:	8c 01       	movw	r16, r24
    494c:	61 15       	cp	r22, r1
    494e:	71 05       	cpc	r23, r1
    4950:	81 05       	cpc	r24, r1
    4952:	91 05       	cpc	r25, r1
    4954:	19 f4       	brne	.+6      	; 0x495c <__floatunsisf+0x20>
    4956:	82 e0       	ldi	r24, 0x02	; 2
    4958:	89 83       	std	Y+1, r24	; 0x01
    495a:	60 c0       	rjmp	.+192    	; 0x4a1c <__floatunsisf+0xe0>
    495c:	83 e0       	ldi	r24, 0x03	; 3
    495e:	89 83       	std	Y+1, r24	; 0x01
    4960:	8e e1       	ldi	r24, 0x1E	; 30
    4962:	c8 2e       	mov	r12, r24
    4964:	d1 2c       	mov	r13, r1
    4966:	dc 82       	std	Y+4, r13	; 0x04
    4968:	cb 82       	std	Y+3, r12	; 0x03
    496a:	ed 82       	std	Y+5, r14	; 0x05
    496c:	fe 82       	std	Y+6, r15	; 0x06
    496e:	0f 83       	std	Y+7, r16	; 0x07
    4970:	18 87       	std	Y+8, r17	; 0x08
    4972:	c8 01       	movw	r24, r16
    4974:	b7 01       	movw	r22, r14
    4976:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <__clzsi2>
    497a:	fc 01       	movw	r30, r24
    497c:	31 97       	sbiw	r30, 0x01	; 1
    497e:	f7 ff       	sbrs	r31, 7
    4980:	3b c0       	rjmp	.+118    	; 0x49f8 <__floatunsisf+0xbc>
    4982:	22 27       	eor	r18, r18
    4984:	33 27       	eor	r19, r19
    4986:	2e 1b       	sub	r18, r30
    4988:	3f 0b       	sbc	r19, r31
    498a:	57 01       	movw	r10, r14
    498c:	68 01       	movw	r12, r16
    498e:	02 2e       	mov	r0, r18
    4990:	04 c0       	rjmp	.+8      	; 0x499a <__floatunsisf+0x5e>
    4992:	d6 94       	lsr	r13
    4994:	c7 94       	ror	r12
    4996:	b7 94       	ror	r11
    4998:	a7 94       	ror	r10
    499a:	0a 94       	dec	r0
    499c:	d2 f7       	brpl	.-12     	; 0x4992 <__floatunsisf+0x56>
    499e:	40 e0       	ldi	r20, 0x00	; 0
    49a0:	50 e0       	ldi	r21, 0x00	; 0
    49a2:	60 e0       	ldi	r22, 0x00	; 0
    49a4:	70 e0       	ldi	r23, 0x00	; 0
    49a6:	81 e0       	ldi	r24, 0x01	; 1
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	a0 e0       	ldi	r26, 0x00	; 0
    49ac:	b0 e0       	ldi	r27, 0x00	; 0
    49ae:	04 c0       	rjmp	.+8      	; 0x49b8 <__floatunsisf+0x7c>
    49b0:	88 0f       	add	r24, r24
    49b2:	99 1f       	adc	r25, r25
    49b4:	aa 1f       	adc	r26, r26
    49b6:	bb 1f       	adc	r27, r27
    49b8:	2a 95       	dec	r18
    49ba:	d2 f7       	brpl	.-12     	; 0x49b0 <__floatunsisf+0x74>
    49bc:	01 97       	sbiw	r24, 0x01	; 1
    49be:	a1 09       	sbc	r26, r1
    49c0:	b1 09       	sbc	r27, r1
    49c2:	8e 21       	and	r24, r14
    49c4:	9f 21       	and	r25, r15
    49c6:	a0 23       	and	r26, r16
    49c8:	b1 23       	and	r27, r17
    49ca:	00 97       	sbiw	r24, 0x00	; 0
    49cc:	a1 05       	cpc	r26, r1
    49ce:	b1 05       	cpc	r27, r1
    49d0:	21 f0       	breq	.+8      	; 0x49da <__floatunsisf+0x9e>
    49d2:	41 e0       	ldi	r20, 0x01	; 1
    49d4:	50 e0       	ldi	r21, 0x00	; 0
    49d6:	60 e0       	ldi	r22, 0x00	; 0
    49d8:	70 e0       	ldi	r23, 0x00	; 0
    49da:	4a 29       	or	r20, r10
    49dc:	5b 29       	or	r21, r11
    49de:	6c 29       	or	r22, r12
    49e0:	7d 29       	or	r23, r13
    49e2:	4d 83       	std	Y+5, r20	; 0x05
    49e4:	5e 83       	std	Y+6, r21	; 0x06
    49e6:	6f 83       	std	Y+7, r22	; 0x07
    49e8:	78 87       	std	Y+8, r23	; 0x08
    49ea:	8e e1       	ldi	r24, 0x1E	; 30
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	8e 1b       	sub	r24, r30
    49f0:	9f 0b       	sbc	r25, r31
    49f2:	9c 83       	std	Y+4, r25	; 0x04
    49f4:	8b 83       	std	Y+3, r24	; 0x03
    49f6:	12 c0       	rjmp	.+36     	; 0x4a1c <__floatunsisf+0xe0>
    49f8:	30 97       	sbiw	r30, 0x00	; 0
    49fa:	81 f0       	breq	.+32     	; 0x4a1c <__floatunsisf+0xe0>
    49fc:	0e 2e       	mov	r0, r30
    49fe:	04 c0       	rjmp	.+8      	; 0x4a08 <__floatunsisf+0xcc>
    4a00:	ee 0c       	add	r14, r14
    4a02:	ff 1c       	adc	r15, r15
    4a04:	00 1f       	adc	r16, r16
    4a06:	11 1f       	adc	r17, r17
    4a08:	0a 94       	dec	r0
    4a0a:	d2 f7       	brpl	.-12     	; 0x4a00 <__floatunsisf+0xc4>
    4a0c:	ed 82       	std	Y+5, r14	; 0x05
    4a0e:	fe 82       	std	Y+6, r15	; 0x06
    4a10:	0f 83       	std	Y+7, r16	; 0x07
    4a12:	18 87       	std	Y+8, r17	; 0x08
    4a14:	ce 1a       	sub	r12, r30
    4a16:	df 0a       	sbc	r13, r31
    4a18:	dc 82       	std	Y+4, r13	; 0x04
    4a1a:	cb 82       	std	Y+3, r12	; 0x03
    4a1c:	1a 82       	std	Y+2, r1	; 0x02
    4a1e:	ce 01       	movw	r24, r28
    4a20:	01 96       	adiw	r24, 0x01	; 1
    4a22:	0e 94 66 25 	call	0x4acc	; 0x4acc <__pack_f>
    4a26:	28 96       	adiw	r28, 0x08	; 8
    4a28:	ea e0       	ldi	r30, 0x0A	; 10
    4a2a:	0c 94 44 27 	jmp	0x4e88	; 0x4e88 <__epilogue_restores__+0x10>

00004a2e <__clzsi2>:
    4a2e:	ef 92       	push	r14
    4a30:	ff 92       	push	r15
    4a32:	0f 93       	push	r16
    4a34:	1f 93       	push	r17
    4a36:	7b 01       	movw	r14, r22
    4a38:	8c 01       	movw	r16, r24
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	e8 16       	cp	r14, r24
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	f8 06       	cpc	r15, r24
    4a42:	81 e0       	ldi	r24, 0x01	; 1
    4a44:	08 07       	cpc	r16, r24
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	18 07       	cpc	r17, r24
    4a4a:	88 f4       	brcc	.+34     	; 0x4a6e <__clzsi2+0x40>
    4a4c:	8f ef       	ldi	r24, 0xFF	; 255
    4a4e:	e8 16       	cp	r14, r24
    4a50:	f1 04       	cpc	r15, r1
    4a52:	01 05       	cpc	r16, r1
    4a54:	11 05       	cpc	r17, r1
    4a56:	31 f0       	breq	.+12     	; 0x4a64 <__clzsi2+0x36>
    4a58:	28 f0       	brcs	.+10     	; 0x4a64 <__clzsi2+0x36>
    4a5a:	88 e0       	ldi	r24, 0x08	; 8
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	a0 e0       	ldi	r26, 0x00	; 0
    4a60:	b0 e0       	ldi	r27, 0x00	; 0
    4a62:	17 c0       	rjmp	.+46     	; 0x4a92 <__clzsi2+0x64>
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	a0 e0       	ldi	r26, 0x00	; 0
    4a6a:	b0 e0       	ldi	r27, 0x00	; 0
    4a6c:	12 c0       	rjmp	.+36     	; 0x4a92 <__clzsi2+0x64>
    4a6e:	80 e0       	ldi	r24, 0x00	; 0
    4a70:	e8 16       	cp	r14, r24
    4a72:	80 e0       	ldi	r24, 0x00	; 0
    4a74:	f8 06       	cpc	r15, r24
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	08 07       	cpc	r16, r24
    4a7a:	81 e0       	ldi	r24, 0x01	; 1
    4a7c:	18 07       	cpc	r17, r24
    4a7e:	28 f0       	brcs	.+10     	; 0x4a8a <__clzsi2+0x5c>
    4a80:	88 e1       	ldi	r24, 0x18	; 24
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	a0 e0       	ldi	r26, 0x00	; 0
    4a86:	b0 e0       	ldi	r27, 0x00	; 0
    4a88:	04 c0       	rjmp	.+8      	; 0x4a92 <__clzsi2+0x64>
    4a8a:	80 e1       	ldi	r24, 0x10	; 16
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	a0 e0       	ldi	r26, 0x00	; 0
    4a90:	b0 e0       	ldi	r27, 0x00	; 0
    4a92:	20 e2       	ldi	r18, 0x20	; 32
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	40 e0       	ldi	r20, 0x00	; 0
    4a98:	50 e0       	ldi	r21, 0x00	; 0
    4a9a:	28 1b       	sub	r18, r24
    4a9c:	39 0b       	sbc	r19, r25
    4a9e:	4a 0b       	sbc	r20, r26
    4aa0:	5b 0b       	sbc	r21, r27
    4aa2:	04 c0       	rjmp	.+8      	; 0x4aac <__clzsi2+0x7e>
    4aa4:	16 95       	lsr	r17
    4aa6:	07 95       	ror	r16
    4aa8:	f7 94       	ror	r15
    4aaa:	e7 94       	ror	r14
    4aac:	8a 95       	dec	r24
    4aae:	d2 f7       	brpl	.-12     	; 0x4aa4 <__clzsi2+0x76>
    4ab0:	f7 01       	movw	r30, r14
    4ab2:	e7 58       	subi	r30, 0x87	; 135
    4ab4:	fd 4f       	sbci	r31, 0xFD	; 253
    4ab6:	80 81       	ld	r24, Z
    4ab8:	28 1b       	sub	r18, r24
    4aba:	31 09       	sbc	r19, r1
    4abc:	41 09       	sbc	r20, r1
    4abe:	51 09       	sbc	r21, r1
    4ac0:	c9 01       	movw	r24, r18
    4ac2:	1f 91       	pop	r17
    4ac4:	0f 91       	pop	r16
    4ac6:	ff 90       	pop	r15
    4ac8:	ef 90       	pop	r14
    4aca:	08 95       	ret

00004acc <__pack_f>:
    4acc:	df 92       	push	r13
    4ace:	ef 92       	push	r14
    4ad0:	ff 92       	push	r15
    4ad2:	0f 93       	push	r16
    4ad4:	1f 93       	push	r17
    4ad6:	fc 01       	movw	r30, r24
    4ad8:	e4 80       	ldd	r14, Z+4	; 0x04
    4ada:	f5 80       	ldd	r15, Z+5	; 0x05
    4adc:	06 81       	ldd	r16, Z+6	; 0x06
    4ade:	17 81       	ldd	r17, Z+7	; 0x07
    4ae0:	d1 80       	ldd	r13, Z+1	; 0x01
    4ae2:	80 81       	ld	r24, Z
    4ae4:	82 30       	cpi	r24, 0x02	; 2
    4ae6:	48 f4       	brcc	.+18     	; 0x4afa <__pack_f+0x2e>
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	a0 e1       	ldi	r26, 0x10	; 16
    4aee:	b0 e0       	ldi	r27, 0x00	; 0
    4af0:	e8 2a       	or	r14, r24
    4af2:	f9 2a       	or	r15, r25
    4af4:	0a 2b       	or	r16, r26
    4af6:	1b 2b       	or	r17, r27
    4af8:	a5 c0       	rjmp	.+330    	; 0x4c44 <__pack_f+0x178>
    4afa:	84 30       	cpi	r24, 0x04	; 4
    4afc:	09 f4       	brne	.+2      	; 0x4b00 <__pack_f+0x34>
    4afe:	9f c0       	rjmp	.+318    	; 0x4c3e <__pack_f+0x172>
    4b00:	82 30       	cpi	r24, 0x02	; 2
    4b02:	21 f4       	brne	.+8      	; 0x4b0c <__pack_f+0x40>
    4b04:	ee 24       	eor	r14, r14
    4b06:	ff 24       	eor	r15, r15
    4b08:	87 01       	movw	r16, r14
    4b0a:	05 c0       	rjmp	.+10     	; 0x4b16 <__pack_f+0x4a>
    4b0c:	e1 14       	cp	r14, r1
    4b0e:	f1 04       	cpc	r15, r1
    4b10:	01 05       	cpc	r16, r1
    4b12:	11 05       	cpc	r17, r1
    4b14:	19 f4       	brne	.+6      	; 0x4b1c <__pack_f+0x50>
    4b16:	e0 e0       	ldi	r30, 0x00	; 0
    4b18:	f0 e0       	ldi	r31, 0x00	; 0
    4b1a:	96 c0       	rjmp	.+300    	; 0x4c48 <__pack_f+0x17c>
    4b1c:	62 81       	ldd	r22, Z+2	; 0x02
    4b1e:	73 81       	ldd	r23, Z+3	; 0x03
    4b20:	9f ef       	ldi	r25, 0xFF	; 255
    4b22:	62 38       	cpi	r22, 0x82	; 130
    4b24:	79 07       	cpc	r23, r25
    4b26:	0c f0       	brlt	.+2      	; 0x4b2a <__pack_f+0x5e>
    4b28:	5b c0       	rjmp	.+182    	; 0x4be0 <__pack_f+0x114>
    4b2a:	22 e8       	ldi	r18, 0x82	; 130
    4b2c:	3f ef       	ldi	r19, 0xFF	; 255
    4b2e:	26 1b       	sub	r18, r22
    4b30:	37 0b       	sbc	r19, r23
    4b32:	2a 31       	cpi	r18, 0x1A	; 26
    4b34:	31 05       	cpc	r19, r1
    4b36:	2c f0       	brlt	.+10     	; 0x4b42 <__pack_f+0x76>
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	40 e0       	ldi	r20, 0x00	; 0
    4b3e:	50 e0       	ldi	r21, 0x00	; 0
    4b40:	2a c0       	rjmp	.+84     	; 0x4b96 <__pack_f+0xca>
    4b42:	b8 01       	movw	r22, r16
    4b44:	a7 01       	movw	r20, r14
    4b46:	02 2e       	mov	r0, r18
    4b48:	04 c0       	rjmp	.+8      	; 0x4b52 <__pack_f+0x86>
    4b4a:	76 95       	lsr	r23
    4b4c:	67 95       	ror	r22
    4b4e:	57 95       	ror	r21
    4b50:	47 95       	ror	r20
    4b52:	0a 94       	dec	r0
    4b54:	d2 f7       	brpl	.-12     	; 0x4b4a <__pack_f+0x7e>
    4b56:	81 e0       	ldi	r24, 0x01	; 1
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	a0 e0       	ldi	r26, 0x00	; 0
    4b5c:	b0 e0       	ldi	r27, 0x00	; 0
    4b5e:	04 c0       	rjmp	.+8      	; 0x4b68 <__pack_f+0x9c>
    4b60:	88 0f       	add	r24, r24
    4b62:	99 1f       	adc	r25, r25
    4b64:	aa 1f       	adc	r26, r26
    4b66:	bb 1f       	adc	r27, r27
    4b68:	2a 95       	dec	r18
    4b6a:	d2 f7       	brpl	.-12     	; 0x4b60 <__pack_f+0x94>
    4b6c:	01 97       	sbiw	r24, 0x01	; 1
    4b6e:	a1 09       	sbc	r26, r1
    4b70:	b1 09       	sbc	r27, r1
    4b72:	8e 21       	and	r24, r14
    4b74:	9f 21       	and	r25, r15
    4b76:	a0 23       	and	r26, r16
    4b78:	b1 23       	and	r27, r17
    4b7a:	00 97       	sbiw	r24, 0x00	; 0
    4b7c:	a1 05       	cpc	r26, r1
    4b7e:	b1 05       	cpc	r27, r1
    4b80:	21 f0       	breq	.+8      	; 0x4b8a <__pack_f+0xbe>
    4b82:	81 e0       	ldi	r24, 0x01	; 1
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	a0 e0       	ldi	r26, 0x00	; 0
    4b88:	b0 e0       	ldi	r27, 0x00	; 0
    4b8a:	9a 01       	movw	r18, r20
    4b8c:	ab 01       	movw	r20, r22
    4b8e:	28 2b       	or	r18, r24
    4b90:	39 2b       	or	r19, r25
    4b92:	4a 2b       	or	r20, r26
    4b94:	5b 2b       	or	r21, r27
    4b96:	da 01       	movw	r26, r20
    4b98:	c9 01       	movw	r24, r18
    4b9a:	8f 77       	andi	r24, 0x7F	; 127
    4b9c:	90 70       	andi	r25, 0x00	; 0
    4b9e:	a0 70       	andi	r26, 0x00	; 0
    4ba0:	b0 70       	andi	r27, 0x00	; 0
    4ba2:	80 34       	cpi	r24, 0x40	; 64
    4ba4:	91 05       	cpc	r25, r1
    4ba6:	a1 05       	cpc	r26, r1
    4ba8:	b1 05       	cpc	r27, r1
    4baa:	39 f4       	brne	.+14     	; 0x4bba <__pack_f+0xee>
    4bac:	27 ff       	sbrs	r18, 7
    4bae:	09 c0       	rjmp	.+18     	; 0x4bc2 <__pack_f+0xf6>
    4bb0:	20 5c       	subi	r18, 0xC0	; 192
    4bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bb4:	4f 4f       	sbci	r20, 0xFF	; 255
    4bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    4bb8:	04 c0       	rjmp	.+8      	; 0x4bc2 <__pack_f+0xf6>
    4bba:	21 5c       	subi	r18, 0xC1	; 193
    4bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    4bbe:	4f 4f       	sbci	r20, 0xFF	; 255
    4bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    4bc2:	e0 e0       	ldi	r30, 0x00	; 0
    4bc4:	f0 e0       	ldi	r31, 0x00	; 0
    4bc6:	20 30       	cpi	r18, 0x00	; 0
    4bc8:	a0 e0       	ldi	r26, 0x00	; 0
    4bca:	3a 07       	cpc	r19, r26
    4bcc:	a0 e0       	ldi	r26, 0x00	; 0
    4bce:	4a 07       	cpc	r20, r26
    4bd0:	a0 e4       	ldi	r26, 0x40	; 64
    4bd2:	5a 07       	cpc	r21, r26
    4bd4:	10 f0       	brcs	.+4      	; 0x4bda <__pack_f+0x10e>
    4bd6:	e1 e0       	ldi	r30, 0x01	; 1
    4bd8:	f0 e0       	ldi	r31, 0x00	; 0
    4bda:	79 01       	movw	r14, r18
    4bdc:	8a 01       	movw	r16, r20
    4bde:	27 c0       	rjmp	.+78     	; 0x4c2e <__pack_f+0x162>
    4be0:	60 38       	cpi	r22, 0x80	; 128
    4be2:	71 05       	cpc	r23, r1
    4be4:	64 f5       	brge	.+88     	; 0x4c3e <__pack_f+0x172>
    4be6:	fb 01       	movw	r30, r22
    4be8:	e1 58       	subi	r30, 0x81	; 129
    4bea:	ff 4f       	sbci	r31, 0xFF	; 255
    4bec:	d8 01       	movw	r26, r16
    4bee:	c7 01       	movw	r24, r14
    4bf0:	8f 77       	andi	r24, 0x7F	; 127
    4bf2:	90 70       	andi	r25, 0x00	; 0
    4bf4:	a0 70       	andi	r26, 0x00	; 0
    4bf6:	b0 70       	andi	r27, 0x00	; 0
    4bf8:	80 34       	cpi	r24, 0x40	; 64
    4bfa:	91 05       	cpc	r25, r1
    4bfc:	a1 05       	cpc	r26, r1
    4bfe:	b1 05       	cpc	r27, r1
    4c00:	39 f4       	brne	.+14     	; 0x4c10 <__pack_f+0x144>
    4c02:	e7 fe       	sbrs	r14, 7
    4c04:	0d c0       	rjmp	.+26     	; 0x4c20 <__pack_f+0x154>
    4c06:	80 e4       	ldi	r24, 0x40	; 64
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	a0 e0       	ldi	r26, 0x00	; 0
    4c0c:	b0 e0       	ldi	r27, 0x00	; 0
    4c0e:	04 c0       	rjmp	.+8      	; 0x4c18 <__pack_f+0x14c>
    4c10:	8f e3       	ldi	r24, 0x3F	; 63
    4c12:	90 e0       	ldi	r25, 0x00	; 0
    4c14:	a0 e0       	ldi	r26, 0x00	; 0
    4c16:	b0 e0       	ldi	r27, 0x00	; 0
    4c18:	e8 0e       	add	r14, r24
    4c1a:	f9 1e       	adc	r15, r25
    4c1c:	0a 1f       	adc	r16, r26
    4c1e:	1b 1f       	adc	r17, r27
    4c20:	17 ff       	sbrs	r17, 7
    4c22:	05 c0       	rjmp	.+10     	; 0x4c2e <__pack_f+0x162>
    4c24:	16 95       	lsr	r17
    4c26:	07 95       	ror	r16
    4c28:	f7 94       	ror	r15
    4c2a:	e7 94       	ror	r14
    4c2c:	31 96       	adiw	r30, 0x01	; 1
    4c2e:	87 e0       	ldi	r24, 0x07	; 7
    4c30:	16 95       	lsr	r17
    4c32:	07 95       	ror	r16
    4c34:	f7 94       	ror	r15
    4c36:	e7 94       	ror	r14
    4c38:	8a 95       	dec	r24
    4c3a:	d1 f7       	brne	.-12     	; 0x4c30 <__pack_f+0x164>
    4c3c:	05 c0       	rjmp	.+10     	; 0x4c48 <__pack_f+0x17c>
    4c3e:	ee 24       	eor	r14, r14
    4c40:	ff 24       	eor	r15, r15
    4c42:	87 01       	movw	r16, r14
    4c44:	ef ef       	ldi	r30, 0xFF	; 255
    4c46:	f0 e0       	ldi	r31, 0x00	; 0
    4c48:	6e 2f       	mov	r22, r30
    4c4a:	67 95       	ror	r22
    4c4c:	66 27       	eor	r22, r22
    4c4e:	67 95       	ror	r22
    4c50:	90 2f       	mov	r25, r16
    4c52:	9f 77       	andi	r25, 0x7F	; 127
    4c54:	d7 94       	ror	r13
    4c56:	dd 24       	eor	r13, r13
    4c58:	d7 94       	ror	r13
    4c5a:	8e 2f       	mov	r24, r30
    4c5c:	86 95       	lsr	r24
    4c5e:	49 2f       	mov	r20, r25
    4c60:	46 2b       	or	r20, r22
    4c62:	58 2f       	mov	r21, r24
    4c64:	5d 29       	or	r21, r13
    4c66:	b7 01       	movw	r22, r14
    4c68:	ca 01       	movw	r24, r20
    4c6a:	1f 91       	pop	r17
    4c6c:	0f 91       	pop	r16
    4c6e:	ff 90       	pop	r15
    4c70:	ef 90       	pop	r14
    4c72:	df 90       	pop	r13
    4c74:	08 95       	ret

00004c76 <__unpack_f>:
    4c76:	fc 01       	movw	r30, r24
    4c78:	db 01       	movw	r26, r22
    4c7a:	40 81       	ld	r20, Z
    4c7c:	51 81       	ldd	r21, Z+1	; 0x01
    4c7e:	22 81       	ldd	r18, Z+2	; 0x02
    4c80:	62 2f       	mov	r22, r18
    4c82:	6f 77       	andi	r22, 0x7F	; 127
    4c84:	70 e0       	ldi	r23, 0x00	; 0
    4c86:	22 1f       	adc	r18, r18
    4c88:	22 27       	eor	r18, r18
    4c8a:	22 1f       	adc	r18, r18
    4c8c:	93 81       	ldd	r25, Z+3	; 0x03
    4c8e:	89 2f       	mov	r24, r25
    4c90:	88 0f       	add	r24, r24
    4c92:	82 2b       	or	r24, r18
    4c94:	28 2f       	mov	r18, r24
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	99 1f       	adc	r25, r25
    4c9a:	99 27       	eor	r25, r25
    4c9c:	99 1f       	adc	r25, r25
    4c9e:	11 96       	adiw	r26, 0x01	; 1
    4ca0:	9c 93       	st	X, r25
    4ca2:	11 97       	sbiw	r26, 0x01	; 1
    4ca4:	21 15       	cp	r18, r1
    4ca6:	31 05       	cpc	r19, r1
    4ca8:	a9 f5       	brne	.+106    	; 0x4d14 <__unpack_f+0x9e>
    4caa:	41 15       	cp	r20, r1
    4cac:	51 05       	cpc	r21, r1
    4cae:	61 05       	cpc	r22, r1
    4cb0:	71 05       	cpc	r23, r1
    4cb2:	11 f4       	brne	.+4      	; 0x4cb8 <__unpack_f+0x42>
    4cb4:	82 e0       	ldi	r24, 0x02	; 2
    4cb6:	37 c0       	rjmp	.+110    	; 0x4d26 <__unpack_f+0xb0>
    4cb8:	82 e8       	ldi	r24, 0x82	; 130
    4cba:	9f ef       	ldi	r25, 0xFF	; 255
    4cbc:	13 96       	adiw	r26, 0x03	; 3
    4cbe:	9c 93       	st	X, r25
    4cc0:	8e 93       	st	-X, r24
    4cc2:	12 97       	sbiw	r26, 0x02	; 2
    4cc4:	9a 01       	movw	r18, r20
    4cc6:	ab 01       	movw	r20, r22
    4cc8:	67 e0       	ldi	r22, 0x07	; 7
    4cca:	22 0f       	add	r18, r18
    4ccc:	33 1f       	adc	r19, r19
    4cce:	44 1f       	adc	r20, r20
    4cd0:	55 1f       	adc	r21, r21
    4cd2:	6a 95       	dec	r22
    4cd4:	d1 f7       	brne	.-12     	; 0x4cca <__unpack_f+0x54>
    4cd6:	83 e0       	ldi	r24, 0x03	; 3
    4cd8:	8c 93       	st	X, r24
    4cda:	0d c0       	rjmp	.+26     	; 0x4cf6 <__unpack_f+0x80>
    4cdc:	22 0f       	add	r18, r18
    4cde:	33 1f       	adc	r19, r19
    4ce0:	44 1f       	adc	r20, r20
    4ce2:	55 1f       	adc	r21, r21
    4ce4:	12 96       	adiw	r26, 0x02	; 2
    4ce6:	8d 91       	ld	r24, X+
    4ce8:	9c 91       	ld	r25, X
    4cea:	13 97       	sbiw	r26, 0x03	; 3
    4cec:	01 97       	sbiw	r24, 0x01	; 1
    4cee:	13 96       	adiw	r26, 0x03	; 3
    4cf0:	9c 93       	st	X, r25
    4cf2:	8e 93       	st	-X, r24
    4cf4:	12 97       	sbiw	r26, 0x02	; 2
    4cf6:	20 30       	cpi	r18, 0x00	; 0
    4cf8:	80 e0       	ldi	r24, 0x00	; 0
    4cfa:	38 07       	cpc	r19, r24
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	48 07       	cpc	r20, r24
    4d00:	80 e4       	ldi	r24, 0x40	; 64
    4d02:	58 07       	cpc	r21, r24
    4d04:	58 f3       	brcs	.-42     	; 0x4cdc <__unpack_f+0x66>
    4d06:	14 96       	adiw	r26, 0x04	; 4
    4d08:	2d 93       	st	X+, r18
    4d0a:	3d 93       	st	X+, r19
    4d0c:	4d 93       	st	X+, r20
    4d0e:	5c 93       	st	X, r21
    4d10:	17 97       	sbiw	r26, 0x07	; 7
    4d12:	08 95       	ret
    4d14:	2f 3f       	cpi	r18, 0xFF	; 255
    4d16:	31 05       	cpc	r19, r1
    4d18:	79 f4       	brne	.+30     	; 0x4d38 <__unpack_f+0xc2>
    4d1a:	41 15       	cp	r20, r1
    4d1c:	51 05       	cpc	r21, r1
    4d1e:	61 05       	cpc	r22, r1
    4d20:	71 05       	cpc	r23, r1
    4d22:	19 f4       	brne	.+6      	; 0x4d2a <__unpack_f+0xb4>
    4d24:	84 e0       	ldi	r24, 0x04	; 4
    4d26:	8c 93       	st	X, r24
    4d28:	08 95       	ret
    4d2a:	64 ff       	sbrs	r22, 4
    4d2c:	03 c0       	rjmp	.+6      	; 0x4d34 <__unpack_f+0xbe>
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	8c 93       	st	X, r24
    4d32:	12 c0       	rjmp	.+36     	; 0x4d58 <__unpack_f+0xe2>
    4d34:	1c 92       	st	X, r1
    4d36:	10 c0       	rjmp	.+32     	; 0x4d58 <__unpack_f+0xe2>
    4d38:	2f 57       	subi	r18, 0x7F	; 127
    4d3a:	30 40       	sbci	r19, 0x00	; 0
    4d3c:	13 96       	adiw	r26, 0x03	; 3
    4d3e:	3c 93       	st	X, r19
    4d40:	2e 93       	st	-X, r18
    4d42:	12 97       	sbiw	r26, 0x02	; 2
    4d44:	83 e0       	ldi	r24, 0x03	; 3
    4d46:	8c 93       	st	X, r24
    4d48:	87 e0       	ldi	r24, 0x07	; 7
    4d4a:	44 0f       	add	r20, r20
    4d4c:	55 1f       	adc	r21, r21
    4d4e:	66 1f       	adc	r22, r22
    4d50:	77 1f       	adc	r23, r23
    4d52:	8a 95       	dec	r24
    4d54:	d1 f7       	brne	.-12     	; 0x4d4a <__unpack_f+0xd4>
    4d56:	70 64       	ori	r23, 0x40	; 64
    4d58:	14 96       	adiw	r26, 0x04	; 4
    4d5a:	4d 93       	st	X+, r20
    4d5c:	5d 93       	st	X+, r21
    4d5e:	6d 93       	st	X+, r22
    4d60:	7c 93       	st	X, r23
    4d62:	17 97       	sbiw	r26, 0x07	; 7
    4d64:	08 95       	ret

00004d66 <__fpcmp_parts_f>:
    4d66:	1f 93       	push	r17
    4d68:	dc 01       	movw	r26, r24
    4d6a:	fb 01       	movw	r30, r22
    4d6c:	9c 91       	ld	r25, X
    4d6e:	92 30       	cpi	r25, 0x02	; 2
    4d70:	08 f4       	brcc	.+2      	; 0x4d74 <__fpcmp_parts_f+0xe>
    4d72:	47 c0       	rjmp	.+142    	; 0x4e02 <__fpcmp_parts_f+0x9c>
    4d74:	80 81       	ld	r24, Z
    4d76:	82 30       	cpi	r24, 0x02	; 2
    4d78:	08 f4       	brcc	.+2      	; 0x4d7c <__fpcmp_parts_f+0x16>
    4d7a:	43 c0       	rjmp	.+134    	; 0x4e02 <__fpcmp_parts_f+0x9c>
    4d7c:	94 30       	cpi	r25, 0x04	; 4
    4d7e:	51 f4       	brne	.+20     	; 0x4d94 <__fpcmp_parts_f+0x2e>
    4d80:	11 96       	adiw	r26, 0x01	; 1
    4d82:	1c 91       	ld	r17, X
    4d84:	84 30       	cpi	r24, 0x04	; 4
    4d86:	99 f5       	brne	.+102    	; 0x4dee <__fpcmp_parts_f+0x88>
    4d88:	81 81       	ldd	r24, Z+1	; 0x01
    4d8a:	68 2f       	mov	r22, r24
    4d8c:	70 e0       	ldi	r23, 0x00	; 0
    4d8e:	61 1b       	sub	r22, r17
    4d90:	71 09       	sbc	r23, r1
    4d92:	3f c0       	rjmp	.+126    	; 0x4e12 <__fpcmp_parts_f+0xac>
    4d94:	84 30       	cpi	r24, 0x04	; 4
    4d96:	21 f0       	breq	.+8      	; 0x4da0 <__fpcmp_parts_f+0x3a>
    4d98:	92 30       	cpi	r25, 0x02	; 2
    4d9a:	31 f4       	brne	.+12     	; 0x4da8 <__fpcmp_parts_f+0x42>
    4d9c:	82 30       	cpi	r24, 0x02	; 2
    4d9e:	b9 f1       	breq	.+110    	; 0x4e0e <__fpcmp_parts_f+0xa8>
    4da0:	81 81       	ldd	r24, Z+1	; 0x01
    4da2:	88 23       	and	r24, r24
    4da4:	89 f1       	breq	.+98     	; 0x4e08 <__fpcmp_parts_f+0xa2>
    4da6:	2d c0       	rjmp	.+90     	; 0x4e02 <__fpcmp_parts_f+0x9c>
    4da8:	11 96       	adiw	r26, 0x01	; 1
    4daa:	1c 91       	ld	r17, X
    4dac:	11 97       	sbiw	r26, 0x01	; 1
    4dae:	82 30       	cpi	r24, 0x02	; 2
    4db0:	f1 f0       	breq	.+60     	; 0x4dee <__fpcmp_parts_f+0x88>
    4db2:	81 81       	ldd	r24, Z+1	; 0x01
    4db4:	18 17       	cp	r17, r24
    4db6:	d9 f4       	brne	.+54     	; 0x4dee <__fpcmp_parts_f+0x88>
    4db8:	12 96       	adiw	r26, 0x02	; 2
    4dba:	2d 91       	ld	r18, X+
    4dbc:	3c 91       	ld	r19, X
    4dbe:	13 97       	sbiw	r26, 0x03	; 3
    4dc0:	82 81       	ldd	r24, Z+2	; 0x02
    4dc2:	93 81       	ldd	r25, Z+3	; 0x03
    4dc4:	82 17       	cp	r24, r18
    4dc6:	93 07       	cpc	r25, r19
    4dc8:	94 f0       	brlt	.+36     	; 0x4dee <__fpcmp_parts_f+0x88>
    4dca:	28 17       	cp	r18, r24
    4dcc:	39 07       	cpc	r19, r25
    4dce:	bc f0       	brlt	.+46     	; 0x4dfe <__fpcmp_parts_f+0x98>
    4dd0:	14 96       	adiw	r26, 0x04	; 4
    4dd2:	8d 91       	ld	r24, X+
    4dd4:	9d 91       	ld	r25, X+
    4dd6:	0d 90       	ld	r0, X+
    4dd8:	bc 91       	ld	r27, X
    4dda:	a0 2d       	mov	r26, r0
    4ddc:	24 81       	ldd	r18, Z+4	; 0x04
    4dde:	35 81       	ldd	r19, Z+5	; 0x05
    4de0:	46 81       	ldd	r20, Z+6	; 0x06
    4de2:	57 81       	ldd	r21, Z+7	; 0x07
    4de4:	28 17       	cp	r18, r24
    4de6:	39 07       	cpc	r19, r25
    4de8:	4a 07       	cpc	r20, r26
    4dea:	5b 07       	cpc	r21, r27
    4dec:	18 f4       	brcc	.+6      	; 0x4df4 <__fpcmp_parts_f+0x8e>
    4dee:	11 23       	and	r17, r17
    4df0:	41 f0       	breq	.+16     	; 0x4e02 <__fpcmp_parts_f+0x9c>
    4df2:	0a c0       	rjmp	.+20     	; 0x4e08 <__fpcmp_parts_f+0xa2>
    4df4:	82 17       	cp	r24, r18
    4df6:	93 07       	cpc	r25, r19
    4df8:	a4 07       	cpc	r26, r20
    4dfa:	b5 07       	cpc	r27, r21
    4dfc:	40 f4       	brcc	.+16     	; 0x4e0e <__fpcmp_parts_f+0xa8>
    4dfe:	11 23       	and	r17, r17
    4e00:	19 f0       	breq	.+6      	; 0x4e08 <__fpcmp_parts_f+0xa2>
    4e02:	61 e0       	ldi	r22, 0x01	; 1
    4e04:	70 e0       	ldi	r23, 0x00	; 0
    4e06:	05 c0       	rjmp	.+10     	; 0x4e12 <__fpcmp_parts_f+0xac>
    4e08:	6f ef       	ldi	r22, 0xFF	; 255
    4e0a:	7f ef       	ldi	r23, 0xFF	; 255
    4e0c:	02 c0       	rjmp	.+4      	; 0x4e12 <__fpcmp_parts_f+0xac>
    4e0e:	60 e0       	ldi	r22, 0x00	; 0
    4e10:	70 e0       	ldi	r23, 0x00	; 0
    4e12:	cb 01       	movw	r24, r22
    4e14:	1f 91       	pop	r17
    4e16:	08 95       	ret

00004e18 <__udivmodhi4>:
    4e18:	aa 1b       	sub	r26, r26
    4e1a:	bb 1b       	sub	r27, r27
    4e1c:	51 e1       	ldi	r21, 0x11	; 17
    4e1e:	07 c0       	rjmp	.+14     	; 0x4e2e <__udivmodhi4_ep>

00004e20 <__udivmodhi4_loop>:
    4e20:	aa 1f       	adc	r26, r26
    4e22:	bb 1f       	adc	r27, r27
    4e24:	a6 17       	cp	r26, r22
    4e26:	b7 07       	cpc	r27, r23
    4e28:	10 f0       	brcs	.+4      	; 0x4e2e <__udivmodhi4_ep>
    4e2a:	a6 1b       	sub	r26, r22
    4e2c:	b7 0b       	sbc	r27, r23

00004e2e <__udivmodhi4_ep>:
    4e2e:	88 1f       	adc	r24, r24
    4e30:	99 1f       	adc	r25, r25
    4e32:	5a 95       	dec	r21
    4e34:	a9 f7       	brne	.-22     	; 0x4e20 <__udivmodhi4_loop>
    4e36:	80 95       	com	r24
    4e38:	90 95       	com	r25
    4e3a:	bc 01       	movw	r22, r24
    4e3c:	cd 01       	movw	r24, r26
    4e3e:	08 95       	ret

00004e40 <__prologue_saves__>:
    4e40:	2f 92       	push	r2
    4e42:	3f 92       	push	r3
    4e44:	4f 92       	push	r4
    4e46:	5f 92       	push	r5
    4e48:	6f 92       	push	r6
    4e4a:	7f 92       	push	r7
    4e4c:	8f 92       	push	r8
    4e4e:	9f 92       	push	r9
    4e50:	af 92       	push	r10
    4e52:	bf 92       	push	r11
    4e54:	cf 92       	push	r12
    4e56:	df 92       	push	r13
    4e58:	ef 92       	push	r14
    4e5a:	ff 92       	push	r15
    4e5c:	0f 93       	push	r16
    4e5e:	1f 93       	push	r17
    4e60:	cf 93       	push	r28
    4e62:	df 93       	push	r29
    4e64:	cd b7       	in	r28, 0x3d	; 61
    4e66:	de b7       	in	r29, 0x3e	; 62
    4e68:	ca 1b       	sub	r28, r26
    4e6a:	db 0b       	sbc	r29, r27
    4e6c:	0f b6       	in	r0, 0x3f	; 63
    4e6e:	f8 94       	cli
    4e70:	de bf       	out	0x3e, r29	; 62
    4e72:	0f be       	out	0x3f, r0	; 63
    4e74:	cd bf       	out	0x3d, r28	; 61
    4e76:	19 94       	eijmp

00004e78 <__epilogue_restores__>:
    4e78:	2a 88       	ldd	r2, Y+18	; 0x12
    4e7a:	39 88       	ldd	r3, Y+17	; 0x11
    4e7c:	48 88       	ldd	r4, Y+16	; 0x10
    4e7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e80:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e82:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e84:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e86:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e88:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e8a:	b9 84       	ldd	r11, Y+9	; 0x09
    4e8c:	c8 84       	ldd	r12, Y+8	; 0x08
    4e8e:	df 80       	ldd	r13, Y+7	; 0x07
    4e90:	ee 80       	ldd	r14, Y+6	; 0x06
    4e92:	fd 80       	ldd	r15, Y+5	; 0x05
    4e94:	0c 81       	ldd	r16, Y+4	; 0x04
    4e96:	1b 81       	ldd	r17, Y+3	; 0x03
    4e98:	aa 81       	ldd	r26, Y+2	; 0x02
    4e9a:	b9 81       	ldd	r27, Y+1	; 0x01
    4e9c:	ce 0f       	add	r28, r30
    4e9e:	d1 1d       	adc	r29, r1
    4ea0:	0f b6       	in	r0, 0x3f	; 63
    4ea2:	f8 94       	cli
    4ea4:	de bf       	out	0x3e, r29	; 62
    4ea6:	0f be       	out	0x3f, r0	; 63
    4ea8:	cd bf       	out	0x3d, r28	; 61
    4eaa:	ed 01       	movw	r28, r26
    4eac:	08 95       	ret

00004eae <_exit>:
    4eae:	f8 94       	cli

00004eb0 <__stop_program>:
    4eb0:	ff cf       	rjmp	.-2      	; 0x4eb0 <__stop_program>
