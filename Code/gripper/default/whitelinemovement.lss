
whitelinemovement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800200  00004482  00004516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800356  00800356  0000466c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000466c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000450  00000000  00000000  0000468c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ab  00000000  00000000  00004adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000202  00000000  00000000  00005d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c21  00000000  00000000  00005f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00007bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  00007f0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__vector_54>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e8       	ldi	r30, 0x82	; 130
      fc:	f4 e4       	ldi	r31, 0x44	; 68
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 35       	cpi	r26, 0x56	; 86
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a6 e5       	ldi	r26, 0x56	; 86
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 39       	cpi	r26, 0x96	; 150
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 cb 1b 	call	0x3796	; 0x3796 <main>
     122:	0c 94 3f 22 	jmp	0x447e	; 0x447e <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <timer5_init>:
// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz

void  timer5_init(){
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	
	TCCR5B = 0x00;	//Stop
     132:	e1 e2       	ldi	r30, 0x21	; 33
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     138:	e5 e2       	ldi	r30, 0x25	; 37
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     140:	e4 e2       	ldi	r30, 0x24	; 36
     142:	f1 e0       	ldi	r31, 0x01	; 1
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     148:	e9 e2       	ldi	r30, 0x29	; 41
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     14e:	e8 e2       	ldi	r30, 0x28	; 40
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     156:	eb e2       	ldi	r30, 0x2B	; 43
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     15c:	ea e2       	ldi	r30, 0x2A	; 42
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     164:	ed e2       	ldi	r30, 0x2D	; 45
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     16a:	ec e2       	ldi	r30, 0x2C	; 44
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	89 ea       	ldi	r24, 0xA9	; 169
     178:	80 83       	st	Z, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     17a:	e1 e2       	ldi	r30, 0x21	; 33
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	80 83       	st	Z, r24
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <lcd_port_config>:

void lcd_port_config (void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     190:	a7 e2       	ldi	r26, 0x27	; 39
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	e7 e2       	ldi	r30, 0x27	; 39
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	87 6f       	ori	r24, 0xF7	; 247
     19c:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     19e:	a8 e2       	ldi	r26, 0x28	; 40
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	e8 e2       	ldi	r30, 0x28	; 40
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	80 78       	andi	r24, 0x80	; 128
     1aa:	8c 93       	st	X, r24
}
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <config>:

void config()
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	0f 92       	push	r0
     1b8:	0f 92       	push	r0
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
	DDRJ = 0xff; //led output
     1be:	e4 e0       	ldi	r30, 0x04	; 4
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	8f ef       	ldi	r24, 0xFF	; 255
     1c4:	80 83       	st	Z, r24
	PORTJ = 0xff;
     1c6:	e5 e0       	ldi	r30, 0x05	; 5
     1c8:	f1 e0       	ldi	r31, 0x01	; 1
     1ca:	8f ef       	ldi	r24, 0xFF	; 255
     1cc:	80 83       	st	Z, r24

	DDRC = DDRC | 0x08; //set output for buzzer PC3 
     1ce:	a7 e2       	ldi	r26, 0x27	; 39
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e7 e2       	ldi	r30, 0x27	; 39
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	88 60       	ori	r24, 0x08	; 8
     1da:	8c 93       	st	X, r24
	PORTC = PORTC & 0xf7;
     1dc:	a8 e2       	ldi	r26, 0x28	; 40
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e8 e2       	ldi	r30, 0x28	; 40
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	87 7f       	andi	r24, 0xF7	; 247
     1e8:	8c 93       	st	X, r24

	DDRA = DDRA | 0xff; //movement of motors .. all pins output
     1ea:	e1 e2       	ldi	r30, 0x21	; 33
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 81       	ld	r24, Z
     1f0:	e1 e2       	ldi	r30, 0x21	; 33
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	8f ef       	ldi	r24, 0xFF	; 255
     1f6:	80 83       	st	Z, r24
	PORTA = PORTA & 0x00 ; // set 0 initially
     1f8:	e2 e2       	ldi	r30, 0x22	; 34
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	e2 e2       	ldi	r30, 0x22	; 34
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	10 82       	st	Z, r1

	DDRL = DDRL | 0x38; // velocity .. Setting PL3 and PL4 pins as output for PWM generation
     204:	aa e0       	ldi	r26, 0x0A	; 10
     206:	b1 e0       	ldi	r27, 0x01	; 1
     208:	ea e0       	ldi	r30, 0x0A	; 10
     20a:	f1 e0       	ldi	r31, 0x01	; 1
     20c:	80 81       	ld	r24, Z
     20e:	88 63       	ori	r24, 0x38	; 56
     210:	8c 93       	st	X, r24
	PORTL = PORTL | 0x38; //PL3 and PL4 pins are for velocity control using PWM.
     212:	ab e0       	ldi	r26, 0x0B	; 11
     214:	b1 e0       	ldi	r27, 0x01	; 1
     216:	eb e0       	ldi	r30, 0x0B	; 11
     218:	f1 e0       	ldi	r31, 0x01	; 1
     21a:	80 81       	ld	r24, Z
     21c:	88 63       	ori	r24, 0x38	; 56
     21e:	8c 93       	st	X, r24
	PORTE = PORTE | 0x08;
     220:	ae e2       	ldi	r26, 0x2E	; 46
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	ee e2       	ldi	r30, 0x2E	; 46
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	88 60       	ori	r24, 0x08	; 8
     22c:	8c 93       	st	X, r24

	//ADC pin config:
	DDRF = 0x00; 
     22e:	e0 e3       	ldi	r30, 0x30	; 48
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	10 82       	st	Z, r1
 	PORTF = 0x00;
     234:	e1 e3       	ldi	r30, 0x31	; 49
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	10 82       	st	Z, r1
 	DDRK = 0x00;
     23a:	e7 e0       	ldi	r30, 0x07	; 7
     23c:	f1 e0       	ldi	r31, 0x01	; 1
     23e:	10 82       	st	Z, r1
 	PORTK = 0x00;
     240:	e8 e0       	ldi	r30, 0x08	; 8
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	10 82       	st	Z, r1

}
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	cf 91       	pop	r28
     24c:	df 91       	pop	r29
     24e:	08 95       	ret

00000250 <port_init>:

void port_init()
{
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
	config();
     258:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <config>
	lcd_port_config();
     25c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_port_config>
}
     260:	cf 91       	pop	r28
     262:	df 91       	pop	r29
     264:	08 95       	ret

00000266 <adc_init>:


void adc_init()
{
     266:	df 93       	push	r29
     268:	cf 93       	push	r28
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     26e:	ea e7       	ldi	r30, 0x7A	; 122
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     274:	eb e7       	ldi	r30, 0x7B	; 123
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     27a:	ec e7       	ldi	r30, 0x7C	; 124
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 e2       	ldi	r24, 0x20	; 32
     280:	80 83       	st	Z, r24
	ACSR = 0x80;
     282:	e0 e5       	ldi	r30, 0x50	; 80
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 e8       	ldi	r24, 0x80	; 128
     288:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     28a:	ea e7       	ldi	r30, 0x7A	; 122
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	86 e8       	ldi	r24, 0x86	; 134
     290:	80 83       	st	Z, r24
}
     292:	cf 91       	pop	r28
     294:	df 91       	pop	r29
     296:	08 95       	ret

00000298 <uart0_init>:
void uart0_init(void)
{
     298:	df 93       	push	r29
     29a:	cf 93       	push	r28
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
     2a0:	e1 ec       	ldi	r30, 0xC1	; 193
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     2a6:	e0 ec       	ldi	r30, 0xC0	; 192
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	10 82       	st	Z, r1
 UCSR0C = 0x06;
     2ac:	e2 ec       	ldi	r30, 0xC2	; 194
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	86 e0       	ldi	r24, 0x06	; 6
     2b2:	80 83       	st	Z, r24
 UBRR0L = 0x47; //set baud rate lo
     2b4:	e4 ec       	ldi	r30, 0xC4	; 196
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	87 e4       	ldi	r24, 0x47	; 71
     2ba:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
     2bc:	e5 ec       	ldi	r30, 0xC5	; 197
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	10 82       	st	Z, r1
 UCSR0B = 0x98;
     2c2:	e1 ec       	ldi	r30, 0xC1	; 193
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	88 e9       	ldi	r24, 0x98	; 152
     2c8:	80 83       	st	Z, r24
}
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	08 95       	ret

000002d0 <uart3_rfid_init>:

void uart3_rfid_init(void)
{
     2d0:	df 93       	push	r29
     2d2:	cf 93       	push	r28
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
	 UCSR3B = 0x00; //disable while setting baud rate
     2d8:	e1 e3       	ldi	r30, 0x31	; 49
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	10 82       	st	Z, r1
	 UCSR3A = 0x00;
     2de:	e0 e3       	ldi	r30, 0x30	; 48
     2e0:	f1 e0       	ldi	r31, 0x01	; 1
     2e2:	10 82       	st	Z, r1
	 UCSR3C = 0x06;
     2e4:	e2 e3       	ldi	r30, 0x32	; 50
     2e6:	f1 e0       	ldi	r31, 0x01	; 1
     2e8:	86 e0       	ldi	r24, 0x06	; 6
     2ea:	80 83       	st	Z, r24
	 UBRR3L = 0x47; //set baud rate lo
     2ec:	e4 e3       	ldi	r30, 0x34	; 52
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	87 e4       	ldi	r24, 0x47	; 71
     2f2:	80 83       	st	Z, r24
	 UBRR3H = 0x00; //set baud rate hi
     2f4:	e5 e3       	ldi	r30, 0x35	; 53
     2f6:	f1 e0       	ldi	r31, 0x01	; 1
     2f8:	10 82       	st	Z, r1
	 UCSR3B = 0x98;
     2fa:	e1 e3       	ldi	r30, 0x31	; 49
     2fc:	f1 e0       	ldi	r31, 0x01	; 1
     2fe:	88 e9       	ldi	r24, 0x98	; 152
     300:	80 83       	st	Z, r24
}
     302:	cf 91       	pop	r28
     304:	df 91       	pop	r29
     306:	08 95       	ret

00000308 <init_devices>:


void init_devices()
{
     308:	df 93       	push	r29
     30a:	cf 93       	push	r28
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
	cli();
     310:	f8 94       	cli
	port_init();
     312:	0e 94 28 01 	call	0x250	; 0x250 <port_init>
	adc_init();
     316:	0e 94 33 01 	call	0x266	; 0x266 <adc_init>
	timer5_init();
     31a:	0e 94 95 00 	call	0x12a	; 0x12a <timer5_init>
	lcd_set_4bit();
     31e:	0e 94 4d 02 	call	0x49a	; 0x49a <lcd_set_4bit>
	lcd_init();
     322:	0e 94 4c 07 	call	0xe98	; 0xe98 <lcd_init>
	uart0_init();
     326:	0e 94 4c 01 	call	0x298	; 0x298 <uart0_init>
	uart3_rfid_init();
     32a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <uart3_rfid_init>
	sei();
     32e:	78 94       	sei
}
     330:	cf 91       	pop	r28
     332:	df 91       	pop	r29
     334:	08 95       	ret

00000336 <buzzer_off>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/signal.h>

void buzzer_off()
{
     336:	df 93       	push	r29
     338:	cf 93       	push	r28
     33a:	0f 92       	push	r0
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
     340:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
     342:	e6 e2       	ldi	r30, 0x26	; 38
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xF7;
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	87 7f       	andi	r24, 0xF7	; 247
     34e:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
     350:	e8 e2       	ldi	r30, 0x28	; 40
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	80 83       	st	Z, r24
}
     358:	0f 90       	pop	r0
     35a:	cf 91       	pop	r28
     35c:	df 91       	pop	r29
     35e:	08 95       	ret

00000360 <buzzer_on>:

void buzzer_on()
{
     360:	df 93       	push	r29
     362:	cf 93       	push	r28
     364:	0f 92       	push	r0
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
     36a:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
     36c:	e6 e2       	ldi	r30, 0x26	; 38
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | 0x08;
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	88 60       	ori	r24, 0x08	; 8
     378:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
     37a:	e8 e2       	ldi	r30, 0x28	; 40
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	80 83       	st	Z, r24
}
     382:	0f 90       	pop	r0
     384:	cf 91       	pop	r28
     386:	df 91       	pop	r29
     388:	08 95       	ret

0000038a <display_led>:
#include <util/delay.h>
#include <avr/signal.h>


void display_led(unsigned char to_display)
{
     38a:	df 93       	push	r29
     38c:	cf 93       	push	r28
     38e:	0f 92       	push	r0
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	89 83       	std	Y+1, r24	; 0x01
	PORTJ = to_display;
     396:	e5 e0       	ldi	r30, 0x05	; 5
     398:	f1 e0       	ldi	r31, 0x01	; 1
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	80 83       	st	Z, r24
}
     39e:	0f 90       	pop	r0
     3a0:	cf 91       	pop	r28
     3a2:	df 91       	pop	r29
     3a4:	08 95       	ret

000003a6 <motion>:
#include <util/delay.h>
#include <avr/signal.h>
#include <math.h> //included to support power function

void motion(unsigned char dir)
{
     3a6:	df 93       	push	r29
     3a8:	cf 93       	push	r28
     3aa:	0f 92       	push	r0
     3ac:	0f 92       	push	r0
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char port_restore = 0;
     3b4:	19 82       	std	Y+1, r1	; 0x01
	dir &= 0x0f; // removing upper nibbel as it is not needed
     3b6:	8a 81       	ldd	r24, Y+2	; 0x02
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	8a 83       	std	Y+2, r24	; 0x02
	port_restore = PINA;  // reading the PORTA's original status
     3bc:	e0 e2       	ldi	r30, 0x20	; 32
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xf0;  // setting lower direction nibbel to 0
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	80 7f       	andi	r24, 0xF0	; 240
     3c8:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | dir;  // adding lower nibbel for direction command and restoring the PORTA status
     3ca:	99 81       	ldd	r25, Y+1	; 0x01
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	89 2b       	or	r24, r25
     3d0:	89 83       	std	Y+1, r24	; 0x01
	PORTA = port_restore;  // setting the command to the port
     3d2:	e2 e2       	ldi	r30, 0x22	; 34
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	80 83       	st	Z, r24
}
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	cf 91       	pop	r28
     3e0:	df 91       	pop	r29
     3e2:	08 95       	ret

000003e4 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
     3e4:	df 93       	push	r29
     3e6:	cf 93       	push	r28
     3e8:	0f 92       	push	r0
     3ea:	0f 92       	push	r0
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	89 83       	std	Y+1, r24	; 0x01
     3f2:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     3f4:	e8 e2       	ldi	r30, 0x28	; 40
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     3fc:	ea e2       	ldi	r30, 0x2A	; 42
     3fe:	f1 e0       	ldi	r31, 0x01	; 1
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	80 83       	st	Z, r24
}
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	cf 91       	pop	r28
     40a:	df 91       	pop	r29
     40c:	08 95       	ret

0000040e <forward>:

void forward()
{
     40e:	df 93       	push	r29
     410:	cf 93       	push	r28
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
	motion(0x06);
     416:	86 e0       	ldi	r24, 0x06	; 6
     418:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <motion>
}
     41c:	cf 91       	pop	r28
     41e:	df 91       	pop	r29
     420:	08 95       	ret

00000422 <backward>:
void backward()
{
     422:	df 93       	push	r29
     424:	cf 93       	push	r28
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
	motion(0x09);
     42a:	89 e0       	ldi	r24, 0x09	; 9
     42c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <motion>
}
     430:	cf 91       	pop	r28
     432:	df 91       	pop	r29
     434:	08 95       	ret

00000436 <left>:
void left()
{
     436:	df 93       	push	r29
     438:	cf 93       	push	r28
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
	motion(0x05);
     43e:	85 e0       	ldi	r24, 0x05	; 5
     440:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <motion>
}
     444:	cf 91       	pop	r28
     446:	df 91       	pop	r29
     448:	08 95       	ret

0000044a <right>:
void right()
{
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
	motion(0x0a);
     452:	8a e0       	ldi	r24, 0x0A	; 10
     454:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <motion>
}
     458:	cf 91       	pop	r28
     45a:	df 91       	pop	r29
     45c:	08 95       	ret

0000045e <small_left>:
void small_left()
{
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	motion(0x04);
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <motion>
}
     46c:	cf 91       	pop	r28
     46e:	df 91       	pop	r29
     470:	08 95       	ret

00000472 <small_right>:
void small_right()
{
     472:	df 93       	push	r29
     474:	cf 93       	push	r28
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
	motion(0x02);
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <motion>
}
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <stop>:

void stop()
{
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
	motion(0x00);
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <motion>
}
     494:	cf 91       	pop	r28
     496:	df 91       	pop	r29
     498:	08 95       	ret

0000049a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	c0 57       	subi	r28, 0x70	; 112
     4a8:	d0 40       	sbci	r29, 0x00	; 0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	fe 01       	movw	r30, r28
     4b6:	e3 59       	subi	r30, 0x93	; 147
     4b8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	a0 e8       	ldi	r26, 0x80	; 128
     4c0:	bf e3       	ldi	r27, 0x3F	; 63
     4c2:	80 83       	st	Z, r24
     4c4:	91 83       	std	Z+1, r25	; 0x01
     4c6:	a2 83       	std	Z+2, r26	; 0x02
     4c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4ca:	8e 01       	movw	r16, r28
     4cc:	07 59       	subi	r16, 0x97	; 151
     4ce:	1f 4f       	sbci	r17, 0xFF	; 255
     4d0:	fe 01       	movw	r30, r28
     4d2:	e3 59       	subi	r30, 0x93	; 147
     4d4:	ff 4f       	sbci	r31, 0xFF	; 255
     4d6:	60 81       	ld	r22, Z
     4d8:	71 81       	ldd	r23, Z+1	; 0x01
     4da:	82 81       	ldd	r24, Z+2	; 0x02
     4dc:	93 81       	ldd	r25, Z+3	; 0x03
     4de:	2d ec       	ldi	r18, 0xCD	; 205
     4e0:	3c ec       	ldi	r19, 0xCC	; 204
     4e2:	4c e2       	ldi	r20, 0x2C	; 44
     4e4:	55 e4       	ldi	r21, 0x45	; 69
     4e6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     4ea:	dc 01       	movw	r26, r24
     4ec:	cb 01       	movw	r24, r22
     4ee:	f8 01       	movw	r30, r16
     4f0:	80 83       	st	Z, r24
     4f2:	91 83       	std	Z+1, r25	; 0x01
     4f4:	a2 83       	std	Z+2, r26	; 0x02
     4f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4f8:	fe 01       	movw	r30, r28
     4fa:	e7 59       	subi	r30, 0x97	; 151
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	60 81       	ld	r22, Z
     500:	71 81       	ldd	r23, Z+1	; 0x01
     502:	82 81       	ldd	r24, Z+2	; 0x02
     504:	93 81       	ldd	r25, Z+3	; 0x03
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e8       	ldi	r20, 0x80	; 128
     50c:	5f e3       	ldi	r21, 0x3F	; 63
     50e:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
     512:	88 23       	and	r24, r24
     514:	44 f4       	brge	.+16     	; 0x526 <lcd_set_4bit+0x8c>
		__ticks = 1;
     516:	fe 01       	movw	r30, r28
     518:	e9 59       	subi	r30, 0x99	; 153
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	91 83       	std	Z+1, r25	; 0x01
     522:	80 83       	st	Z, r24
     524:	64 c0       	rjmp	.+200    	; 0x5ee <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     526:	fe 01       	movw	r30, r28
     528:	e7 59       	subi	r30, 0x97	; 151
     52a:	ff 4f       	sbci	r31, 0xFF	; 255
     52c:	60 81       	ld	r22, Z
     52e:	71 81       	ldd	r23, Z+1	; 0x01
     530:	82 81       	ldd	r24, Z+2	; 0x02
     532:	93 81       	ldd	r25, Z+3	; 0x03
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	3f ef       	ldi	r19, 0xFF	; 255
     538:	4f e7       	ldi	r20, 0x7F	; 127
     53a:	57 e4       	ldi	r21, 0x47	; 71
     53c:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
     540:	18 16       	cp	r1, r24
     542:	0c f0       	brlt	.+2      	; 0x546 <lcd_set_4bit+0xac>
     544:	43 c0       	rjmp	.+134    	; 0x5cc <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     546:	fe 01       	movw	r30, r28
     548:	e3 59       	subi	r30, 0x93	; 147
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	60 81       	ld	r22, Z
     54e:	71 81       	ldd	r23, Z+1	; 0x01
     550:	82 81       	ldd	r24, Z+2	; 0x02
     552:	93 81       	ldd	r25, Z+3	; 0x03
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e2       	ldi	r20, 0x20	; 32
     55a:	51 e4       	ldi	r21, 0x41	; 65
     55c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     560:	dc 01       	movw	r26, r24
     562:	cb 01       	movw	r24, r22
     564:	8e 01       	movw	r16, r28
     566:	09 59       	subi	r16, 0x99	; 153
     568:	1f 4f       	sbci	r17, 0xFF	; 255
     56a:	bc 01       	movw	r22, r24
     56c:	cd 01       	movw	r24, r26
     56e:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     572:	dc 01       	movw	r26, r24
     574:	cb 01       	movw	r24, r22
     576:	f8 01       	movw	r30, r16
     578:	91 83       	std	Z+1, r25	; 0x01
     57a:	80 83       	st	Z, r24
     57c:	1f c0       	rjmp	.+62     	; 0x5bc <lcd_set_4bit+0x122>
     57e:	fe 01       	movw	r30, r28
     580:	eb 59       	subi	r30, 0x9B	; 155
     582:	ff 4f       	sbci	r31, 0xFF	; 255
     584:	84 e1       	ldi	r24, 0x14	; 20
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	91 83       	std	Z+1, r25	; 0x01
     58a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     58c:	fe 01       	movw	r30, r28
     58e:	eb 59       	subi	r30, 0x9B	; 155
     590:	ff 4f       	sbci	r31, 0xFF	; 255
     592:	80 81       	ld	r24, Z
     594:	91 81       	ldd	r25, Z+1	; 0x01
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <lcd_set_4bit+0xfc>
     59a:	fe 01       	movw	r30, r28
     59c:	eb 59       	subi	r30, 0x9B	; 155
     59e:	ff 4f       	sbci	r31, 0xFF	; 255
     5a0:	91 83       	std	Z+1, r25	; 0x01
     5a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a4:	de 01       	movw	r26, r28
     5a6:	a9 59       	subi	r26, 0x99	; 153
     5a8:	bf 4f       	sbci	r27, 0xFF	; 255
     5aa:	fe 01       	movw	r30, r28
     5ac:	e9 59       	subi	r30, 0x99	; 153
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	11 96       	adiw	r26, 0x01	; 1
     5b8:	9c 93       	st	X, r25
     5ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5bc:	fe 01       	movw	r30, r28
     5be:	e9 59       	subi	r30, 0x99	; 153
     5c0:	ff 4f       	sbci	r31, 0xFF	; 255
     5c2:	80 81       	ld	r24, Z
     5c4:	91 81       	ldd	r25, Z+1	; 0x01
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	d1 f6       	brne	.-76     	; 0x57e <lcd_set_4bit+0xe4>
     5ca:	27 c0       	rjmp	.+78     	; 0x61a <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5cc:	8e 01       	movw	r16, r28
     5ce:	09 59       	subi	r16, 0x99	; 153
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	fe 01       	movw	r30, r28
     5d4:	e7 59       	subi	r30, 0x97	; 151
     5d6:	ff 4f       	sbci	r31, 0xFF	; 255
     5d8:	60 81       	ld	r22, Z
     5da:	71 81       	ldd	r23, Z+1	; 0x01
     5dc:	82 81       	ldd	r24, Z+2	; 0x02
     5de:	93 81       	ldd	r25, Z+3	; 0x03
     5e0:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	f8 01       	movw	r30, r16
     5ea:	91 83       	std	Z+1, r25	; 0x01
     5ec:	80 83       	st	Z, r24
     5ee:	de 01       	movw	r26, r28
     5f0:	ad 59       	subi	r26, 0x9D	; 157
     5f2:	bf 4f       	sbci	r27, 0xFF	; 255
     5f4:	fe 01       	movw	r30, r28
     5f6:	e9 59       	subi	r30, 0x99	; 153
     5f8:	ff 4f       	sbci	r31, 0xFF	; 255
     5fa:	80 81       	ld	r24, Z
     5fc:	91 81       	ldd	r25, Z+1	; 0x01
     5fe:	8d 93       	st	X+, r24
     600:	9c 93       	st	X, r25
     602:	fe 01       	movw	r30, r28
     604:	ed 59       	subi	r30, 0x9D	; 157
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <lcd_set_4bit+0x172>
     610:	fe 01       	movw	r30, r28
     612:	ed 59       	subi	r30, 0x9D	; 157
     614:	ff 4f       	sbci	r31, 0xFF	; 255
     616:	91 83       	std	Z+1, r25	; 0x01
     618:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     61a:	a8 e2       	ldi	r26, 0x28	; 40
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	e8 e2       	ldi	r30, 0x28	; 40
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	8e 7f       	andi	r24, 0xFE	; 254
     626:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     628:	a8 e2       	ldi	r26, 0x28	; 40
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	e8 e2       	ldi	r30, 0x28	; 40
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	8d 7f       	andi	r24, 0xFD	; 253
     634:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     636:	e8 e2       	ldi	r30, 0x28	; 40
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 e3       	ldi	r24, 0x30	; 48
     63c:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     63e:	a8 e2       	ldi	r26, 0x28	; 40
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	e8 e2       	ldi	r30, 0x28	; 40
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	84 60       	ori	r24, 0x04	; 4
     64a:	8c 93       	st	X, r24
     64c:	fe 01       	movw	r30, r28
     64e:	e1 5a       	subi	r30, 0xA1	; 161
     650:	ff 4f       	sbci	r31, 0xFF	; 255
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	a0 ea       	ldi	r26, 0xA0	; 160
     658:	b0 e4       	ldi	r27, 0x40	; 64
     65a:	80 83       	st	Z, r24
     65c:	91 83       	std	Z+1, r25	; 0x01
     65e:	a2 83       	std	Z+2, r26	; 0x02
     660:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     662:	8e 01       	movw	r16, r28
     664:	05 5a       	subi	r16, 0xA5	; 165
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	fe 01       	movw	r30, r28
     66a:	e1 5a       	subi	r30, 0xA1	; 161
     66c:	ff 4f       	sbci	r31, 0xFF	; 255
     66e:	60 81       	ld	r22, Z
     670:	71 81       	ldd	r23, Z+1	; 0x01
     672:	82 81       	ldd	r24, Z+2	; 0x02
     674:	93 81       	ldd	r25, Z+3	; 0x03
     676:	2d ec       	ldi	r18, 0xCD	; 205
     678:	3c ec       	ldi	r19, 0xCC	; 204
     67a:	4c e2       	ldi	r20, 0x2C	; 44
     67c:	55 e4       	ldi	r21, 0x45	; 69
     67e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	f8 01       	movw	r30, r16
     688:	80 83       	st	Z, r24
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	a2 83       	std	Z+2, r26	; 0x02
     68e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     690:	fe 01       	movw	r30, r28
     692:	e5 5a       	subi	r30, 0xA5	; 165
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	60 81       	ld	r22, Z
     698:	71 81       	ldd	r23, Z+1	; 0x01
     69a:	82 81       	ldd	r24, Z+2	; 0x02
     69c:	93 81       	ldd	r25, Z+3	; 0x03
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	40 e8       	ldi	r20, 0x80	; 128
     6a4:	5f e3       	ldi	r21, 0x3F	; 63
     6a6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
     6aa:	88 23       	and	r24, r24
     6ac:	44 f4       	brge	.+16     	; 0x6be <lcd_set_4bit+0x224>
		__ticks = 1;
     6ae:	fe 01       	movw	r30, r28
     6b0:	e7 5a       	subi	r30, 0xA7	; 167
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	91 83       	std	Z+1, r25	; 0x01
     6ba:	80 83       	st	Z, r24
     6bc:	64 c0       	rjmp	.+200    	; 0x786 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     6be:	fe 01       	movw	r30, r28
     6c0:	e5 5a       	subi	r30, 0xA5	; 165
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	60 81       	ld	r22, Z
     6c6:	71 81       	ldd	r23, Z+1	; 0x01
     6c8:	82 81       	ldd	r24, Z+2	; 0x02
     6ca:	93 81       	ldd	r25, Z+3	; 0x03
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	3f ef       	ldi	r19, 0xFF	; 255
     6d0:	4f e7       	ldi	r20, 0x7F	; 127
     6d2:	57 e4       	ldi	r21, 0x47	; 71
     6d4:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
     6d8:	18 16       	cp	r1, r24
     6da:	0c f0       	brlt	.+2      	; 0x6de <lcd_set_4bit+0x244>
     6dc:	43 c0       	rjmp	.+134    	; 0x764 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6de:	fe 01       	movw	r30, r28
     6e0:	e1 5a       	subi	r30, 0xA1	; 161
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255
     6e4:	60 81       	ld	r22, Z
     6e6:	71 81       	ldd	r23, Z+1	; 0x01
     6e8:	82 81       	ldd	r24, Z+2	; 0x02
     6ea:	93 81       	ldd	r25, Z+3	; 0x03
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e2       	ldi	r20, 0x20	; 32
     6f2:	51 e4       	ldi	r21, 0x41	; 65
     6f4:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     6f8:	dc 01       	movw	r26, r24
     6fa:	cb 01       	movw	r24, r22
     6fc:	8e 01       	movw	r16, r28
     6fe:	07 5a       	subi	r16, 0xA7	; 167
     700:	1f 4f       	sbci	r17, 0xFF	; 255
     702:	bc 01       	movw	r22, r24
     704:	cd 01       	movw	r24, r26
     706:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	f8 01       	movw	r30, r16
     710:	91 83       	std	Z+1, r25	; 0x01
     712:	80 83       	st	Z, r24
     714:	1f c0       	rjmp	.+62     	; 0x754 <lcd_set_4bit+0x2ba>
     716:	fe 01       	movw	r30, r28
     718:	e9 5a       	subi	r30, 0xA9	; 169
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	84 e1       	ldi	r24, 0x14	; 20
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	91 83       	std	Z+1, r25	; 0x01
     722:	80 83       	st	Z, r24
     724:	fe 01       	movw	r30, r28
     726:	e9 5a       	subi	r30, 0xA9	; 169
     728:	ff 4f       	sbci	r31, 0xFF	; 255
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	f1 f7       	brne	.-4      	; 0x72e <lcd_set_4bit+0x294>
     732:	fe 01       	movw	r30, r28
     734:	e9 5a       	subi	r30, 0xA9	; 169
     736:	ff 4f       	sbci	r31, 0xFF	; 255
     738:	91 83       	std	Z+1, r25	; 0x01
     73a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     73c:	de 01       	movw	r26, r28
     73e:	a7 5a       	subi	r26, 0xA7	; 167
     740:	bf 4f       	sbci	r27, 0xFF	; 255
     742:	fe 01       	movw	r30, r28
     744:	e7 5a       	subi	r30, 0xA7	; 167
     746:	ff 4f       	sbci	r31, 0xFF	; 255
     748:	80 81       	ld	r24, Z
     74a:	91 81       	ldd	r25, Z+1	; 0x01
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	11 96       	adiw	r26, 0x01	; 1
     750:	9c 93       	st	X, r25
     752:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     754:	fe 01       	movw	r30, r28
     756:	e7 5a       	subi	r30, 0xA7	; 167
     758:	ff 4f       	sbci	r31, 0xFF	; 255
     75a:	80 81       	ld	r24, Z
     75c:	91 81       	ldd	r25, Z+1	; 0x01
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	d1 f6       	brne	.-76     	; 0x716 <lcd_set_4bit+0x27c>
     762:	27 c0       	rjmp	.+78     	; 0x7b2 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     764:	8e 01       	movw	r16, r28
     766:	07 5a       	subi	r16, 0xA7	; 167
     768:	1f 4f       	sbci	r17, 0xFF	; 255
     76a:	fe 01       	movw	r30, r28
     76c:	e5 5a       	subi	r30, 0xA5	; 165
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	60 81       	ld	r22, Z
     772:	71 81       	ldd	r23, Z+1	; 0x01
     774:	82 81       	ldd	r24, Z+2	; 0x02
     776:	93 81       	ldd	r25, Z+3	; 0x03
     778:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	f8 01       	movw	r30, r16
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24
     786:	de 01       	movw	r26, r28
     788:	ab 5a       	subi	r26, 0xAB	; 171
     78a:	bf 4f       	sbci	r27, 0xFF	; 255
     78c:	fe 01       	movw	r30, r28
     78e:	e7 5a       	subi	r30, 0xA7	; 167
     790:	ff 4f       	sbci	r31, 0xFF	; 255
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	8d 93       	st	X+, r24
     798:	9c 93       	st	X, r25
     79a:	fe 01       	movw	r30, r28
     79c:	eb 5a       	subi	r30, 0xAB	; 171
     79e:	ff 4f       	sbci	r31, 0xFF	; 255
     7a0:	80 81       	ld	r24, Z
     7a2:	91 81       	ldd	r25, Z+1	; 0x01
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <lcd_set_4bit+0x30a>
     7a8:	fe 01       	movw	r30, r28
     7aa:	eb 5a       	subi	r30, 0xAB	; 171
     7ac:	ff 4f       	sbci	r31, 0xFF	; 255
     7ae:	91 83       	std	Z+1, r25	; 0x01
     7b0:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     7b2:	a8 e2       	ldi	r26, 0x28	; 40
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	e8 e2       	ldi	r30, 0x28	; 40
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	8b 7f       	andi	r24, 0xFB	; 251
     7be:	8c 93       	st	X, r24
     7c0:	fe 01       	movw	r30, r28
     7c2:	ef 5a       	subi	r30, 0xAF	; 175
     7c4:	ff 4f       	sbci	r31, 0xFF	; 255
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e8       	ldi	r26, 0x80	; 128
     7cc:	bf e3       	ldi	r27, 0x3F	; 63
     7ce:	80 83       	st	Z, r24
     7d0:	91 83       	std	Z+1, r25	; 0x01
     7d2:	a2 83       	std	Z+2, r26	; 0x02
     7d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7d6:	8e 01       	movw	r16, r28
     7d8:	03 5b       	subi	r16, 0xB3	; 179
     7da:	1f 4f       	sbci	r17, 0xFF	; 255
     7dc:	fe 01       	movw	r30, r28
     7de:	ef 5a       	subi	r30, 0xAF	; 175
     7e0:	ff 4f       	sbci	r31, 0xFF	; 255
     7e2:	60 81       	ld	r22, Z
     7e4:	71 81       	ldd	r23, Z+1	; 0x01
     7e6:	82 81       	ldd	r24, Z+2	; 0x02
     7e8:	93 81       	ldd	r25, Z+3	; 0x03
     7ea:	2d ec       	ldi	r18, 0xCD	; 205
     7ec:	3c ec       	ldi	r19, 0xCC	; 204
     7ee:	4c e2       	ldi	r20, 0x2C	; 44
     7f0:	55 e4       	ldi	r21, 0x45	; 69
     7f2:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     7f6:	dc 01       	movw	r26, r24
     7f8:	cb 01       	movw	r24, r22
     7fa:	f8 01       	movw	r30, r16
     7fc:	80 83       	st	Z, r24
     7fe:	91 83       	std	Z+1, r25	; 0x01
     800:	a2 83       	std	Z+2, r26	; 0x02
     802:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     804:	fe 01       	movw	r30, r28
     806:	e3 5b       	subi	r30, 0xB3	; 179
     808:	ff 4f       	sbci	r31, 0xFF	; 255
     80a:	60 81       	ld	r22, Z
     80c:	71 81       	ldd	r23, Z+1	; 0x01
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	93 81       	ldd	r25, Z+3	; 0x03
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e8       	ldi	r20, 0x80	; 128
     818:	5f e3       	ldi	r21, 0x3F	; 63
     81a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
     81e:	88 23       	and	r24, r24
     820:	44 f4       	brge	.+16     	; 0x832 <lcd_set_4bit+0x398>
		__ticks = 1;
     822:	fe 01       	movw	r30, r28
     824:	e5 5b       	subi	r30, 0xB5	; 181
     826:	ff 4f       	sbci	r31, 0xFF	; 255
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	91 83       	std	Z+1, r25	; 0x01
     82e:	80 83       	st	Z, r24
     830:	64 c0       	rjmp	.+200    	; 0x8fa <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     832:	fe 01       	movw	r30, r28
     834:	e3 5b       	subi	r30, 0xB3	; 179
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	60 81       	ld	r22, Z
     83a:	71 81       	ldd	r23, Z+1	; 0x01
     83c:	82 81       	ldd	r24, Z+2	; 0x02
     83e:	93 81       	ldd	r25, Z+3	; 0x03
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	3f ef       	ldi	r19, 0xFF	; 255
     844:	4f e7       	ldi	r20, 0x7F	; 127
     846:	57 e4       	ldi	r21, 0x47	; 71
     848:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
     84c:	18 16       	cp	r1, r24
     84e:	0c f0       	brlt	.+2      	; 0x852 <lcd_set_4bit+0x3b8>
     850:	43 c0       	rjmp	.+134    	; 0x8d8 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     852:	fe 01       	movw	r30, r28
     854:	ef 5a       	subi	r30, 0xAF	; 175
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	60 81       	ld	r22, Z
     85a:	71 81       	ldd	r23, Z+1	; 0x01
     85c:	82 81       	ldd	r24, Z+2	; 0x02
     85e:	93 81       	ldd	r25, Z+3	; 0x03
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	40 e2       	ldi	r20, 0x20	; 32
     866:	51 e4       	ldi	r21, 0x41	; 65
     868:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     86c:	dc 01       	movw	r26, r24
     86e:	cb 01       	movw	r24, r22
     870:	8e 01       	movw	r16, r28
     872:	05 5b       	subi	r16, 0xB5	; 181
     874:	1f 4f       	sbci	r17, 0xFF	; 255
     876:	bc 01       	movw	r22, r24
     878:	cd 01       	movw	r24, r26
     87a:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     87e:	dc 01       	movw	r26, r24
     880:	cb 01       	movw	r24, r22
     882:	f8 01       	movw	r30, r16
     884:	91 83       	std	Z+1, r25	; 0x01
     886:	80 83       	st	Z, r24
     888:	1f c0       	rjmp	.+62     	; 0x8c8 <lcd_set_4bit+0x42e>
     88a:	fe 01       	movw	r30, r28
     88c:	e7 5b       	subi	r30, 0xB7	; 183
     88e:	ff 4f       	sbci	r31, 0xFF	; 255
     890:	84 e1       	ldi	r24, 0x14	; 20
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	91 83       	std	Z+1, r25	; 0x01
     896:	80 83       	st	Z, r24
     898:	fe 01       	movw	r30, r28
     89a:	e7 5b       	subi	r30, 0xB7	; 183
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	80 81       	ld	r24, Z
     8a0:	91 81       	ldd	r25, Z+1	; 0x01
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <lcd_set_4bit+0x408>
     8a6:	fe 01       	movw	r30, r28
     8a8:	e7 5b       	subi	r30, 0xB7	; 183
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	91 83       	std	Z+1, r25	; 0x01
     8ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b0:	de 01       	movw	r26, r28
     8b2:	a5 5b       	subi	r26, 0xB5	; 181
     8b4:	bf 4f       	sbci	r27, 0xFF	; 255
     8b6:	fe 01       	movw	r30, r28
     8b8:	e5 5b       	subi	r30, 0xB5	; 181
     8ba:	ff 4f       	sbci	r31, 0xFF	; 255
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	11 96       	adiw	r26, 0x01	; 1
     8c4:	9c 93       	st	X, r25
     8c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	fe 01       	movw	r30, r28
     8ca:	e5 5b       	subi	r30, 0xB5	; 181
     8cc:	ff 4f       	sbci	r31, 0xFF	; 255
     8ce:	80 81       	ld	r24, Z
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
     8d2:	00 97       	sbiw	r24, 0x00	; 0
     8d4:	d1 f6       	brne	.-76     	; 0x88a <lcd_set_4bit+0x3f0>
     8d6:	27 c0       	rjmp	.+78     	; 0x926 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d8:	8e 01       	movw	r16, r28
     8da:	05 5b       	subi	r16, 0xB5	; 181
     8dc:	1f 4f       	sbci	r17, 0xFF	; 255
     8de:	fe 01       	movw	r30, r28
     8e0:	e3 5b       	subi	r30, 0xB3	; 179
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	60 81       	ld	r22, Z
     8e6:	71 81       	ldd	r23, Z+1	; 0x01
     8e8:	82 81       	ldd	r24, Z+2	; 0x02
     8ea:	93 81       	ldd	r25, Z+3	; 0x03
     8ec:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	f8 01       	movw	r30, r16
     8f6:	91 83       	std	Z+1, r25	; 0x01
     8f8:	80 83       	st	Z, r24
     8fa:	de 01       	movw	r26, r28
     8fc:	a9 5b       	subi	r26, 0xB9	; 185
     8fe:	bf 4f       	sbci	r27, 0xFF	; 255
     900:	fe 01       	movw	r30, r28
     902:	e5 5b       	subi	r30, 0xB5	; 181
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	80 81       	ld	r24, Z
     908:	91 81       	ldd	r25, Z+1	; 0x01
     90a:	8d 93       	st	X+, r24
     90c:	9c 93       	st	X, r25
     90e:	fe 01       	movw	r30, r28
     910:	e9 5b       	subi	r30, 0xB9	; 185
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	80 81       	ld	r24, Z
     916:	91 81       	ldd	r25, Z+1	; 0x01
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <lcd_set_4bit+0x47e>
     91c:	fe 01       	movw	r30, r28
     91e:	e9 5b       	subi	r30, 0xB9	; 185
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     926:	a8 e2       	ldi	r26, 0x28	; 40
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	e8 e2       	ldi	r30, 0x28	; 40
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	8e 7f       	andi	r24, 0xFE	; 254
     932:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     934:	a8 e2       	ldi	r26, 0x28	; 40
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e8 e2       	ldi	r30, 0x28	; 40
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	8d 7f       	andi	r24, 0xFD	; 253
     940:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     942:	e8 e2       	ldi	r30, 0x28	; 40
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 e3       	ldi	r24, 0x30	; 48
     948:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     94a:	a8 e2       	ldi	r26, 0x28	; 40
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	e8 e2       	ldi	r30, 0x28	; 40
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	84 60       	ori	r24, 0x04	; 4
     956:	8c 93       	st	X, r24
     958:	fe 01       	movw	r30, r28
     95a:	ed 5b       	subi	r30, 0xBD	; 189
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 ea       	ldi	r26, 0xA0	; 160
     964:	b0 e4       	ldi	r27, 0x40	; 64
     966:	80 83       	st	Z, r24
     968:	91 83       	std	Z+1, r25	; 0x01
     96a:	a2 83       	std	Z+2, r26	; 0x02
     96c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     96e:	8e 01       	movw	r16, r28
     970:	01 5c       	subi	r16, 0xC1	; 193
     972:	1f 4f       	sbci	r17, 0xFF	; 255
     974:	fe 01       	movw	r30, r28
     976:	ed 5b       	subi	r30, 0xBD	; 189
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	60 81       	ld	r22, Z
     97c:	71 81       	ldd	r23, Z+1	; 0x01
     97e:	82 81       	ldd	r24, Z+2	; 0x02
     980:	93 81       	ldd	r25, Z+3	; 0x03
     982:	2d ec       	ldi	r18, 0xCD	; 205
     984:	3c ec       	ldi	r19, 0xCC	; 204
     986:	4c e2       	ldi	r20, 0x2C	; 44
     988:	55 e4       	ldi	r21, 0x45	; 69
     98a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	f8 01       	movw	r30, r16
     994:	80 83       	st	Z, r24
     996:	91 83       	std	Z+1, r25	; 0x01
     998:	a2 83       	std	Z+2, r26	; 0x02
     99a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     99c:	fe 01       	movw	r30, r28
     99e:	ff 96       	adiw	r30, 0x3f	; 63
     9a0:	60 81       	ld	r22, Z
     9a2:	71 81       	ldd	r23, Z+1	; 0x01
     9a4:	82 81       	ldd	r24, Z+2	; 0x02
     9a6:	93 81       	ldd	r25, Z+3	; 0x03
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e8       	ldi	r20, 0x80	; 128
     9ae:	5f e3       	ldi	r21, 0x3F	; 63
     9b0:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
     9b4:	88 23       	and	r24, r24
     9b6:	2c f4       	brge	.+10     	; 0x9c2 <lcd_set_4bit+0x528>
		__ticks = 1;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	9e af       	std	Y+62, r25	; 0x3e
     9be:	8d af       	std	Y+61, r24	; 0x3d
     9c0:	46 c0       	rjmp	.+140    	; 0xa4e <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     9c2:	fe 01       	movw	r30, r28
     9c4:	ff 96       	adiw	r30, 0x3f	; 63
     9c6:	60 81       	ld	r22, Z
     9c8:	71 81       	ldd	r23, Z+1	; 0x01
     9ca:	82 81       	ldd	r24, Z+2	; 0x02
     9cc:	93 81       	ldd	r25, Z+3	; 0x03
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	3f ef       	ldi	r19, 0xFF	; 255
     9d2:	4f e7       	ldi	r20, 0x7F	; 127
     9d4:	57 e4       	ldi	r21, 0x47	; 71
     9d6:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
     9da:	18 16       	cp	r1, r24
     9dc:	64 f5       	brge	.+88     	; 0xa36 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9de:	fe 01       	movw	r30, r28
     9e0:	ed 5b       	subi	r30, 0xBD	; 189
     9e2:	ff 4f       	sbci	r31, 0xFF	; 255
     9e4:	60 81       	ld	r22, Z
     9e6:	71 81       	ldd	r23, Z+1	; 0x01
     9e8:	82 81       	ldd	r24, Z+2	; 0x02
     9ea:	93 81       	ldd	r25, Z+3	; 0x03
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e2       	ldi	r20, 0x20	; 32
     9f2:	51 e4       	ldi	r21, 0x41	; 65
     9f4:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     9f8:	dc 01       	movw	r26, r24
     9fa:	cb 01       	movw	r24, r22
     9fc:	bc 01       	movw	r22, r24
     9fe:	cd 01       	movw	r24, r26
     a00:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	9e af       	std	Y+62, r25	; 0x3e
     a0a:	8d af       	std	Y+61, r24	; 0x3d
     a0c:	0f c0       	rjmp	.+30     	; 0xa2c <lcd_set_4bit+0x592>
     a0e:	84 e1       	ldi	r24, 0x14	; 20
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	9c af       	std	Y+60, r25	; 0x3c
     a14:	8b af       	std	Y+59, r24	; 0x3b
     a16:	8b ad       	ldd	r24, Y+59	; 0x3b
     a18:	9c ad       	ldd	r25, Y+60	; 0x3c
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <lcd_set_4bit+0x580>
     a1e:	9c af       	std	Y+60, r25	; 0x3c
     a20:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a22:	8d ad       	ldd	r24, Y+61	; 0x3d
     a24:	9e ad       	ldd	r25, Y+62	; 0x3e
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	9e af       	std	Y+62, r25	; 0x3e
     a2a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a2c:	8d ad       	ldd	r24, Y+61	; 0x3d
     a2e:	9e ad       	ldd	r25, Y+62	; 0x3e
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	69 f7       	brne	.-38     	; 0xa0e <lcd_set_4bit+0x574>
     a34:	16 c0       	rjmp	.+44     	; 0xa62 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a36:	fe 01       	movw	r30, r28
     a38:	ff 96       	adiw	r30, 0x3f	; 63
     a3a:	60 81       	ld	r22, Z
     a3c:	71 81       	ldd	r23, Z+1	; 0x01
     a3e:	82 81       	ldd	r24, Z+2	; 0x02
     a40:	93 81       	ldd	r25, Z+3	; 0x03
     a42:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     a46:	dc 01       	movw	r26, r24
     a48:	cb 01       	movw	r24, r22
     a4a:	9e af       	std	Y+62, r25	; 0x3e
     a4c:	8d af       	std	Y+61, r24	; 0x3d
     a4e:	8d ad       	ldd	r24, Y+61	; 0x3d
     a50:	9e ad       	ldd	r25, Y+62	; 0x3e
     a52:	9a af       	std	Y+58, r25	; 0x3a
     a54:	89 af       	std	Y+57, r24	; 0x39
     a56:	89 ad       	ldd	r24, Y+57	; 0x39
     a58:	9a ad       	ldd	r25, Y+58	; 0x3a
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <lcd_set_4bit+0x5c0>
     a5e:	9a af       	std	Y+58, r25	; 0x3a
     a60:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     a62:	a8 e2       	ldi	r26, 0x28	; 40
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e8 e2       	ldi	r30, 0x28	; 40
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8b 7f       	andi	r24, 0xFB	; 251
     a6e:	8c 93       	st	X, r24
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e8       	ldi	r26, 0x80	; 128
     a76:	bf e3       	ldi	r27, 0x3F	; 63
     a78:	8d ab       	std	Y+53, r24	; 0x35
     a7a:	9e ab       	std	Y+54, r25	; 0x36
     a7c:	af ab       	std	Y+55, r26	; 0x37
     a7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a80:	6d a9       	ldd	r22, Y+53	; 0x35
     a82:	7e a9       	ldd	r23, Y+54	; 0x36
     a84:	8f a9       	ldd	r24, Y+55	; 0x37
     a86:	98 ad       	ldd	r25, Y+56	; 0x38
     a88:	2d ec       	ldi	r18, 0xCD	; 205
     a8a:	3c ec       	ldi	r19, 0xCC	; 204
     a8c:	4c e2       	ldi	r20, 0x2C	; 44
     a8e:	55 e4       	ldi	r21, 0x45	; 69
     a90:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     a94:	dc 01       	movw	r26, r24
     a96:	cb 01       	movw	r24, r22
     a98:	89 ab       	std	Y+49, r24	; 0x31
     a9a:	9a ab       	std	Y+50, r25	; 0x32
     a9c:	ab ab       	std	Y+51, r26	; 0x33
     a9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     aa0:	69 a9       	ldd	r22, Y+49	; 0x31
     aa2:	7a a9       	ldd	r23, Y+50	; 0x32
     aa4:	8b a9       	ldd	r24, Y+51	; 0x33
     aa6:	9c a9       	ldd	r25, Y+52	; 0x34
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e8       	ldi	r20, 0x80	; 128
     aae:	5f e3       	ldi	r21, 0x3F	; 63
     ab0:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
     ab4:	88 23       	and	r24, r24
     ab6:	2c f4       	brge	.+10     	; 0xac2 <lcd_set_4bit+0x628>
		__ticks = 1;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	98 ab       	std	Y+48, r25	; 0x30
     abe:	8f a7       	std	Y+47, r24	; 0x2f
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     ac2:	69 a9       	ldd	r22, Y+49	; 0x31
     ac4:	7a a9       	ldd	r23, Y+50	; 0x32
     ac6:	8b a9       	ldd	r24, Y+51	; 0x33
     ac8:	9c a9       	ldd	r25, Y+52	; 0x34
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	3f ef       	ldi	r19, 0xFF	; 255
     ace:	4f e7       	ldi	r20, 0x7F	; 127
     ad0:	57 e4       	ldi	r21, 0x47	; 71
     ad2:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
     ad6:	18 16       	cp	r1, r24
     ad8:	4c f5       	brge	.+82     	; 0xb2c <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ada:	6d a9       	ldd	r22, Y+53	; 0x35
     adc:	7e a9       	ldd	r23, Y+54	; 0x36
     ade:	8f a9       	ldd	r24, Y+55	; 0x37
     ae0:	98 ad       	ldd	r25, Y+56	; 0x38
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e2       	ldi	r20, 0x20	; 32
     ae8:	51 e4       	ldi	r21, 0x41	; 65
     aea:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     afa:	dc 01       	movw	r26, r24
     afc:	cb 01       	movw	r24, r22
     afe:	98 ab       	std	Y+48, r25	; 0x30
     b00:	8f a7       	std	Y+47, r24	; 0x2f
     b02:	0f c0       	rjmp	.+30     	; 0xb22 <lcd_set_4bit+0x688>
     b04:	84 e1       	ldi	r24, 0x14	; 20
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	9e a7       	std	Y+46, r25	; 0x2e
     b0a:	8d a7       	std	Y+45, r24	; 0x2d
     b0c:	8d a5       	ldd	r24, Y+45	; 0x2d
     b0e:	9e a5       	ldd	r25, Y+46	; 0x2e
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	f1 f7       	brne	.-4      	; 0xb10 <lcd_set_4bit+0x676>
     b14:	9e a7       	std	Y+46, r25	; 0x2e
     b16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b18:	8f a5       	ldd	r24, Y+47	; 0x2f
     b1a:	98 a9       	ldd	r25, Y+48	; 0x30
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	98 ab       	std	Y+48, r25	; 0x30
     b20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b22:	8f a5       	ldd	r24, Y+47	; 0x2f
     b24:	98 a9       	ldd	r25, Y+48	; 0x30
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	69 f7       	brne	.-38     	; 0xb04 <lcd_set_4bit+0x66a>
     b2a:	14 c0       	rjmp	.+40     	; 0xb54 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b2c:	69 a9       	ldd	r22, Y+49	; 0x31
     b2e:	7a a9       	ldd	r23, Y+50	; 0x32
     b30:	8b a9       	ldd	r24, Y+51	; 0x33
     b32:	9c a9       	ldd	r25, Y+52	; 0x34
     b34:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	98 ab       	std	Y+48, r25	; 0x30
     b3e:	8f a7       	std	Y+47, r24	; 0x2f
     b40:	8f a5       	ldd	r24, Y+47	; 0x2f
     b42:	98 a9       	ldd	r25, Y+48	; 0x30
     b44:	9c a7       	std	Y+44, r25	; 0x2c
     b46:	8b a7       	std	Y+43, r24	; 0x2b
     b48:	8b a5       	ldd	r24, Y+43	; 0x2b
     b4a:	9c a5       	ldd	r25, Y+44	; 0x2c
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <lcd_set_4bit+0x6b2>
     b50:	9c a7       	std	Y+44, r25	; 0x2c
     b52:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b54:	a8 e2       	ldi	r26, 0x28	; 40
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e8 e2       	ldi	r30, 0x28	; 40
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	8e 7f       	andi	r24, 0xFE	; 254
     b60:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b62:	a8 e2       	ldi	r26, 0x28	; 40
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 e2       	ldi	r30, 0x28	; 40
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8d 7f       	andi	r24, 0xFD	; 253
     b6e:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     b70:	e8 e2       	ldi	r30, 0x28	; 40
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 e3       	ldi	r24, 0x30	; 48
     b76:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     b78:	a8 e2       	ldi	r26, 0x28	; 40
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e8 e2       	ldi	r30, 0x28	; 40
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 ea       	ldi	r26, 0xA0	; 160
     b8c:	b0 e4       	ldi	r27, 0x40	; 64
     b8e:	8f a3       	std	Y+39, r24	; 0x27
     b90:	98 a7       	std	Y+40, r25	; 0x28
     b92:	a9 a7       	std	Y+41, r26	; 0x29
     b94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b96:	6f a1       	ldd	r22, Y+39	; 0x27
     b98:	78 a5       	ldd	r23, Y+40	; 0x28
     b9a:	89 a5       	ldd	r24, Y+41	; 0x29
     b9c:	9a a5       	ldd	r25, Y+42	; 0x2a
     b9e:	2d ec       	ldi	r18, 0xCD	; 205
     ba0:	3c ec       	ldi	r19, 0xCC	; 204
     ba2:	4c e2       	ldi	r20, 0x2C	; 44
     ba4:	55 e4       	ldi	r21, 0x45	; 69
     ba6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8b a3       	std	Y+35, r24	; 0x23
     bb0:	9c a3       	std	Y+36, r25	; 0x24
     bb2:	ad a3       	std	Y+37, r26	; 0x25
     bb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bb6:	6b a1       	ldd	r22, Y+35	; 0x23
     bb8:	7c a1       	ldd	r23, Y+36	; 0x24
     bba:	8d a1       	ldd	r24, Y+37	; 0x25
     bbc:	9e a1       	ldd	r25, Y+38	; 0x26
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e8       	ldi	r20, 0x80	; 128
     bc4:	5f e3       	ldi	r21, 0x3F	; 63
     bc6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
     bca:	88 23       	and	r24, r24
     bcc:	2c f4       	brge	.+10     	; 0xbd8 <lcd_set_4bit+0x73e>
		__ticks = 1;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9a a3       	std	Y+34, r25	; 0x22
     bd4:	89 a3       	std	Y+33, r24	; 0x21
     bd6:	3f c0       	rjmp	.+126    	; 0xc56 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     bd8:	6b a1       	ldd	r22, Y+35	; 0x23
     bda:	7c a1       	ldd	r23, Y+36	; 0x24
     bdc:	8d a1       	ldd	r24, Y+37	; 0x25
     bde:	9e a1       	ldd	r25, Y+38	; 0x26
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	4f e7       	ldi	r20, 0x7F	; 127
     be6:	57 e4       	ldi	r21, 0x47	; 71
     be8:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
     bec:	18 16       	cp	r1, r24
     bee:	4c f5       	brge	.+82     	; 0xc42 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf0:	6f a1       	ldd	r22, Y+39	; 0x27
     bf2:	78 a5       	ldd	r23, Y+40	; 0x28
     bf4:	89 a5       	ldd	r24, Y+41	; 0x29
     bf6:	9a a5       	ldd	r25, Y+42	; 0x2a
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e2       	ldi	r20, 0x20	; 32
     bfe:	51 e4       	ldi	r21, 0x41	; 65
     c00:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	bc 01       	movw	r22, r24
     c0a:	cd 01       	movw	r24, r26
     c0c:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	9a a3       	std	Y+34, r25	; 0x22
     c16:	89 a3       	std	Y+33, r24	; 0x21
     c18:	0f c0       	rjmp	.+30     	; 0xc38 <lcd_set_4bit+0x79e>
     c1a:	84 e1       	ldi	r24, 0x14	; 20
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	98 a3       	std	Y+32, r25	; 0x20
     c20:	8f 8f       	std	Y+31, r24	; 0x1f
     c22:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c24:	98 a1       	ldd	r25, Y+32	; 0x20
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <lcd_set_4bit+0x78c>
     c2a:	98 a3       	std	Y+32, r25	; 0x20
     c2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2e:	89 a1       	ldd	r24, Y+33	; 0x21
     c30:	9a a1       	ldd	r25, Y+34	; 0x22
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	9a a3       	std	Y+34, r25	; 0x22
     c36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c38:	89 a1       	ldd	r24, Y+33	; 0x21
     c3a:	9a a1       	ldd	r25, Y+34	; 0x22
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	69 f7       	brne	.-38     	; 0xc1a <lcd_set_4bit+0x780>
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c42:	6b a1       	ldd	r22, Y+35	; 0x23
     c44:	7c a1       	ldd	r23, Y+36	; 0x24
     c46:	8d a1       	ldd	r24, Y+37	; 0x25
     c48:	9e a1       	ldd	r25, Y+38	; 0x26
     c4a:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9a a3       	std	Y+34, r25	; 0x22
     c54:	89 a3       	std	Y+33, r24	; 0x21
     c56:	89 a1       	ldd	r24, Y+33	; 0x21
     c58:	9a a1       	ldd	r25, Y+34	; 0x22
     c5a:	9e 8f       	std	Y+30, r25	; 0x1e
     c5c:	8d 8f       	std	Y+29, r24	; 0x1d
     c5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c60:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <lcd_set_4bit+0x7c8>
     c66:	9e 8f       	std	Y+30, r25	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     c6a:	a8 e2       	ldi	r26, 0x28	; 40
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e8 e2       	ldi	r30, 0x28	; 40
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8b 7f       	andi	r24, 0xFB	; 251
     c76:	8c 93       	st	X, r24
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e8       	ldi	r26, 0x80	; 128
     c7e:	bf e3       	ldi	r27, 0x3F	; 63
     c80:	89 8f       	std	Y+25, r24	; 0x19
     c82:	9a 8f       	std	Y+26, r25	; 0x1a
     c84:	ab 8f       	std	Y+27, r26	; 0x1b
     c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c88:	69 8d       	ldd	r22, Y+25	; 0x19
     c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c90:	2d ec       	ldi	r18, 0xCD	; 205
     c92:	3c ec       	ldi	r19, 0xCC	; 204
     c94:	4c e2       	ldi	r20, 0x2C	; 44
     c96:	55 e4       	ldi	r21, 0x45	; 69
     c98:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	8d 8b       	std	Y+21, r24	; 0x15
     ca2:	9e 8b       	std	Y+22, r25	; 0x16
     ca4:	af 8b       	std	Y+23, r26	; 0x17
     ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ca8:	6d 89       	ldd	r22, Y+21	; 0x15
     caa:	7e 89       	ldd	r23, Y+22	; 0x16
     cac:	8f 89       	ldd	r24, Y+23	; 0x17
     cae:	98 8d       	ldd	r25, Y+24	; 0x18
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e8       	ldi	r20, 0x80	; 128
     cb6:	5f e3       	ldi	r21, 0x3F	; 63
     cb8:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
     cbc:	88 23       	and	r24, r24
     cbe:	2c f4       	brge	.+10     	; 0xcca <lcd_set_4bit+0x830>
		__ticks = 1;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	9c 8b       	std	Y+20, r25	; 0x14
     cc6:	8b 8b       	std	Y+19, r24	; 0x13
     cc8:	3f c0       	rjmp	.+126    	; 0xd48 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     cca:	6d 89       	ldd	r22, Y+21	; 0x15
     ccc:	7e 89       	ldd	r23, Y+22	; 0x16
     cce:	8f 89       	ldd	r24, Y+23	; 0x17
     cd0:	98 8d       	ldd	r25, Y+24	; 0x18
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	3f ef       	ldi	r19, 0xFF	; 255
     cd6:	4f e7       	ldi	r20, 0x7F	; 127
     cd8:	57 e4       	ldi	r21, 0x47	; 71
     cda:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
     cde:	18 16       	cp	r1, r24
     ce0:	4c f5       	brge	.+82     	; 0xd34 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce2:	69 8d       	ldd	r22, Y+25	; 0x19
     ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e2       	ldi	r20, 0x20	; 32
     cf0:	51 e4       	ldi	r21, 0x41	; 65
     cf2:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	bc 01       	movw	r22, r24
     cfc:	cd 01       	movw	r24, r26
     cfe:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	9c 8b       	std	Y+20, r25	; 0x14
     d08:	8b 8b       	std	Y+19, r24	; 0x13
     d0a:	0f c0       	rjmp	.+30     	; 0xd2a <lcd_set_4bit+0x890>
     d0c:	84 e1       	ldi	r24, 0x14	; 20
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	9a 8b       	std	Y+18, r25	; 0x12
     d12:	89 8b       	std	Y+17, r24	; 0x11
     d14:	89 89       	ldd	r24, Y+17	; 0x11
     d16:	9a 89       	ldd	r25, Y+18	; 0x12
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <lcd_set_4bit+0x87e>
     d1c:	9a 8b       	std	Y+18, r25	; 0x12
     d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d20:	8b 89       	ldd	r24, Y+19	; 0x13
     d22:	9c 89       	ldd	r25, Y+20	; 0x14
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	9c 8b       	std	Y+20, r25	; 0x14
     d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2a:	8b 89       	ldd	r24, Y+19	; 0x13
     d2c:	9c 89       	ldd	r25, Y+20	; 0x14
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	69 f7       	brne	.-38     	; 0xd0c <lcd_set_4bit+0x872>
     d32:	14 c0       	rjmp	.+40     	; 0xd5c <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d34:	6d 89       	ldd	r22, Y+21	; 0x15
     d36:	7e 89       	ldd	r23, Y+22	; 0x16
     d38:	8f 89       	ldd	r24, Y+23	; 0x17
     d3a:	98 8d       	ldd	r25, Y+24	; 0x18
     d3c:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	9c 8b       	std	Y+20, r25	; 0x14
     d46:	8b 8b       	std	Y+19, r24	; 0x13
     d48:	8b 89       	ldd	r24, Y+19	; 0x13
     d4a:	9c 89       	ldd	r25, Y+20	; 0x14
     d4c:	98 8b       	std	Y+16, r25	; 0x10
     d4e:	8f 87       	std	Y+15, r24	; 0x0f
     d50:	8f 85       	ldd	r24, Y+15	; 0x0f
     d52:	98 89       	ldd	r25, Y+16	; 0x10
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <lcd_set_4bit+0x8ba>
     d58:	98 8b       	std	Y+16, r25	; 0x10
     d5a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d5c:	a8 e2       	ldi	r26, 0x28	; 40
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e8 e2       	ldi	r30, 0x28	; 40
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8e 7f       	andi	r24, 0xFE	; 254
     d68:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d6a:	a8 e2       	ldi	r26, 0x28	; 40
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e8 e2       	ldi	r30, 0x28	; 40
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8d 7f       	andi	r24, 0xFD	; 253
     d76:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     d78:	e8 e2       	ldi	r30, 0x28	; 40
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     d80:	a8 e2       	ldi	r26, 0x28	; 40
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e8 e2       	ldi	r30, 0x28	; 40
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	84 60       	ori	r24, 0x04	; 4
     d8c:	8c 93       	st	X, r24
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	a0 ea       	ldi	r26, 0xA0	; 160
     d94:	b0 e4       	ldi	r27, 0x40	; 64
     d96:	8b 87       	std	Y+11, r24	; 0x0b
     d98:	9c 87       	std	Y+12, r25	; 0x0c
     d9a:	ad 87       	std	Y+13, r26	; 0x0d
     d9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     da0:	7c 85       	ldd	r23, Y+12	; 0x0c
     da2:	8d 85       	ldd	r24, Y+13	; 0x0d
     da4:	9e 85       	ldd	r25, Y+14	; 0x0e
     da6:	2d ec       	ldi	r18, 0xCD	; 205
     da8:	3c ec       	ldi	r19, 0xCC	; 204
     daa:	4c e2       	ldi	r20, 0x2C	; 44
     dac:	55 e4       	ldi	r21, 0x45	; 69
     dae:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	8f 83       	std	Y+7, r24	; 0x07
     db8:	98 87       	std	Y+8, r25	; 0x08
     dba:	a9 87       	std	Y+9, r26	; 0x09
     dbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dbe:	6f 81       	ldd	r22, Y+7	; 0x07
     dc0:	78 85       	ldd	r23, Y+8	; 0x08
     dc2:	89 85       	ldd	r24, Y+9	; 0x09
     dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e8       	ldi	r20, 0x80	; 128
     dcc:	5f e3       	ldi	r21, 0x3F	; 63
     dce:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
     dd2:	88 23       	and	r24, r24
     dd4:	2c f4       	brge	.+10     	; 0xde0 <lcd_set_4bit+0x946>
		__ticks = 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	9e 83       	std	Y+6, r25	; 0x06
     ddc:	8d 83       	std	Y+5, r24	; 0x05
     dde:	3f c0       	rjmp	.+126    	; 0xe5e <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     de0:	6f 81       	ldd	r22, Y+7	; 0x07
     de2:	78 85       	ldd	r23, Y+8	; 0x08
     de4:	89 85       	ldd	r24, Y+9	; 0x09
     de6:	9a 85       	ldd	r25, Y+10	; 0x0a
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	3f ef       	ldi	r19, 0xFF	; 255
     dec:	4f e7       	ldi	r20, 0x7F	; 127
     dee:	57 e4       	ldi	r21, 0x47	; 71
     df0:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
     df4:	18 16       	cp	r1, r24
     df6:	4c f5       	brge	.+82     	; 0xe4a <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
     dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e2       	ldi	r20, 0x20	; 32
     e06:	51 e4       	ldi	r21, 0x41	; 65
     e08:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	bc 01       	movw	r22, r24
     e12:	cd 01       	movw	r24, r26
     e14:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9e 83       	std	Y+6, r25	; 0x06
     e1e:	8d 83       	std	Y+5, r24	; 0x05
     e20:	0f c0       	rjmp	.+30     	; 0xe40 <lcd_set_4bit+0x9a6>
     e22:	84 e1       	ldi	r24, 0x14	; 20
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	9c 83       	std	Y+4, r25	; 0x04
     e28:	8b 83       	std	Y+3, r24	; 0x03
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	9c 81       	ldd	r25, Y+4	; 0x04
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <lcd_set_4bit+0x994>
     e32:	9c 83       	std	Y+4, r25	; 0x04
     e34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e36:	8d 81       	ldd	r24, Y+5	; 0x05
     e38:	9e 81       	ldd	r25, Y+6	; 0x06
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	9e 83       	std	Y+6, r25	; 0x06
     e3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e40:	8d 81       	ldd	r24, Y+5	; 0x05
     e42:	9e 81       	ldd	r25, Y+6	; 0x06
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	69 f7       	brne	.-38     	; 0xe22 <lcd_set_4bit+0x988>
     e48:	14 c0       	rjmp	.+40     	; 0xe72 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4a:	6f 81       	ldd	r22, Y+7	; 0x07
     e4c:	78 85       	ldd	r23, Y+8	; 0x08
     e4e:	89 85       	ldd	r24, Y+9	; 0x09
     e50:	9a 85       	ldd	r25, Y+10	; 0x0a
     e52:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	9e 83       	std	Y+6, r25	; 0x06
     e5c:	8d 83       	std	Y+5, r24	; 0x05
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	9e 81       	ldd	r25, Y+6	; 0x06
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <lcd_set_4bit+0x9d0>
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     e72:	a8 e2       	ldi	r26, 0x28	; 40
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e8 e2       	ldi	r30, 0x28	; 40
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8b 7f       	andi	r24, 0xFB	; 251
     e7e:	8c 93       	st	X, r24

	
}
     e80:	c0 59       	subi	r28, 0x90	; 144
     e82:	df 4f       	sbci	r29, 0xFF	; 255
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret

00000e98 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	2e 97       	sbiw	r28, 0x0e	; 14
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	a0 e8       	ldi	r26, 0x80	; 128
     eb2:	bf e3       	ldi	r27, 0x3F	; 63
     eb4:	8b 87       	std	Y+11, r24	; 0x0b
     eb6:	9c 87       	std	Y+12, r25	; 0x0c
     eb8:	ad 87       	std	Y+13, r26	; 0x0d
     eba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec4:	2d ec       	ldi	r18, 0xCD	; 205
     ec6:	3c ec       	ldi	r19, 0xCC	; 204
     ec8:	4c e2       	ldi	r20, 0x2C	; 44
     eca:	55 e4       	ldi	r21, 0x45	; 69
     ecc:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8f 83       	std	Y+7, r24	; 0x07
     ed6:	98 87       	std	Y+8, r25	; 0x08
     ed8:	a9 87       	std	Y+9, r26	; 0x09
     eda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     edc:	6f 81       	ldd	r22, Y+7	; 0x07
     ede:	78 85       	ldd	r23, Y+8	; 0x08
     ee0:	89 85       	ldd	r24, Y+9	; 0x09
     ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	5f e3       	ldi	r21, 0x3F	; 63
     eec:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
     ef0:	88 23       	and	r24, r24
     ef2:	2c f4       	brge	.+10     	; 0xefe <lcd_init+0x66>
		__ticks = 1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	3f c0       	rjmp	.+126    	; 0xf7c <lcd_init+0xe4>
	else if (__tmp > 65535)
     efe:	6f 81       	ldd	r22, Y+7	; 0x07
     f00:	78 85       	ldd	r23, Y+8	; 0x08
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	3f ef       	ldi	r19, 0xFF	; 255
     f0a:	4f e7       	ldi	r20, 0x7F	; 127
     f0c:	57 e4       	ldi	r21, 0x47	; 71
     f0e:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
     f12:	18 16       	cp	r1, r24
     f14:	4c f5       	brge	.+82     	; 0xf68 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f16:	6b 85       	ldd	r22, Y+11	; 0x0b
     f18:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e2       	ldi	r20, 0x20	; 32
     f24:	51 e4       	ldi	r21, 0x41	; 65
     f26:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
     f3e:	0f c0       	rjmp	.+30     	; 0xf5e <lcd_init+0xc6>
     f40:	84 e1       	ldi	r24, 0x14	; 20
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	9c 83       	std	Y+4, r25	; 0x04
     f46:	8b 83       	std	Y+3, r24	; 0x03
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <lcd_init+0xb4>
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	9e 83       	std	Y+6, r25	; 0x06
     f5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	69 f7       	brne	.-38     	; 0xf40 <lcd_init+0xa8>
     f66:	14 c0       	rjmp	.+40     	; 0xf90 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	9e 83       	std	Y+6, r25	; 0x06
     f7a:	8d 83       	std	Y+5, r24	; 0x05
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	9e 81       	ldd	r25, Y+6	; 0x06
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <lcd_init+0xf0>
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     f90:	88 e2       	ldi	r24, 0x28	; 40
     f92:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_wr_command>
	lcd_wr_command(0x01);
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_wr_command>
	lcd_wr_command(0x06);
     f9c:	86 e0       	ldi	r24, 0x06	; 6
     f9e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_wr_command>
	lcd_wr_command(0x0E);
     fa2:	8e e0       	ldi	r24, 0x0E	; 14
     fa4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_wr_command>
	lcd_wr_command(0x80);
     fa8:	80 e8       	ldi	r24, 0x80	; 128
     faa:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_wr_command>
		
}
     fae:	2e 96       	adiw	r28, 0x0e	; 14
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	6e 97       	sbiw	r28, 0x1e	; 30
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp1;
	temp1 = cmd;
     fd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd8:	8d 8f       	std	Y+29, r24	; 0x1d
	temp1 = temp1 & 0xF0;
     fda:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fdc:	80 7f       	andi	r24, 0xF0	; 240
     fde:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     fe0:	a8 e2       	ldi	r26, 0x28	; 40
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e8 e2       	ldi	r30, 0x28	; 40
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 70       	andi	r24, 0x0F	; 15
     fec:	8c 93       	st	X, r24
	lcd_port |= temp1;
     fee:	a8 e2       	ldi	r26, 0x28	; 40
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e8 e2       	ldi	r30, 0x28	; 40
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	90 81       	ld	r25, Z
     ff8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ffa:	89 2b       	or	r24, r25
     ffc:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     ffe:	a8 e2       	ldi	r26, 0x28	; 40
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e8 e2       	ldi	r30, 0x28	; 40
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8e 7f       	andi	r24, 0xFE	; 254
    100a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    100c:	a8 e2       	ldi	r26, 0x28	; 40
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e8 e2       	ldi	r30, 0x28	; 40
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8d 7f       	andi	r24, 0xFD	; 253
    1018:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    101a:	a8 e2       	ldi	r26, 0x28	; 40
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e8 e2       	ldi	r30, 0x28	; 40
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	8c 93       	st	X, r24
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a0 ea       	ldi	r26, 0xA0	; 160
    102e:	b0 e4       	ldi	r27, 0x40	; 64
    1030:	89 8f       	std	Y+25, r24	; 0x19
    1032:	9a 8f       	std	Y+26, r25	; 0x1a
    1034:	ab 8f       	std	Y+27, r26	; 0x1b
    1036:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1038:	69 8d       	ldd	r22, Y+25	; 0x19
    103a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    103c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    103e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1040:	2d ec       	ldi	r18, 0xCD	; 205
    1042:	3c ec       	ldi	r19, 0xCC	; 204
    1044:	4c e2       	ldi	r20, 0x2C	; 44
    1046:	55 e4       	ldi	r21, 0x45	; 69
    1048:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	8d 8b       	std	Y+21, r24	; 0x15
    1052:	9e 8b       	std	Y+22, r25	; 0x16
    1054:	af 8b       	std	Y+23, r26	; 0x17
    1056:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1058:	6d 89       	ldd	r22, Y+21	; 0x15
    105a:	7e 89       	ldd	r23, Y+22	; 0x16
    105c:	8f 89       	ldd	r24, Y+23	; 0x17
    105e:	98 8d       	ldd	r25, Y+24	; 0x18
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    106c:	88 23       	and	r24, r24
    106e:	2c f4       	brge	.+10     	; 0x107a <lcd_wr_command+0xba>
		__ticks = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9c 8b       	std	Y+20, r25	; 0x14
    1076:	8b 8b       	std	Y+19, r24	; 0x13
    1078:	3f c0       	rjmp	.+126    	; 0x10f8 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    107a:	6d 89       	ldd	r22, Y+21	; 0x15
    107c:	7e 89       	ldd	r23, Y+22	; 0x16
    107e:	8f 89       	ldd	r24, Y+23	; 0x17
    1080:	98 8d       	ldd	r25, Y+24	; 0x18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	3f ef       	ldi	r19, 0xFF	; 255
    1086:	4f e7       	ldi	r20, 0x7F	; 127
    1088:	57 e4       	ldi	r21, 0x47	; 71
    108a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    108e:	18 16       	cp	r1, r24
    1090:	4c f5       	brge	.+82     	; 0x10e4 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1092:	69 8d       	ldd	r22, Y+25	; 0x19
    1094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e2       	ldi	r20, 0x20	; 32
    10a0:	51 e4       	ldi	r21, 0x41	; 65
    10a2:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	9c 8b       	std	Y+20, r25	; 0x14
    10b8:	8b 8b       	std	Y+19, r24	; 0x13
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <lcd_wr_command+0x11a>
    10bc:	84 e1       	ldi	r24, 0x14	; 20
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	9a 8b       	std	Y+18, r25	; 0x12
    10c2:	89 8b       	std	Y+17, r24	; 0x11
    10c4:	89 89       	ldd	r24, Y+17	; 0x11
    10c6:	9a 89       	ldd	r25, Y+18	; 0x12
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <lcd_wr_command+0x108>
    10cc:	9a 8b       	std	Y+18, r25	; 0x12
    10ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d0:	8b 89       	ldd	r24, Y+19	; 0x13
    10d2:	9c 89       	ldd	r25, Y+20	; 0x14
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	9c 8b       	std	Y+20, r25	; 0x14
    10d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10da:	8b 89       	ldd	r24, Y+19	; 0x13
    10dc:	9c 89       	ldd	r25, Y+20	; 0x14
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	69 f7       	brne	.-38     	; 0x10bc <lcd_wr_command+0xfc>
    10e2:	14 c0       	rjmp	.+40     	; 0x110c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e4:	6d 89       	ldd	r22, Y+21	; 0x15
    10e6:	7e 89       	ldd	r23, Y+22	; 0x16
    10e8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ea:	98 8d       	ldd	r25, Y+24	; 0x18
    10ec:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	9c 8b       	std	Y+20, r25	; 0x14
    10f6:	8b 8b       	std	Y+19, r24	; 0x13
    10f8:	8b 89       	ldd	r24, Y+19	; 0x13
    10fa:	9c 89       	ldd	r25, Y+20	; 0x14
    10fc:	98 8b       	std	Y+16, r25	; 0x10
    10fe:	8f 87       	std	Y+15, r24	; 0x0f
    1100:	8f 85       	ldd	r24, Y+15	; 0x0f
    1102:	98 89       	ldd	r25, Y+16	; 0x10
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <lcd_wr_command+0x144>
    1108:	98 8b       	std	Y+16, r25	; 0x10
    110a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    110c:	a8 e2       	ldi	r26, 0x28	; 40
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e2       	ldi	r30, 0x28	; 40
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8b 7f       	andi	r24, 0xFB	; 251
    1118:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    111a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    111c:	8f 70       	andi	r24, 0x0F	; 15
    111e:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1120:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1122:	82 95       	swap	r24
    1124:	80 7f       	andi	r24, 0xF0	; 240
    1126:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1128:	a8 e2       	ldi	r26, 0x28	; 40
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e2       	ldi	r30, 0x28	; 40
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8f 70       	andi	r24, 0x0F	; 15
    1134:	8c 93       	st	X, r24
	lcd_port |= cmd;
    1136:	a8 e2       	ldi	r26, 0x28	; 40
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e8 e2       	ldi	r30, 0x28	; 40
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	90 81       	ld	r25, Z
    1140:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1142:	89 2b       	or	r24, r25
    1144:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1146:	a8 e2       	ldi	r26, 0x28	; 40
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e8 e2       	ldi	r30, 0x28	; 40
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8e 7f       	andi	r24, 0xFE	; 254
    1152:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1154:	a8 e2       	ldi	r26, 0x28	; 40
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e8 e2       	ldi	r30, 0x28	; 40
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	8d 7f       	andi	r24, 0xFD	; 253
    1160:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1162:	a8 e2       	ldi	r26, 0x28	; 40
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e8 e2       	ldi	r30, 0x28	; 40
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	8c 93       	st	X, r24
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a0 ea       	ldi	r26, 0xA0	; 160
    1176:	b0 e4       	ldi	r27, 0x40	; 64
    1178:	8b 87       	std	Y+11, r24	; 0x0b
    117a:	9c 87       	std	Y+12, r25	; 0x0c
    117c:	ad 87       	std	Y+13, r26	; 0x0d
    117e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1180:	6b 85       	ldd	r22, Y+11	; 0x0b
    1182:	7c 85       	ldd	r23, Y+12	; 0x0c
    1184:	8d 85       	ldd	r24, Y+13	; 0x0d
    1186:	9e 85       	ldd	r25, Y+14	; 0x0e
    1188:	2d ec       	ldi	r18, 0xCD	; 205
    118a:	3c ec       	ldi	r19, 0xCC	; 204
    118c:	4c e2       	ldi	r20, 0x2C	; 44
    118e:	55 e4       	ldi	r21, 0x45	; 69
    1190:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	8f 83       	std	Y+7, r24	; 0x07
    119a:	98 87       	std	Y+8, r25	; 0x08
    119c:	a9 87       	std	Y+9, r26	; 0x09
    119e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11a0:	6f 81       	ldd	r22, Y+7	; 0x07
    11a2:	78 85       	ldd	r23, Y+8	; 0x08
    11a4:	89 85       	ldd	r24, Y+9	; 0x09
    11a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e8       	ldi	r20, 0x80	; 128
    11ae:	5f e3       	ldi	r21, 0x3F	; 63
    11b0:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <lcd_wr_command+0x202>
		__ticks = 1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	9e 83       	std	Y+6, r25	; 0x06
    11be:	8d 83       	std	Y+5, r24	; 0x05
    11c0:	3f c0       	rjmp	.+126    	; 0x1240 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	3f ef       	ldi	r19, 0xFF	; 255
    11ce:	4f e7       	ldi	r20, 0x7F	; 127
    11d0:	57 e4       	ldi	r21, 0x47	; 71
    11d2:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    11d6:	18 16       	cp	r1, r24
    11d8:	4c f5       	brge	.+82     	; 0x122c <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11da:	6b 85       	ldd	r22, Y+11	; 0x0b
    11dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11de:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e2       	ldi	r20, 0x20	; 32
    11e8:	51 e4       	ldi	r21, 0x41	; 65
    11ea:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	9e 83       	std	Y+6, r25	; 0x06
    1200:	8d 83       	std	Y+5, r24	; 0x05
    1202:	0f c0       	rjmp	.+30     	; 0x1222 <lcd_wr_command+0x262>
    1204:	84 e1       	ldi	r24, 0x14	; 20
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	9c 83       	std	Y+4, r25	; 0x04
    120a:	8b 83       	std	Y+3, r24	; 0x03
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <lcd_wr_command+0x250>
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	69 f7       	brne	.-38     	; 0x1204 <lcd_wr_command+0x244>
    122a:	14 c0       	rjmp	.+40     	; 0x1254 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <lcd_wr_command+0x28c>
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1254:	a8 e2       	ldi	r26, 0x28	; 40
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e8 e2       	ldi	r30, 0x28	; 40
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	8b 7f       	andi	r24, 0xFB	; 251
    1260:	8c 93       	st	X, r24
}
    1262:	6e 96       	adiw	r28, 0x1e	; 30
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	6e 97       	sbiw	r28, 0x1e	; 30
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp1;
	temp1 = letter;
    128a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    128c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp1 = (temp1 & 0xF0);
    128e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1290:	80 7f       	andi	r24, 0xF0	; 240
    1292:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1294:	a8 e2       	ldi	r26, 0x28	; 40
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e8 e2       	ldi	r30, 0x28	; 40
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8f 70       	andi	r24, 0x0F	; 15
    12a0:	8c 93       	st	X, r24
	lcd_port |= temp1;
    12a2:	a8 e2       	ldi	r26, 0x28	; 40
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e8 e2       	ldi	r30, 0x28	; 40
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	90 81       	ld	r25, Z
    12ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ae:	89 2b       	or	r24, r25
    12b0:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    12b2:	a8 e2       	ldi	r26, 0x28	; 40
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e8 e2       	ldi	r30, 0x28	; 40
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	81 60       	ori	r24, 0x01	; 1
    12be:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    12c0:	a8 e2       	ldi	r26, 0x28	; 40
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e8 e2       	ldi	r30, 0x28	; 40
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8d 7f       	andi	r24, 0xFD	; 253
    12cc:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    12ce:	a8 e2       	ldi	r26, 0x28	; 40
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e8 e2       	ldi	r30, 0x28	; 40
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	84 60       	ori	r24, 0x04	; 4
    12da:	8c 93       	st	X, r24
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a0 ea       	ldi	r26, 0xA0	; 160
    12e2:	b0 e4       	ldi	r27, 0x40	; 64
    12e4:	89 8f       	std	Y+25, r24	; 0x19
    12e6:	9a 8f       	std	Y+26, r25	; 0x1a
    12e8:	ab 8f       	std	Y+27, r26	; 0x1b
    12ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ec:	69 8d       	ldd	r22, Y+25	; 0x19
    12ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f4:	2d ec       	ldi	r18, 0xCD	; 205
    12f6:	3c ec       	ldi	r19, 0xCC	; 204
    12f8:	4c e2       	ldi	r20, 0x2C	; 44
    12fa:	55 e4       	ldi	r21, 0x45	; 69
    12fc:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	8d 8b       	std	Y+21, r24	; 0x15
    1306:	9e 8b       	std	Y+22, r25	; 0x16
    1308:	af 8b       	std	Y+23, r26	; 0x17
    130a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    130c:	6d 89       	ldd	r22, Y+21	; 0x15
    130e:	7e 89       	ldd	r23, Y+22	; 0x16
    1310:	8f 89       	ldd	r24, Y+23	; 0x17
    1312:	98 8d       	ldd	r25, Y+24	; 0x18
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	5f e3       	ldi	r21, 0x3F	; 63
    131c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    1320:	88 23       	and	r24, r24
    1322:	2c f4       	brge	.+10     	; 0x132e <lcd_wr_char+0xba>
		__ticks = 1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9c 8b       	std	Y+20, r25	; 0x14
    132a:	8b 8b       	std	Y+19, r24	; 0x13
    132c:	3f c0       	rjmp	.+126    	; 0x13ac <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    132e:	6d 89       	ldd	r22, Y+21	; 0x15
    1330:	7e 89       	ldd	r23, Y+22	; 0x16
    1332:	8f 89       	ldd	r24, Y+23	; 0x17
    1334:	98 8d       	ldd	r25, Y+24	; 0x18
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	4f e7       	ldi	r20, 0x7F	; 127
    133c:	57 e4       	ldi	r21, 0x47	; 71
    133e:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    1342:	18 16       	cp	r1, r24
    1344:	4c f5       	brge	.+82     	; 0x1398 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1346:	69 8d       	ldd	r22, Y+25	; 0x19
    1348:	7a 8d       	ldd	r23, Y+26	; 0x1a
    134a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e2       	ldi	r20, 0x20	; 32
    1354:	51 e4       	ldi	r21, 0x41	; 65
    1356:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9c 8b       	std	Y+20, r25	; 0x14
    136c:	8b 8b       	std	Y+19, r24	; 0x13
    136e:	0f c0       	rjmp	.+30     	; 0x138e <lcd_wr_char+0x11a>
    1370:	84 e1       	ldi	r24, 0x14	; 20
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	9a 8b       	std	Y+18, r25	; 0x12
    1376:	89 8b       	std	Y+17, r24	; 0x11
    1378:	89 89       	ldd	r24, Y+17	; 0x11
    137a:	9a 89       	ldd	r25, Y+18	; 0x12
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <lcd_wr_char+0x108>
    1380:	9a 8b       	std	Y+18, r25	; 0x12
    1382:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1384:	8b 89       	ldd	r24, Y+19	; 0x13
    1386:	9c 89       	ldd	r25, Y+20	; 0x14
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	9c 8b       	std	Y+20, r25	; 0x14
    138c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	8b 89       	ldd	r24, Y+19	; 0x13
    1390:	9c 89       	ldd	r25, Y+20	; 0x14
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	69 f7       	brne	.-38     	; 0x1370 <lcd_wr_char+0xfc>
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	6d 89       	ldd	r22, Y+21	; 0x15
    139a:	7e 89       	ldd	r23, Y+22	; 0x16
    139c:	8f 89       	ldd	r24, Y+23	; 0x17
    139e:	98 8d       	ldd	r25, Y+24	; 0x18
    13a0:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9c 8b       	std	Y+20, r25	; 0x14
    13aa:	8b 8b       	std	Y+19, r24	; 0x13
    13ac:	8b 89       	ldd	r24, Y+19	; 0x13
    13ae:	9c 89       	ldd	r25, Y+20	; 0x14
    13b0:	98 8b       	std	Y+16, r25	; 0x10
    13b2:	8f 87       	std	Y+15, r24	; 0x0f
    13b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b6:	98 89       	ldd	r25, Y+16	; 0x10
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <lcd_wr_char+0x144>
    13bc:	98 8b       	std	Y+16, r25	; 0x10
    13be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    13c0:	a8 e2       	ldi	r26, 0x28	; 40
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e8 e2       	ldi	r30, 0x28	; 40
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8b 7f       	andi	r24, 0xFB	; 251
    13cc:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    13ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13d0:	8f 70       	andi	r24, 0x0F	; 15
    13d2:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    13d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13d6:	82 95       	swap	r24
    13d8:	80 7f       	andi	r24, 0xF0	; 240
    13da:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    13dc:	a8 e2       	ldi	r26, 0x28	; 40
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e8 e2       	ldi	r30, 0x28	; 40
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8f 70       	andi	r24, 0x0F	; 15
    13e8:	8c 93       	st	X, r24
	lcd_port |= letter;
    13ea:	a8 e2       	ldi	r26, 0x28	; 40
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e8 e2       	ldi	r30, 0x28	; 40
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	90 81       	ld	r25, Z
    13f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13f6:	89 2b       	or	r24, r25
    13f8:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    13fa:	a8 e2       	ldi	r26, 0x28	; 40
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e8 e2       	ldi	r30, 0x28	; 40
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	81 60       	ori	r24, 0x01	; 1
    1406:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1408:	a8 e2       	ldi	r26, 0x28	; 40
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e8 e2       	ldi	r30, 0x28	; 40
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8d 7f       	andi	r24, 0xFD	; 253
    1414:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1416:	a8 e2       	ldi	r26, 0x28	; 40
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e8 e2       	ldi	r30, 0x28	; 40
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	84 60       	ori	r24, 0x04	; 4
    1422:	8c 93       	st	X, r24
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 ea       	ldi	r26, 0xA0	; 160
    142a:	b0 e4       	ldi	r27, 0x40	; 64
    142c:	8b 87       	std	Y+11, r24	; 0x0b
    142e:	9c 87       	std	Y+12, r25	; 0x0c
    1430:	ad 87       	std	Y+13, r26	; 0x0d
    1432:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	6b 85       	ldd	r22, Y+11	; 0x0b
    1436:	7c 85       	ldd	r23, Y+12	; 0x0c
    1438:	8d 85       	ldd	r24, Y+13	; 0x0d
    143a:	9e 85       	ldd	r25, Y+14	; 0x0e
    143c:	2d ec       	ldi	r18, 0xCD	; 205
    143e:	3c ec       	ldi	r19, 0xCC	; 204
    1440:	4c e2       	ldi	r20, 0x2C	; 44
    1442:	55 e4       	ldi	r21, 0x45	; 69
    1444:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8f 83       	std	Y+7, r24	; 0x07
    144e:	98 87       	std	Y+8, r25	; 0x08
    1450:	a9 87       	std	Y+9, r26	; 0x09
    1452:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <lcd_wr_char+0x202>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1476:	6f 81       	ldd	r22, Y+7	; 0x07
    1478:	78 85       	ldd	r23, Y+8	; 0x08
    147a:	89 85       	ldd	r24, Y+9	; 0x09
    147c:	9a 85       	ldd	r25, Y+10	; 0x0a
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1490:	7c 85       	ldd	r23, Y+12	; 0x0c
    1492:	8d 85       	ldd	r24, Y+13	; 0x0d
    1494:	9e 85       	ldd	r25, Y+14	; 0x0e
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <lcd_wr_char+0x262>
    14b8:	84 e1       	ldi	r24, 0x14	; 20
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	9c 83       	std	Y+4, r25	; 0x04
    14be:	8b 83       	std	Y+3, r24	; 0x03
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <lcd_wr_char+0x250>
    14c8:	9c 83       	std	Y+4, r25	; 0x04
    14ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <lcd_wr_char+0x244>
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <lcd_wr_char+0x28c>
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1508:	a8 e2       	ldi	r26, 0x28	; 40
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e8 e2       	ldi	r30, 0x28	; 40
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8b 7f       	andi	r24, 0xFB	; 251
    1514:	8c 93       	st	X, r24
}
    1516:	6e 96       	adiw	r28, 0x1e	; 30
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <lcd_home>:


void lcd_home()
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1530:	80 e8       	ldi	r24, 0x80	; 128
    1532:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_wr_command>
}
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <lcd_string+0x6>
    1542:	0f 92       	push	r0
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	0a c0       	rjmp	.+20     	; 0x1562 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    154e:	eb 81       	ldd	r30, Y+3	; 0x03
    1550:	fc 81       	ldd	r31, Y+4	; 0x04
    1552:	80 81       	ld	r24, Z
    1554:	0e 94 3a 09 	call	0x1274	; 0x1274 <lcd_wr_char>
		str++;
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1562:	eb 81       	ldd	r30, Y+3	; 0x03
    1564:	fc 81       	ldd	r31, Y+4	; 0x04
    1566:	80 81       	ld	r24, Z
    1568:	88 23       	and	r24, r24
    156a:	89 f7       	brne	.-30     	; 0x154e <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
	int i=0;
    156c:	1a 82       	std	Y+2, r1	; 0x02
    156e:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<12;i++) lcd_wr_char(' ');
    1570:	1a 82       	std	Y+2, r1	; 0x02
    1572:	19 82       	std	Y+1, r1	; 0x01
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <lcd_string+0x4a>
    1576:	80 e2       	ldi	r24, 0x20	; 32
    1578:	0e 94 3a 09 	call	0x1274	; 0x1274 <lcd_wr_char>
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	8c 30       	cpi	r24, 0x0C	; 12
    158c:	91 05       	cpc	r25, r1
    158e:	9c f3       	brlt	.-26     	; 0x1576 <lcd_string+0x3a>
}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <lcd_cursor+0x6>
    15a4:	0f 92       	push	r0
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3c 83       	std	Y+4, r19	; 0x04
    15b6:	2b 83       	std	Y+3, r18	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	82 30       	cpi	r24, 0x02	; 2
    15be:	91 05       	cpc	r25, r1
    15c0:	d9 f0       	breq	.+54     	; 0x15f8 <lcd_cursor+0x5a>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	23 30       	cpi	r18, 0x03	; 3
    15c8:	31 05       	cpc	r19, r1
    15ca:	34 f4       	brge	.+12     	; 0x15d8 <lcd_cursor+0x3a>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	61 f0       	breq	.+24     	; 0x15ee <lcd_cursor+0x50>
    15d6:	1e c0       	rjmp	.+60     	; 0x1614 <lcd_cursor+0x76>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	23 30       	cpi	r18, 0x03	; 3
    15de:	31 05       	cpc	r19, r1
    15e0:	81 f0       	breq	.+32     	; 0x1602 <lcd_cursor+0x64>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	84 30       	cpi	r24, 0x04	; 4
    15e8:	91 05       	cpc	r25, r1
    15ea:	81 f0       	breq	.+32     	; 0x160c <lcd_cursor+0x6e>
    15ec:	13 c0       	rjmp	.+38     	; 0x1614 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	81 58       	subi	r24, 0x81	; 129
    15f2:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_wr_command>
    15f6:	0e c0       	rjmp	.+28     	; 0x1614 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	81 54       	subi	r24, 0x41	; 65
    15fc:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_wr_command>
    1600:	09 c0       	rjmp	.+18     	; 0x1614 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	8d 56       	subi	r24, 0x6D	; 109
    1606:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_wr_command>
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	8d 52       	subi	r24, 0x2D	; 45
    1610:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_wr_command>
		default: break;
	}
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	27 97       	sbiw	r28, 0x07	; 7
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	8a 83       	std	Y+2, r24	; 0x02
    1638:	6b 83       	std	Y+3, r22	; 0x03
    163a:	5d 83       	std	Y+5, r21	; 0x05
    163c:	4c 83       	std	Y+4, r20	; 0x04
    163e:	3f 83       	std	Y+7, r19	; 0x07
    1640:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1642:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	88 23       	and	r24, r24
    1648:	19 f0       	breq	.+6      	; 0x1650 <lcd_print+0x2e>
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 23       	and	r24, r24
    164e:	19 f4       	brne	.+6      	; 0x1656 <lcd_print+0x34>
	{
		lcd_home();
    1650:	0e 94 94 0a 	call	0x1528	; 0x1528 <lcd_home>
    1654:	04 c0       	rjmp	.+8      	; 0x165e <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	6b 81       	ldd	r22, Y+3	; 0x03
    165a:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
	}
	if(digits==5 || flag==1)
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	9f 81       	ldd	r25, Y+7	; 0x07
    1662:	85 30       	cpi	r24, 0x05	; 5
    1664:	91 05       	cpc	r25, r1
    1666:	19 f0       	breq	.+6      	; 0x166e <lcd_print+0x4c>
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	a9 f4       	brne	.+42     	; 0x1698 <lcd_print+0x76>
	{
		million=value/10000+48;
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	9d 81       	ldd	r25, Y+5	; 0x05
    1672:	20 e1       	ldi	r18, 0x10	; 16
    1674:	37 e2       	ldi	r19, 0x27	; 39
    1676:	b9 01       	movw	r22, r18
    1678:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodhi4>
    167c:	cb 01       	movw	r24, r22
    167e:	c0 96       	adiw	r24, 0x30	; 48
    1680:	90 93 71 03 	sts	0x0371, r25
    1684:	80 93 70 03 	sts	0x0370, r24
		lcd_wr_char(million);
    1688:	80 91 70 03 	lds	r24, 0x0370
    168c:	90 91 71 03 	lds	r25, 0x0371
    1690:	0e 94 3a 09 	call	0x1274	; 0x1274 <lcd_wr_char>
		flag=1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1698:	8e 81       	ldd	r24, Y+6	; 0x06
    169a:	9f 81       	ldd	r25, Y+7	; 0x07
    169c:	84 30       	cpi	r24, 0x04	; 4
    169e:	91 05       	cpc	r25, r1
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <lcd_print+0x86>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	11 f5       	brne	.+68     	; 0x16ec <lcd_print+0xca>
	{
		temp1 = value/1000;
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	28 ee       	ldi	r18, 0xE8	; 232
    16ae:	33 e0       	ldi	r19, 0x03	; 3
    16b0:	b9 01       	movw	r22, r18
    16b2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodhi4>
    16b6:	cb 01       	movw	r24, r22
    16b8:	90 93 74 03 	sts	0x0374, r25
    16bc:	80 93 73 03 	sts	0x0373, r24
		thousand = temp1%10 + 48;
    16c0:	80 91 73 03 	lds	r24, 0x0373
    16c4:	90 91 74 03 	lds	r25, 0x0374
    16c8:	2a e0       	ldi	r18, 0x0A	; 10
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	b9 01       	movw	r22, r18
    16ce:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodhi4>
    16d2:	c0 96       	adiw	r24, 0x30	; 48
    16d4:	90 93 7f 03 	sts	0x037F, r25
    16d8:	80 93 7e 03 	sts	0x037E, r24
		lcd_wr_char(thousand);
    16dc:	80 91 7e 03 	lds	r24, 0x037E
    16e0:	90 91 7f 03 	lds	r25, 0x037F
    16e4:	0e 94 3a 09 	call	0x1274	; 0x1274 <lcd_wr_char>
		flag=1;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    16ec:	8e 81       	ldd	r24, Y+6	; 0x06
    16ee:	9f 81       	ldd	r25, Y+7	; 0x07
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	91 05       	cpc	r25, r1
    16f4:	19 f0       	breq	.+6      	; 0x16fc <lcd_print+0xda>
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	11 f5       	brne	.+68     	; 0x1740 <lcd_print+0x11e>
	{
		temp1 = value/100;
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1700:	24 e6       	ldi	r18, 0x64	; 100
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	b9 01       	movw	r22, r18
    1706:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodhi4>
    170a:	cb 01       	movw	r24, r22
    170c:	90 93 74 03 	sts	0x0374, r25
    1710:	80 93 73 03 	sts	0x0373, r24
		hundred = temp1%10 + 48;
    1714:	80 91 73 03 	lds	r24, 0x0373
    1718:	90 91 74 03 	lds	r25, 0x0374
    171c:	2a e0       	ldi	r18, 0x0A	; 10
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	b9 01       	movw	r22, r18
    1722:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodhi4>
    1726:	c0 96       	adiw	r24, 0x30	; 48
    1728:	90 93 7b 03 	sts	0x037B, r25
    172c:	80 93 7a 03 	sts	0x037A, r24
		lcd_wr_char(hundred);
    1730:	80 91 7a 03 	lds	r24, 0x037A
    1734:	90 91 7b 03 	lds	r25, 0x037B
    1738:	0e 94 3a 09 	call	0x1274	; 0x1274 <lcd_wr_char>
		flag=1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1740:	8e 81       	ldd	r24, Y+6	; 0x06
    1742:	9f 81       	ldd	r25, Y+7	; 0x07
    1744:	82 30       	cpi	r24, 0x02	; 2
    1746:	91 05       	cpc	r25, r1
    1748:	19 f0       	breq	.+6      	; 0x1750 <lcd_print+0x12e>
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	11 f5       	brne	.+68     	; 0x1794 <lcd_print+0x172>
	{
		temp1 = value/10;
    1750:	8c 81       	ldd	r24, Y+4	; 0x04
    1752:	9d 81       	ldd	r25, Y+5	; 0x05
    1754:	2a e0       	ldi	r18, 0x0A	; 10
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	b9 01       	movw	r22, r18
    175a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodhi4>
    175e:	cb 01       	movw	r24, r22
    1760:	90 93 74 03 	sts	0x0374, r25
    1764:	80 93 73 03 	sts	0x0373, r24
		tens = temp1%10 + 48;
    1768:	80 91 73 03 	lds	r24, 0x0373
    176c:	90 91 74 03 	lds	r25, 0x0374
    1770:	2a e0       	ldi	r18, 0x0A	; 10
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	b9 01       	movw	r22, r18
    1776:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodhi4>
    177a:	c0 96       	adiw	r24, 0x30	; 48
    177c:	90 93 78 03 	sts	0x0378, r25
    1780:	80 93 77 03 	sts	0x0377, r24
		lcd_wr_char(tens);
    1784:	80 91 77 03 	lds	r24, 0x0377
    1788:	90 91 78 03 	lds	r25, 0x0378
    178c:	0e 94 3a 09 	call	0x1274	; 0x1274 <lcd_wr_char>
		flag=1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1794:	8e 81       	ldd	r24, Y+6	; 0x06
    1796:	9f 81       	ldd	r25, Y+7	; 0x07
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	91 05       	cpc	r25, r1
    179c:	19 f0       	breq	.+6      	; 0x17a4 <lcd_print+0x182>
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	91 f4       	brne	.+36     	; 0x17c8 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	2a e0       	ldi	r18, 0x0A	; 10
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	b9 01       	movw	r22, r18
    17ae:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodhi4>
    17b2:	c0 96       	adiw	r24, 0x30	; 48
    17b4:	90 93 7d 03 	sts	0x037D, r25
    17b8:	80 93 7c 03 	sts	0x037C, r24
		lcd_wr_char(unit);
    17bc:	80 91 7c 03 	lds	r24, 0x037C
    17c0:	90 91 7d 03 	lds	r25, 0x037D
    17c4:	0e 94 3a 09 	call	0x1274	; 0x1274 <lcd_wr_char>
	}
	if(digits>5)
    17c8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ca:	9f 81       	ldd	r25, Y+7	; 0x07
    17cc:	86 30       	cpi	r24, 0x06	; 6
    17ce:	91 05       	cpc	r25, r1
    17d0:	1c f0       	brlt	.+6      	; 0x17d8 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    17d2:	85 e4       	ldi	r24, 0x45	; 69
    17d4:	0e 94 3a 09 	call	0x1274	; 0x1274 <lcd_wr_char>
	}
	
}
    17d8:	27 96       	adiw	r28, 0x07	; 7
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <ADC_Conversion>:



//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	0f 92       	push	r0
    17f0:	0f 92       	push	r0
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	88 30       	cpi	r24, 0x08	; 8
    17fc:	20 f0       	brcs	.+8      	; 0x1806 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    17fe:	eb e7       	ldi	r30, 0x7B	; 123
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	88 e0       	ldi	r24, 0x08	; 8
    1804:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	87 70       	andi	r24, 0x07	; 7
    180a:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    180c:	ec e7       	ldi	r30, 0x7C	; 124
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	80 62       	ori	r24, 0x20	; 32
    1814:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1816:	aa e7       	ldi	r26, 0x7A	; 122
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ea e7       	ldi	r30, 0x7A	; 122
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 64       	ori	r24, 0x40	; 64
    1822:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1824:	ea e7       	ldi	r30, 0x7A	; 122
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	80 71       	andi	r24, 0x10	; 16
    1830:	90 70       	andi	r25, 0x00	; 0
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	b9 f3       	breq	.-18     	; 0x1824 <ADC_Conversion+0x3a>
	a=ADCH;
    1836:	e9 e7       	ldi	r30, 0x79	; 121
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    183e:	aa e7       	ldi	r26, 0x7A	; 122
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	ea e7       	ldi	r30, 0x7A	; 122
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 61       	ori	r24, 0x10	; 16
    184a:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    184c:	eb e7       	ldi	r30, 0x7B	; 123
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	10 82       	st	Z, r1
	return a;
    1852:	89 81       	ldd	r24, Y+1	; 0x01
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <print_sensor>:

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <print_sensor+0x6>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	6a 83       	std	Y+2, r22	; 0x02
    186c:	4b 83       	std	Y+3, r20	; 0x03
 ADC_Value = ADC_Conversion(channel);
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <ADC_Conversion>
    1874:	80 93 72 03 	sts	0x0372, r24
 lcd_print(row, coloumn, ADC_Value, 3);
    1878:	80 91 72 03 	lds	r24, 0x0372
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	6a 81       	ldd	r22, Y+2	; 0x02
    1884:	a9 01       	movw	r20, r18
    1886:	23 e0       	ldi	r18, 0x03	; 3
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	0e 94 11 0b 	call	0x1622	; 0x1622 <lcd_print>
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <init_sensor_values>:


void init_sensor_values(void)
{
    189a:	ef 92       	push	r14
    189c:	ff 92       	push	r15
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	28 97       	sbiw	r28, 0x08	; 8
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
	lline = ADC_Conversion(3);	//Getting data of Left WL Sensor
    18b6:	83 e0       	ldi	r24, 0x03	; 3
    18b8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <ADC_Conversion>
    18bc:	80 93 56 03 	sts	0x0356, r24
	cline = ADC_Conversion(2);	//Getting data of Center WL Sensor
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <ADC_Conversion>
    18c6:	80 93 57 03 	sts	0x0357, r24
	rline = ADC_Conversion(1);	//Getting data of Right WL Sensor
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <ADC_Conversion>
    18d0:	80 93 58 03 	sts	0x0358, r24

	print_sensor(2,1,3);		//Prints value of White Line Sensor Left
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	43 e0       	ldi	r20, 0x03	; 3
    18da:	0e 94 2f 0c 	call	0x185e	; 0x185e <print_sensor>
	print_sensor(2,5,2);		//Prints value of White Line Sensor Center
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	65 e0       	ldi	r22, 0x05	; 5
    18e2:	42 e0       	ldi	r20, 0x02	; 2
    18e4:	0e 94 2f 0c 	call	0x185e	; 0x185e <print_sensor>
	print_sensor(2,9,1);		//Prints Value of White Line Sensor Right
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	69 e0       	ldi	r22, 0x09	; 9
    18ec:	41 e0       	ldi	r20, 0x01	; 1
    18ee:	0e 94 2f 0c 	call	0x185e	; 0x185e <print_sensor>

	if(lline < thresh )
    18f2:	80 91 56 03 	lds	r24, 0x0356
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	80 91 06 02 	lds	r24, 0x0206
    18fe:	90 91 07 02 	lds	r25, 0x0207
    1902:	28 17       	cp	r18, r24
    1904:	39 07       	cpc	r19, r25
    1906:	0c f0       	brlt	.+2      	; 0x190a <init_sensor_values+0x70>
    1908:	49 c0       	rjmp	.+146    	; 0x199c <init_sensor_values+0x102>
	{
		if(cline < thresh) prop =max/2; // white white black
    190a:	80 91 57 03 	lds	r24, 0x0357
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	80 91 06 02 	lds	r24, 0x0206
    1916:	90 91 07 02 	lds	r25, 0x0207
    191a:	28 17       	cp	r18, r24
    191c:	39 07       	cpc	r19, r25
    191e:	c4 f4       	brge	.+48     	; 0x1950 <init_sensor_values+0xb6>
    1920:	80 91 04 02 	lds	r24, 0x0204
    1924:	90 91 05 02 	lds	r25, 0x0205
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	49 81       	ldd	r20, Y+1	; 0x01
    192e:	5a 81       	ldd	r21, Y+2	; 0x02
    1930:	55 23       	and	r21, r21
    1932:	2c f4       	brge	.+10     	; 0x193e <init_sensor_values+0xa4>
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	95 95       	asr	r25
    1944:	87 95       	ror	r24
    1946:	90 93 64 03 	sts	0x0364, r25
    194a:	80 93 63 03 	sts	0x0363, r24
    194e:	84 c0       	rjmp	.+264    	; 0x1a58 <init_sensor_values+0x1be>
		else if(rline>thresh) prop=max/4; //white black black 
    1950:	80 91 58 03 	lds	r24, 0x0358
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	80 91 06 02 	lds	r24, 0x0206
    195c:	90 91 07 02 	lds	r25, 0x0207
    1960:	82 17       	cp	r24, r18
    1962:	93 07       	cpc	r25, r19
    1964:	0c f0       	brlt	.+2      	; 0x1968 <init_sensor_values+0xce>
    1966:	78 c0       	rjmp	.+240    	; 0x1a58 <init_sensor_values+0x1be>
    1968:	80 91 04 02 	lds	r24, 0x0204
    196c:	90 91 05 02 	lds	r25, 0x0205
    1970:	9c 83       	std	Y+4, r25	; 0x04
    1972:	8b 83       	std	Y+3, r24	; 0x03
    1974:	4b 81       	ldd	r20, Y+3	; 0x03
    1976:	5c 81       	ldd	r21, Y+4	; 0x04
    1978:	55 23       	and	r21, r21
    197a:	2c f4       	brge	.+10     	; 0x1986 <init_sensor_values+0xec>
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	03 96       	adiw	r24, 0x03	; 3
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	8b 83       	std	Y+3, r24	; 0x03
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	95 95       	asr	r25
    198c:	87 95       	ror	r24
    198e:	95 95       	asr	r25
    1990:	87 95       	ror	r24
    1992:	90 93 64 03 	sts	0x0364, r25
    1996:	80 93 63 03 	sts	0x0363, r24
    199a:	5e c0       	rjmp	.+188    	; 0x1a58 <init_sensor_values+0x1be>
	}
	else if(rline < thresh)
    199c:	80 91 58 03 	lds	r24, 0x0358
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	80 91 06 02 	lds	r24, 0x0206
    19a8:	90 91 07 02 	lds	r25, 0x0207
    19ac:	28 17       	cp	r18, r24
    19ae:	39 07       	cpc	r19, r25
    19b0:	0c f0       	brlt	.+2      	; 0x19b4 <init_sensor_values+0x11a>
    19b2:	52 c0       	rjmp	.+164    	; 0x1a58 <init_sensor_values+0x1be>
	{
		if(lline<thresh) prop=0;  // white black white
    19b4:	80 91 56 03 	lds	r24, 0x0356
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	80 91 06 02 	lds	r24, 0x0206
    19c0:	90 91 07 02 	lds	r25, 0x0207
    19c4:	28 17       	cp	r18, r24
    19c6:	39 07       	cpc	r19, r25
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <init_sensor_values+0x13a>
    19ca:	10 92 64 03 	sts	0x0364, r1
    19ce:	10 92 63 03 	sts	0x0363, r1
    19d2:	42 c0       	rjmp	.+132    	; 0x1a58 <init_sensor_values+0x1be>
		else if(cline<thresh) prop=-max/2; // black white white
    19d4:	80 91 57 03 	lds	r24, 0x0357
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	80 91 06 02 	lds	r24, 0x0206
    19e0:	90 91 07 02 	lds	r25, 0x0207
    19e4:	28 17       	cp	r18, r24
    19e6:	39 07       	cpc	r19, r25
    19e8:	dc f4       	brge	.+54     	; 0x1a20 <init_sensor_values+0x186>
    19ea:	80 91 04 02 	lds	r24, 0x0204
    19ee:	90 91 05 02 	lds	r25, 0x0205
    19f2:	90 95       	com	r25
    19f4:	81 95       	neg	r24
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	4d 81       	ldd	r20, Y+5	; 0x05
    19fe:	5e 81       	ldd	r21, Y+6	; 0x06
    1a00:	55 23       	and	r21, r21
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <init_sensor_values+0x174>
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	95 95       	asr	r25
    1a14:	87 95       	ror	r24
    1a16:	90 93 64 03 	sts	0x0364, r25
    1a1a:	80 93 63 03 	sts	0x0363, r24
    1a1e:	1c c0       	rjmp	.+56     	; 0x1a58 <init_sensor_values+0x1be>
		else prop=-max/4; // black black white
    1a20:	80 91 04 02 	lds	r24, 0x0204
    1a24:	90 91 05 02 	lds	r25, 0x0205
    1a28:	90 95       	com	r25
    1a2a:	81 95       	neg	r24
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	98 87       	std	Y+8, r25	; 0x08
    1a30:	8f 83       	std	Y+7, r24	; 0x07
    1a32:	4f 81       	ldd	r20, Y+7	; 0x07
    1a34:	58 85       	ldd	r21, Y+8	; 0x08
    1a36:	55 23       	and	r21, r21
    1a38:	2c f4       	brge	.+10     	; 0x1a44 <init_sensor_values+0x1aa>
    1a3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3c:	98 85       	ldd	r25, Y+8	; 0x08
    1a3e:	03 96       	adiw	r24, 0x03	; 3
    1a40:	98 87       	std	Y+8, r25	; 0x08
    1a42:	8f 83       	std	Y+7, r24	; 0x07
    1a44:	8f 81       	ldd	r24, Y+7	; 0x07
    1a46:	98 85       	ldd	r25, Y+8	; 0x08
    1a48:	95 95       	asr	r25
    1a4a:	87 95       	ror	r24
    1a4c:	95 95       	asr	r25
    1a4e:	87 95       	ror	r24
    1a50:	90 93 64 03 	sts	0x0364, r25
    1a54:	80 93 63 03 	sts	0x0363, r24
	}
	der = prop-last_prop; //derivative
    1a58:	20 91 63 03 	lds	r18, 0x0363
    1a5c:	30 91 64 03 	lds	r19, 0x0364
    1a60:	80 91 69 03 	lds	r24, 0x0369
    1a64:	90 91 6a 03 	lds	r25, 0x036A
    1a68:	a9 01       	movw	r20, r18
    1a6a:	48 1b       	sub	r20, r24
    1a6c:	59 0b       	sbc	r21, r25
    1a6e:	ca 01       	movw	r24, r20
    1a70:	90 93 66 03 	sts	0x0366, r25
    1a74:	80 93 65 03 	sts	0x0365, r24
	integral += prop; // integral
    1a78:	20 91 67 03 	lds	r18, 0x0367
    1a7c:	30 91 68 03 	lds	r19, 0x0368
    1a80:	80 91 63 03 	lds	r24, 0x0363
    1a84:	90 91 64 03 	lds	r25, 0x0364
    1a88:	82 0f       	add	r24, r18
    1a8a:	93 1f       	adc	r25, r19
    1a8c:	90 93 68 03 	sts	0x0368, r25
    1a90:	80 93 67 03 	sts	0x0367, r24
	last_prop = prop; 
    1a94:	80 91 63 03 	lds	r24, 0x0363
    1a98:	90 91 64 03 	lds	r25, 0x0364
    1a9c:	90 93 6a 03 	sts	0x036A, r25
    1aa0:	80 93 69 03 	sts	0x0369, r24
	pow_diff = kp*prop + ki*integral + kd*der;
    1aa4:	80 91 63 03 	lds	r24, 0x0363
    1aa8:	90 91 64 03 	lds	r25, 0x0364
    1aac:	aa 27       	eor	r26, r26
    1aae:	97 fd       	sbrc	r25, 7
    1ab0:	a0 95       	com	r26
    1ab2:	ba 2f       	mov	r27, r26
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__floatsisf>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	20 91 00 02 	lds	r18, 0x0200
    1ac4:	30 91 01 02 	lds	r19, 0x0201
    1ac8:	40 91 02 02 	lds	r20, 0x0202
    1acc:	50 91 03 02 	lds	r21, 0x0203
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	7c 01       	movw	r14, r24
    1ade:	8d 01       	movw	r16, r26
    1ae0:	80 91 67 03 	lds	r24, 0x0367
    1ae4:	90 91 68 03 	lds	r25, 0x0368
    1ae8:	aa 27       	eor	r26, r26
    1aea:	97 fd       	sbrc	r25, 7
    1aec:	a0 95       	com	r26
    1aee:	ba 2f       	mov	r27, r26
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__floatsisf>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	20 91 5f 03 	lds	r18, 0x035F
    1b00:	30 91 60 03 	lds	r19, 0x0360
    1b04:	40 91 61 03 	lds	r20, 0x0361
    1b08:	50 91 62 03 	lds	r21, 0x0362
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9c 01       	movw	r18, r24
    1b1a:	ad 01       	movw	r20, r26
    1b1c:	c8 01       	movw	r24, r16
    1b1e:	b7 01       	movw	r22, r14
    1b20:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__addsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	7c 01       	movw	r14, r24
    1b2a:	8d 01       	movw	r16, r26
    1b2c:	80 91 65 03 	lds	r24, 0x0365
    1b30:	90 91 66 03 	lds	r25, 0x0366
    1b34:	aa 27       	eor	r26, r26
    1b36:	97 fd       	sbrc	r25, 7
    1b38:	a0 95       	com	r26
    1b3a:	ba 2f       	mov	r27, r26
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__floatsisf>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	20 91 5b 03 	lds	r18, 0x035B
    1b4c:	30 91 5c 03 	lds	r19, 0x035C
    1b50:	40 91 5d 03 	lds	r20, 0x035D
    1b54:	50 91 5e 03 	lds	r21, 0x035E
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9c 01       	movw	r18, r24
    1b66:	ad 01       	movw	r20, r26
    1b68:	c8 01       	movw	r24, r16
    1b6a:	b7 01       	movw	r22, r14
    1b6c:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__addsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__fixsfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	90 93 95 03 	sts	0x0395, r25
    1b84:	80 93 94 03 	sts	0x0394, r24
	if(pow_diff > max) pow_diff = max;
    1b88:	20 91 94 03 	lds	r18, 0x0394
    1b8c:	30 91 95 03 	lds	r19, 0x0395
    1b90:	80 91 04 02 	lds	r24, 0x0204
    1b94:	90 91 05 02 	lds	r25, 0x0205
    1b98:	82 17       	cp	r24, r18
    1b9a:	93 07       	cpc	r25, r19
    1b9c:	44 f4       	brge	.+16     	; 0x1bae <init_sensor_values+0x314>
    1b9e:	80 91 04 02 	lds	r24, 0x0204
    1ba2:	90 91 05 02 	lds	r25, 0x0205
    1ba6:	90 93 95 03 	sts	0x0395, r25
    1baa:	80 93 94 03 	sts	0x0394, r24
	if(pow_diff < -max) pow_diff = -max;
    1bae:	80 91 04 02 	lds	r24, 0x0204
    1bb2:	90 91 05 02 	lds	r25, 0x0205
    1bb6:	22 27       	eor	r18, r18
    1bb8:	33 27       	eor	r19, r19
    1bba:	28 1b       	sub	r18, r24
    1bbc:	39 0b       	sbc	r19, r25
    1bbe:	80 91 94 03 	lds	r24, 0x0394
    1bc2:	90 91 95 03 	lds	r25, 0x0395
    1bc6:	82 17       	cp	r24, r18
    1bc8:	93 07       	cpc	r25, r19
    1bca:	5c f4       	brge	.+22     	; 0x1be2 <init_sensor_values+0x348>
    1bcc:	80 91 04 02 	lds	r24, 0x0204
    1bd0:	90 91 05 02 	lds	r25, 0x0205
    1bd4:	90 95       	com	r25
    1bd6:	81 95       	neg	r24
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bda:	90 93 95 03 	sts	0x0395, r25
    1bde:	80 93 94 03 	sts	0x0394, r24
	
	fsharp = ADC_Conversion(11);
    1be2:	8b e0       	ldi	r24, 0x0B	; 11
    1be4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <ADC_Conversion>
    1be8:	80 93 59 03 	sts	0x0359, r24
	fir = ADC_Conversion(6);
    1bec:	86 e0       	ldi	r24, 0x06	; 6
    1bee:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <ADC_Conversion>
    1bf2:	80 93 5a 03 	sts	0x035A, r24
}
    1bf6:	28 96       	adiw	r28, 0x08	; 8
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	08 95       	ret

00001c10 <take_turn>:


void take_turn(int d)
{
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	aa 97       	sbiw	r28, 0x2a	; 42
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	98 a3       	std	Y+32, r25	; 0x20
    1c2e:	8f 8f       	std	Y+31, r24	; 0x1f
	int flag=0;
    1c30:	1e 8e       	std	Y+30, r1	; 0x1e
    1c32:	1d 8e       	std	Y+29, r1	; 0x1d
	while(1)
	{
		if(d==1) left();
    1c34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c36:	98 a1       	ldd	r25, Y+32	; 0x20
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	19 f4       	brne	.+6      	; 0x1c44 <take_turn+0x34>
    1c3e:	0e 94 1b 02 	call	0x436	; 0x436 <left>
    1c42:	07 c0       	rjmp	.+14     	; 0x1c52 <take_turn+0x42>
		else if(d==2) right();
    1c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c46:	98 a1       	ldd	r25, Y+32	; 0x20
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <take_turn+0x42>
    1c4e:	0e 94 25 02 	call	0x44a	; 0x44a <right>
		init_sensor_values();
    1c52:	0e 94 4d 0c 	call	0x189a	; 0x189a <init_sensor_values>
		if(pow_diff < 0) velocity((max+pow_diff), max);
    1c56:	80 91 94 03 	lds	r24, 0x0394
    1c5a:	90 91 95 03 	lds	r25, 0x0395
    1c5e:	99 23       	and	r25, r25
    1c60:	a4 f4       	brge	.+40     	; 0x1c8a <take_turn+0x7a>
    1c62:	80 91 04 02 	lds	r24, 0x0204
    1c66:	90 91 05 02 	lds	r25, 0x0205
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	80 91 94 03 	lds	r24, 0x0394
    1c70:	90 91 95 03 	lds	r25, 0x0395
    1c74:	28 0f       	add	r18, r24
    1c76:	80 91 04 02 	lds	r24, 0x0204
    1c7a:	90 91 05 02 	lds	r25, 0x0205
    1c7e:	98 2f       	mov	r25, r24
    1c80:	82 2f       	mov	r24, r18
    1c82:	69 2f       	mov	r22, r25
    1c84:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <velocity>
    1c88:	14 c0       	rjmp	.+40     	; 0x1cb2 <take_turn+0xa2>
		else velocity(max, (max-pow_diff));	
    1c8a:	80 91 04 02 	lds	r24, 0x0204
    1c8e:	90 91 05 02 	lds	r25, 0x0205
    1c92:	38 2f       	mov	r19, r24
    1c94:	80 91 04 02 	lds	r24, 0x0204
    1c98:	90 91 05 02 	lds	r25, 0x0205
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	80 91 94 03 	lds	r24, 0x0394
    1ca2:	90 91 95 03 	lds	r25, 0x0395
    1ca6:	92 2f       	mov	r25, r18
    1ca8:	98 1b       	sub	r25, r24
    1caa:	83 2f       	mov	r24, r19
    1cac:	69 2f       	mov	r22, r25
    1cae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <velocity>
		
		if(cline<thresh && lline<thresh && rline<thresh)  //all on white
    1cb2:	80 91 57 03 	lds	r24, 0x0357
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	80 91 06 02 	lds	r24, 0x0206
    1cbe:	90 91 07 02 	lds	r25, 0x0207
    1cc2:	28 17       	cp	r18, r24
    1cc4:	39 07       	cpc	r19, r25
    1cc6:	0c f0       	brlt	.+2      	; 0x1cca <take_turn+0xba>
    1cc8:	b5 cf       	rjmp	.-150    	; 0x1c34 <take_turn+0x24>
    1cca:	80 91 56 03 	lds	r24, 0x0356
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	80 91 06 02 	lds	r24, 0x0206
    1cd6:	90 91 07 02 	lds	r25, 0x0207
    1cda:	28 17       	cp	r18, r24
    1cdc:	39 07       	cpc	r19, r25
    1cde:	0c f0       	brlt	.+2      	; 0x1ce2 <take_turn+0xd2>
    1ce0:	a9 cf       	rjmp	.-174    	; 0x1c34 <take_turn+0x24>
    1ce2:	80 91 58 03 	lds	r24, 0x0358
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	80 91 06 02 	lds	r24, 0x0206
    1cee:	90 91 07 02 	lds	r25, 0x0207
    1cf2:	28 17       	cp	r18, r24
    1cf4:	39 07       	cpc	r19, r25
    1cf6:	0c f0       	brlt	.+2      	; 0x1cfa <take_turn+0xea>
    1cf8:	9d cf       	rjmp	.-198    	; 0x1c34 <take_turn+0x24>
		{
			stop();
    1cfa:	0e 94 43 02 	call	0x486	; 0x486 <stop>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a8 e4       	ldi	r26, 0x48	; 72
    1d04:	b2 e4       	ldi	r27, 0x42	; 66
    1d06:	89 8f       	std	Y+25, r24	; 0x19
    1d08:	9a 8f       	std	Y+26, r25	; 0x1a
    1d0a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d16:	2d ec       	ldi	r18, 0xCD	; 205
    1d18:	3c ec       	ldi	r19, 0xCC	; 204
    1d1a:	4c e2       	ldi	r20, 0x2C	; 44
    1d1c:	55 e4       	ldi	r21, 0x45	; 69
    1d1e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8d 8b       	std	Y+21, r24	; 0x15
    1d28:	9e 8b       	std	Y+22, r25	; 0x16
    1d2a:	af 8b       	std	Y+23, r26	; 0x17
    1d2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d30:	7e 89       	ldd	r23, Y+22	; 0x16
    1d32:	8f 89       	ldd	r24, Y+23	; 0x17
    1d34:	98 8d       	ldd	r25, Y+24	; 0x18
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <take_turn+0x140>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9c 8b       	std	Y+20, r25	; 0x14
    1d4c:	8b 8b       	std	Y+19, r24	; 0x13
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <take_turn+0x1be>
	else if (__tmp > 65535)
    1d50:	6d 89       	ldd	r22, Y+21	; 0x15
    1d52:	7e 89       	ldd	r23, Y+22	; 0x16
    1d54:	8f 89       	ldd	r24, Y+23	; 0x17
    1d56:	98 8d       	ldd	r25, Y+24	; 0x18
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <take_turn+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	69 8d       	ldd	r22, Y+25	; 0x19
    1d6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9c 8b       	std	Y+20, r25	; 0x14
    1d8e:	8b 8b       	std	Y+19, r24	; 0x13
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <take_turn+0x1a0>
    1d92:	84 e1       	ldi	r24, 0x14	; 20
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	9a 8b       	std	Y+18, r25	; 0x12
    1d98:	89 8b       	std	Y+17, r24	; 0x11
    1d9a:	89 89       	ldd	r24, Y+17	; 0x11
    1d9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <take_turn+0x18e>
    1da2:	9a 8b       	std	Y+18, r25	; 0x12
    1da4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8b 89       	ldd	r24, Y+19	; 0x13
    1da8:	9c 89       	ldd	r25, Y+20	; 0x14
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	9c 8b       	std	Y+20, r25	; 0x14
    1dae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8b 89       	ldd	r24, Y+19	; 0x13
    1db2:	9c 89       	ldd	r25, Y+20	; 0x14
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <take_turn+0x182>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <take_turn+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc2:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9c 8b       	std	Y+20, r25	; 0x14
    1dcc:	8b 8b       	std	Y+19, r24	; 0x13
    1dce:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd2:	98 8b       	std	Y+16, r25	; 0x10
    1dd4:	8f 87       	std	Y+15, r24	; 0x0f
    1dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd8:	98 89       	ldd	r25, Y+16	; 0x10
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <take_turn+0x1ca>
    1dde:	98 8b       	std	Y+16, r25	; 0x10
    1de0:	8f 87       	std	Y+15, r24	; 0x0f
			break;
		}
	}
	while(1)
	{
		if(d==1) left();
    1de2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de4:	98 a1       	ldd	r25, Y+32	; 0x20
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	91 05       	cpc	r25, r1
    1dea:	19 f4       	brne	.+6      	; 0x1df2 <take_turn+0x1e2>
    1dec:	0e 94 1b 02 	call	0x436	; 0x436 <left>
    1df0:	07 c0       	rjmp	.+14     	; 0x1e00 <take_turn+0x1f0>
		else if(d==2) right();
    1df2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df4:	98 a1       	ldd	r25, Y+32	; 0x20
    1df6:	82 30       	cpi	r24, 0x02	; 2
    1df8:	91 05       	cpc	r25, r1
    1dfa:	11 f4       	brne	.+4      	; 0x1e00 <take_turn+0x1f0>
    1dfc:	0e 94 25 02 	call	0x44a	; 0x44a <right>
		init_sensor_values();
    1e00:	0e 94 4d 0c 	call	0x189a	; 0x189a <init_sensor_values>
		if(pow_diff < 0) velocity((max+pow_diff)/2, max/2);
    1e04:	80 91 94 03 	lds	r24, 0x0394
    1e08:	90 91 95 03 	lds	r25, 0x0395
    1e0c:	99 23       	and	r25, r25
    1e0e:	9c f5       	brge	.+102    	; 0x1e76 <take_turn+0x266>
    1e10:	80 91 04 02 	lds	r24, 0x0204
    1e14:	90 91 05 02 	lds	r25, 0x0205
    1e18:	20 91 94 03 	lds	r18, 0x0394
    1e1c:	30 91 95 03 	lds	r19, 0x0395
    1e20:	82 0f       	add	r24, r18
    1e22:	93 1f       	adc	r25, r19
    1e24:	9c a3       	std	Y+36, r25	; 0x24
    1e26:	8b a3       	std	Y+35, r24	; 0x23
    1e28:	4b a1       	ldd	r20, Y+35	; 0x23
    1e2a:	5c a1       	ldd	r21, Y+36	; 0x24
    1e2c:	55 23       	and	r21, r21
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <take_turn+0x22a>
    1e30:	8b a1       	ldd	r24, Y+35	; 0x23
    1e32:	9c a1       	ldd	r25, Y+36	; 0x24
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	9c a3       	std	Y+36, r25	; 0x24
    1e38:	8b a3       	std	Y+35, r24	; 0x23
    1e3a:	8b a1       	ldd	r24, Y+35	; 0x23
    1e3c:	9c a1       	ldd	r25, Y+36	; 0x24
    1e3e:	95 95       	asr	r25
    1e40:	87 95       	ror	r24
    1e42:	8a a3       	std	Y+34, r24	; 0x22
    1e44:	80 91 04 02 	lds	r24, 0x0204
    1e48:	90 91 05 02 	lds	r25, 0x0205
    1e4c:	9e a3       	std	Y+38, r25	; 0x26
    1e4e:	8d a3       	std	Y+37, r24	; 0x25
    1e50:	4d a1       	ldd	r20, Y+37	; 0x25
    1e52:	5e a1       	ldd	r21, Y+38	; 0x26
    1e54:	55 23       	and	r21, r21
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <take_turn+0x252>
    1e58:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	9e a3       	std	Y+38, r25	; 0x26
    1e60:	8d a3       	std	Y+37, r24	; 0x25
    1e62:	8d a1       	ldd	r24, Y+37	; 0x25
    1e64:	9e a1       	ldd	r25, Y+38	; 0x26
    1e66:	95 95       	asr	r25
    1e68:	87 95       	ror	r24
    1e6a:	98 2f       	mov	r25, r24
    1e6c:	8a a1       	ldd	r24, Y+34	; 0x22
    1e6e:	69 2f       	mov	r22, r25
    1e70:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <velocity>
    1e74:	35 c0       	rjmp	.+106    	; 0x1ee0 <take_turn+0x2d0>
		else velocity(max/2, (max-pow_diff)/2);
    1e76:	80 91 04 02 	lds	r24, 0x0204
    1e7a:	90 91 05 02 	lds	r25, 0x0205
    1e7e:	98 a7       	std	Y+40, r25	; 0x28
    1e80:	8f a3       	std	Y+39, r24	; 0x27
    1e82:	4f a1       	ldd	r20, Y+39	; 0x27
    1e84:	58 a5       	ldd	r21, Y+40	; 0x28
    1e86:	55 23       	and	r21, r21
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <take_turn+0x284>
    1e8a:	8f a1       	ldd	r24, Y+39	; 0x27
    1e8c:	98 a5       	ldd	r25, Y+40	; 0x28
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	98 a7       	std	Y+40, r25	; 0x28
    1e92:	8f a3       	std	Y+39, r24	; 0x27
    1e94:	8f a1       	ldd	r24, Y+39	; 0x27
    1e96:	98 a5       	ldd	r25, Y+40	; 0x28
    1e98:	95 95       	asr	r25
    1e9a:	87 95       	ror	r24
    1e9c:	89 a3       	std	Y+33, r24	; 0x21
    1e9e:	20 91 04 02 	lds	r18, 0x0204
    1ea2:	30 91 05 02 	lds	r19, 0x0205
    1ea6:	80 91 94 03 	lds	r24, 0x0394
    1eaa:	90 91 95 03 	lds	r25, 0x0395
    1eae:	a9 01       	movw	r20, r18
    1eb0:	48 1b       	sub	r20, r24
    1eb2:	59 0b       	sbc	r21, r25
    1eb4:	ca 01       	movw	r24, r20
    1eb6:	9a a7       	std	Y+42, r25	; 0x2a
    1eb8:	89 a7       	std	Y+41, r24	; 0x29
    1eba:	89 a5       	ldd	r24, Y+41	; 0x29
    1ebc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ebe:	99 23       	and	r25, r25
    1ec0:	34 f4       	brge	.+12     	; 0x1ece <take_turn+0x2be>
    1ec2:	49 a5       	ldd	r20, Y+41	; 0x29
    1ec4:	5a a5       	ldd	r21, Y+42	; 0x2a
    1ec6:	4f 5f       	subi	r20, 0xFF	; 255
    1ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eca:	5a a7       	std	Y+42, r21	; 0x2a
    1ecc:	49 a7       	std	Y+41, r20	; 0x29
    1ece:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed2:	95 95       	asr	r25
    1ed4:	87 95       	ror	r24
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eda:	69 2f       	mov	r22, r25
    1edc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <velocity>

		if(cline>thresh && lline>thresh*0.6 && d==1) flag=1;
    1ee0:	80 91 57 03 	lds	r24, 0x0357
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	80 91 06 02 	lds	r24, 0x0206
    1eec:	90 91 07 02 	lds	r25, 0x0207
    1ef0:	82 17       	cp	r24, r18
    1ef2:	93 07       	cpc	r25, r19
    1ef4:	bc f5       	brge	.+110    	; 0x1f64 <take_turn+0x354>
    1ef6:	80 91 56 03 	lds	r24, 0x0356
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	aa 27       	eor	r26, r26
    1f00:	97 fd       	sbrc	r25, 7
    1f02:	a0 95       	com	r26
    1f04:	ba 2f       	mov	r27, r26
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__floatsisf>
    1f0e:	7b 01       	movw	r14, r22
    1f10:	8c 01       	movw	r16, r24
    1f12:	80 91 06 02 	lds	r24, 0x0206
    1f16:	90 91 07 02 	lds	r25, 0x0207
    1f1a:	aa 27       	eor	r26, r26
    1f1c:	97 fd       	sbrc	r25, 7
    1f1e:	a0 95       	com	r26
    1f20:	ba 2f       	mov	r27, r26
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__floatsisf>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	2a e9       	ldi	r18, 0x9A	; 154
    1f34:	39 e9       	ldi	r19, 0x99	; 153
    1f36:	49 e1       	ldi	r20, 0x19	; 25
    1f38:	5f e3       	ldi	r21, 0x3F	; 63
    1f3a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9c 01       	movw	r18, r24
    1f44:	ad 01       	movw	r20, r26
    1f46:	c8 01       	movw	r24, r16
    1f48:	b7 01       	movw	r22, r14
    1f4a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    1f4e:	18 16       	cp	r1, r24
    1f50:	4c f4       	brge	.+18     	; 0x1f64 <take_turn+0x354>
    1f52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f54:	98 a1       	ldd	r25, Y+32	; 0x20
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	91 05       	cpc	r25, r1
    1f5a:	21 f4       	brne	.+8      	; 0x1f64 <take_turn+0x354>
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9e 8f       	std	Y+30, r25	; 0x1e
    1f62:	8d 8f       	std	Y+29, r24	; 0x1d
		if(cline>thresh && rline>thresh*0.6 && d==2) flag=1;
    1f64:	80 91 57 03 	lds	r24, 0x0357
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	80 91 06 02 	lds	r24, 0x0206
    1f70:	90 91 07 02 	lds	r25, 0x0207
    1f74:	82 17       	cp	r24, r18
    1f76:	93 07       	cpc	r25, r19
    1f78:	bc f5       	brge	.+110    	; 0x1fe8 <take_turn+0x3d8>
    1f7a:	80 91 58 03 	lds	r24, 0x0358
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	aa 27       	eor	r26, r26
    1f84:	97 fd       	sbrc	r25, 7
    1f86:	a0 95       	com	r26
    1f88:	ba 2f       	mov	r27, r26
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__floatsisf>
    1f92:	7b 01       	movw	r14, r22
    1f94:	8c 01       	movw	r16, r24
    1f96:	80 91 06 02 	lds	r24, 0x0206
    1f9a:	90 91 07 02 	lds	r25, 0x0207
    1f9e:	aa 27       	eor	r26, r26
    1fa0:	97 fd       	sbrc	r25, 7
    1fa2:	a0 95       	com	r26
    1fa4:	ba 2f       	mov	r27, r26
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__floatsisf>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	2a e9       	ldi	r18, 0x9A	; 154
    1fb8:	39 e9       	ldi	r19, 0x99	; 153
    1fba:	49 e1       	ldi	r20, 0x19	; 25
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9c 01       	movw	r18, r24
    1fc8:	ad 01       	movw	r20, r26
    1fca:	c8 01       	movw	r24, r16
    1fcc:	b7 01       	movw	r22, r14
    1fce:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	4c f4       	brge	.+18     	; 0x1fe8 <take_turn+0x3d8>
    1fd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fd8:	98 a1       	ldd	r25, Y+32	; 0x20
    1fda:	82 30       	cpi	r24, 0x02	; 2
    1fdc:	91 05       	cpc	r25, r1
    1fde:	21 f4       	brne	.+8      	; 0x1fe8 <take_turn+0x3d8>
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9e 8f       	std	Y+30, r25	; 0x1e
    1fe6:	8d 8f       	std	Y+29, r24	; 0x1d
		if(flag==1)
    1fe8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	91 05       	cpc	r25, r1
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <take_turn+0x3e4>
    1ff2:	f7 ce       	rjmp	.-530    	; 0x1de2 <take_turn+0x1d2>
		{
			stop();
    1ff4:	0e 94 43 02 	call	0x486	; 0x486 <stop>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a0 e2       	ldi	r26, 0x20	; 32
    1ffe:	b2 e4       	ldi	r27, 0x42	; 66
    2000:	8b 87       	std	Y+11, r24	; 0x0b
    2002:	9c 87       	std	Y+12, r25	; 0x0c
    2004:	ad 87       	std	Y+13, r26	; 0x0d
    2006:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2008:	6b 85       	ldd	r22, Y+11	; 0x0b
    200a:	7c 85       	ldd	r23, Y+12	; 0x0c
    200c:	8d 85       	ldd	r24, Y+13	; 0x0d
    200e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2010:	2d ec       	ldi	r18, 0xCD	; 205
    2012:	3c ec       	ldi	r19, 0xCC	; 204
    2014:	4c e2       	ldi	r20, 0x2C	; 44
    2016:	55 e4       	ldi	r21, 0x45	; 69
    2018:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8f 83       	std	Y+7, r24	; 0x07
    2022:	98 87       	std	Y+8, r25	; 0x08
    2024:	a9 87       	std	Y+9, r26	; 0x09
    2026:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2028:	6f 81       	ldd	r22, Y+7	; 0x07
    202a:	78 85       	ldd	r23, Y+8	; 0x08
    202c:	89 85       	ldd	r24, Y+9	; 0x09
    202e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e8       	ldi	r20, 0x80	; 128
    2036:	5f e3       	ldi	r21, 0x3F	; 63
    2038:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    203c:	88 23       	and	r24, r24
    203e:	2c f4       	brge	.+10     	; 0x204a <take_turn+0x43a>
		__ticks = 1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	3f c0       	rjmp	.+126    	; 0x20c8 <take_turn+0x4b8>
	else if (__tmp > 65535)
    204a:	6f 81       	ldd	r22, Y+7	; 0x07
    204c:	78 85       	ldd	r23, Y+8	; 0x08
    204e:	89 85       	ldd	r24, Y+9	; 0x09
    2050:	9a 85       	ldd	r25, Y+10	; 0x0a
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	3f ef       	ldi	r19, 0xFF	; 255
    2056:	4f e7       	ldi	r20, 0x7F	; 127
    2058:	57 e4       	ldi	r21, 0x47	; 71
    205a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    205e:	18 16       	cp	r1, r24
    2060:	4c f5       	brge	.+82     	; 0x20b4 <take_turn+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2062:	6b 85       	ldd	r22, Y+11	; 0x0b
    2064:	7c 85       	ldd	r23, Y+12	; 0x0c
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e2       	ldi	r20, 0x20	; 32
    2070:	51 e4       	ldi	r21, 0x41	; 65
    2072:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9e 83       	std	Y+6, r25	; 0x06
    2088:	8d 83       	std	Y+5, r24	; 0x05
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <take_turn+0x49a>
    208c:	84 e1       	ldi	r24, 0x14	; 20
    208e:	91 e0       	ldi	r25, 0x01	; 1
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	8b 83       	std	Y+3, r24	; 0x03
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	9c 81       	ldd	r25, Y+4	; 0x04
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <take_turn+0x488>
    209c:	9c 83       	std	Y+4, r25	; 0x04
    209e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	9e 81       	ldd	r25, Y+6	; 0x06
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	69 f7       	brne	.-38     	; 0x208c <take_turn+0x47c>
    20b2:	14 c0       	rjmp	.+40     	; 0x20dc <take_turn+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b4:	6f 81       	ldd	r22, Y+7	; 0x07
    20b6:	78 85       	ldd	r23, Y+8	; 0x08
    20b8:	89 85       	ldd	r24, Y+9	; 0x09
    20ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    20bc:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	9e 81       	ldd	r25, Y+6	; 0x06
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <take_turn+0x4c4>
    20d8:	9a 83       	std	Y+2, r25	; 0x02
    20da:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(40);
			break;
		}
	}
    20dc:	aa 96       	adiw	r28, 0x2a	; 42
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	08 95       	ret

000020f6 <turn_left>:

}

void turn_left()
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
	lcd_cursor(1,1);		
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	61 e0       	ldi	r22, 0x01	; 1
    2102:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
	lcd_string("Left");
    2106:	88 e0       	ldi	r24, 0x08	; 8
    2108:	92 e0       	ldi	r25, 0x02	; 2
    210a:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_string>
	take_turn(1);
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <take_turn>
}
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <turn_right>:
void turn_right()
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
	lcd_cursor(1,1);		
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
	lcd_string("Right");
    212c:	8d e0       	ldi	r24, 0x0D	; 13
    212e:	92 e0       	ldi	r25, 0x02	; 2
    2130:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_string>
	take_turn(2);
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <take_turn>
}
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <checkobstacle>:

int checkobstacle()
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	60 97       	sbiw	r28, 0x10	; 16
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
	init_sensor_values();
    2156:	0e 94 4d 0c 	call	0x189a	; 0x189a <init_sensor_values>
	if(fsharp>0x82 || fir<0xF0)
    215a:	80 91 59 03 	lds	r24, 0x0359
    215e:	83 38       	cpi	r24, 0x83	; 131
    2160:	28 f4       	brcc	.+10     	; 0x216c <checkobstacle+0x2a>
    2162:	80 91 5a 03 	lds	r24, 0x035A
    2166:	80 3f       	cpi	r24, 0xF0	; 240
    2168:	08 f0       	brcs	.+2      	; 0x216c <checkobstacle+0x2a>
    216a:	7f c0       	rjmp	.+254    	; 0x226a <__stack+0x6b>
	{
		stop();
    216c:	0e 94 43 02 	call	0x486	; 0x486 <stop>
		lcd_cursor(1,1);		
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
		lcd_string("Obstacle");		
    2178:	83 e1       	ldi	r24, 0x13	; 19
    217a:	92 e0       	ldi	r25, 0x02	; 2
    217c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_string>
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a8 ec       	ldi	r26, 0xC8	; 200
    2186:	b2 e4       	ldi	r27, 0x42	; 66
    2188:	8b 87       	std	Y+11, r24	; 0x0b
    218a:	9c 87       	std	Y+12, r25	; 0x0c
    218c:	ad 87       	std	Y+13, r26	; 0x0d
    218e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2190:	6b 85       	ldd	r22, Y+11	; 0x0b
    2192:	7c 85       	ldd	r23, Y+12	; 0x0c
    2194:	8d 85       	ldd	r24, Y+13	; 0x0d
    2196:	9e 85       	ldd	r25, Y+14	; 0x0e
    2198:	2d ec       	ldi	r18, 0xCD	; 205
    219a:	3c ec       	ldi	r19, 0xCC	; 204
    219c:	4c e2       	ldi	r20, 0x2C	; 44
    219e:	55 e4       	ldi	r21, 0x45	; 69
    21a0:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	8f 83       	std	Y+7, r24	; 0x07
    21aa:	98 87       	std	Y+8, r25	; 0x08
    21ac:	a9 87       	std	Y+9, r26	; 0x09
    21ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b0:	6f 81       	ldd	r22, Y+7	; 0x07
    21b2:	78 85       	ldd	r23, Y+8	; 0x08
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f e3       	ldi	r21, 0x3F	; 63
    21c0:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	2c f4       	brge	.+10     	; 0x21d2 <checkobstacle+0x90>
		__ticks = 1;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9e 83       	std	Y+6, r25	; 0x06
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	3f c0       	rjmp	.+126    	; 0x2250 <__stack+0x51>
	else if (__tmp > 65535)
    21d2:	6f 81       	ldd	r22, Y+7	; 0x07
    21d4:	78 85       	ldd	r23, Y+8	; 0x08
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	57 e4       	ldi	r21, 0x47	; 71
    21e2:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	4c f5       	brge	.+82     	; 0x223c <__stack+0x3d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e2       	ldi	r20, 0x20	; 32
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <__stack+0x33>
    2214:	84 e1       	ldi	r24, 0x14	; 20
    2216:	91 e0       	ldi	r25, 0x01	; 1
    2218:	9c 83       	std	Y+4, r25	; 0x04
    221a:	8b 83       	std	Y+3, r24	; 0x03
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <__stack+0x21>
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	9e 81       	ldd	r25, Y+6	; 0x06
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2232:	8d 81       	ldd	r24, Y+5	; 0x05
    2234:	9e 81       	ldd	r25, Y+6	; 0x06
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	69 f7       	brne	.-38     	; 0x2214 <__stack+0x15>
    223a:	14 c0       	rjmp	.+40     	; 0x2264 <__stack+0x65>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223c:	6f 81       	ldd	r22, Y+7	; 0x07
    223e:	78 85       	ldd	r23, Y+8	; 0x08
    2240:	89 85       	ldd	r24, Y+9	; 0x09
    2242:	9a 85       	ldd	r25, Y+10	; 0x0a
    2244:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	9e 81       	ldd	r25, Y+6	; 0x06
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	9a 81       	ldd	r25, Y+2	; 0x02
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <__stack+0x5d>
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);		
		return  0;
    2264:	18 8a       	std	Y+16, r1	; 0x10
    2266:	1f 86       	std	Y+15, r1	; 0x0f
    2268:	04 c0       	rjmp	.+8      	; 0x2272 <__stack+0x73>
	}	
	return 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	98 8b       	std	Y+16, r25	; 0x10
    2270:	8f 87       	std	Y+15, r24	; 0x0f
    2272:	8f 85       	ldd	r24, Y+15	; 0x0f
    2274:	98 89       	ldd	r25, Y+16	; 0x10
}
    2276:	60 96       	adiw	r28, 0x10	; 16
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <checkintersection>:

int checkintersection()
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	6e 97       	sbiw	r28, 0x1e	; 30
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
	if( cline<0x28 && lline < 0x28 && rline < 0x28)
    229c:	80 91 57 03 	lds	r24, 0x0357
    22a0:	88 32       	cpi	r24, 0x28	; 40
    22a2:	08 f0       	brcs	.+2      	; 0x22a6 <checkintersection+0x1e>
    22a4:	2f c1       	rjmp	.+606    	; 0x2504 <checkintersection+0x27c>
    22a6:	80 91 56 03 	lds	r24, 0x0356
    22aa:	88 32       	cpi	r24, 0x28	; 40
    22ac:	08 f0       	brcs	.+2      	; 0x22b0 <checkintersection+0x28>
    22ae:	2a c1       	rjmp	.+596    	; 0x2504 <checkintersection+0x27c>
    22b0:	80 91 58 03 	lds	r24, 0x0358
    22b4:	88 32       	cpi	r24, 0x28	; 40
    22b6:	08 f0       	brcs	.+2      	; 0x22ba <checkintersection+0x32>
    22b8:	25 c1       	rjmp	.+586    	; 0x2504 <checkintersection+0x27c>
	{

		lcd_cursor(1,1);		
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	61 e0       	ldi	r22, 0x01	; 1
    22be:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
		lcd_string("Intersection");
    22c2:	8c e1       	ldi	r24, 0x1C	; 28
    22c4:	92 e0       	ldi	r25, 0x02	; 2
    22c6:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_string>
		init_sensor_values();
    22ca:	0e 94 4d 0c 	call	0x189a	; 0x189a <init_sensor_values>
		forward();
    22ce:	0e 94 07 02 	call	0x40e	; 0x40e <forward>
		if(pow_diff < 0) velocity(max+pow_diff, max);
    22d2:	80 91 94 03 	lds	r24, 0x0394
    22d6:	90 91 95 03 	lds	r25, 0x0395
    22da:	99 23       	and	r25, r25
    22dc:	a4 f4       	brge	.+40     	; 0x2306 <checkintersection+0x7e>
    22de:	80 91 04 02 	lds	r24, 0x0204
    22e2:	90 91 05 02 	lds	r25, 0x0205
    22e6:	28 2f       	mov	r18, r24
    22e8:	80 91 94 03 	lds	r24, 0x0394
    22ec:	90 91 95 03 	lds	r25, 0x0395
    22f0:	28 0f       	add	r18, r24
    22f2:	80 91 04 02 	lds	r24, 0x0204
    22f6:	90 91 05 02 	lds	r25, 0x0205
    22fa:	98 2f       	mov	r25, r24
    22fc:	82 2f       	mov	r24, r18
    22fe:	69 2f       	mov	r22, r25
    2300:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <velocity>
    2304:	14 c0       	rjmp	.+40     	; 0x232e <checkintersection+0xa6>
		else velocity(max, max-pow_diff);
    2306:	80 91 04 02 	lds	r24, 0x0204
    230a:	90 91 05 02 	lds	r25, 0x0205
    230e:	38 2f       	mov	r19, r24
    2310:	80 91 04 02 	lds	r24, 0x0204
    2314:	90 91 05 02 	lds	r25, 0x0205
    2318:	28 2f       	mov	r18, r24
    231a:	80 91 94 03 	lds	r24, 0x0394
    231e:	90 91 95 03 	lds	r25, 0x0395
    2322:	92 2f       	mov	r25, r18
    2324:	98 1b       	sub	r25, r24
    2326:	83 2f       	mov	r24, r19
    2328:	69 2f       	mov	r22, r25
    232a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <velocity>
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	aa e7       	ldi	r26, 0x7A	; 122
    2334:	b4 e4       	ldi	r27, 0x44	; 68
    2336:	89 8f       	std	Y+25, r24	; 0x19
    2338:	9a 8f       	std	Y+26, r25	; 0x1a
    233a:	ab 8f       	std	Y+27, r26	; 0x1b
    233c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233e:	69 8d       	ldd	r22, Y+25	; 0x19
    2340:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2344:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2346:	2d ec       	ldi	r18, 0xCD	; 205
    2348:	3c ec       	ldi	r19, 0xCC	; 204
    234a:	4c e2       	ldi	r20, 0x2C	; 44
    234c:	55 e4       	ldi	r21, 0x45	; 69
    234e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	8d 8b       	std	Y+21, r24	; 0x15
    2358:	9e 8b       	std	Y+22, r25	; 0x16
    235a:	af 8b       	std	Y+23, r26	; 0x17
    235c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    235e:	6d 89       	ldd	r22, Y+21	; 0x15
    2360:	7e 89       	ldd	r23, Y+22	; 0x16
    2362:	8f 89       	ldd	r24, Y+23	; 0x17
    2364:	98 8d       	ldd	r25, Y+24	; 0x18
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e8       	ldi	r20, 0x80	; 128
    236c:	5f e3       	ldi	r21, 0x3F	; 63
    236e:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    2372:	88 23       	and	r24, r24
    2374:	2c f4       	brge	.+10     	; 0x2380 <checkintersection+0xf8>
		__ticks = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9c 8b       	std	Y+20, r25	; 0x14
    237c:	8b 8b       	std	Y+19, r24	; 0x13
    237e:	3f c0       	rjmp	.+126    	; 0x23fe <checkintersection+0x176>
	else if (__tmp > 65535)
    2380:	6d 89       	ldd	r22, Y+21	; 0x15
    2382:	7e 89       	ldd	r23, Y+22	; 0x16
    2384:	8f 89       	ldd	r24, Y+23	; 0x17
    2386:	98 8d       	ldd	r25, Y+24	; 0x18
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    2394:	18 16       	cp	r1, r24
    2396:	4c f5       	brge	.+82     	; 0x23ea <checkintersection+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2398:	69 8d       	ldd	r22, Y+25	; 0x19
    239a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    239c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e2       	ldi	r20, 0x20	; 32
    23a6:	51 e4       	ldi	r21, 0x41	; 65
    23a8:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9c 8b       	std	Y+20, r25	; 0x14
    23be:	8b 8b       	std	Y+19, r24	; 0x13
    23c0:	0f c0       	rjmp	.+30     	; 0x23e0 <checkintersection+0x158>
    23c2:	84 e1       	ldi	r24, 0x14	; 20
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	9a 8b       	std	Y+18, r25	; 0x12
    23c8:	89 8b       	std	Y+17, r24	; 0x11
    23ca:	89 89       	ldd	r24, Y+17	; 0x11
    23cc:	9a 89       	ldd	r25, Y+18	; 0x12
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <checkintersection+0x146>
    23d2:	9a 8b       	std	Y+18, r25	; 0x12
    23d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d6:	8b 89       	ldd	r24, Y+19	; 0x13
    23d8:	9c 89       	ldd	r25, Y+20	; 0x14
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	9c 8b       	std	Y+20, r25	; 0x14
    23de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	69 f7       	brne	.-38     	; 0x23c2 <checkintersection+0x13a>
    23e8:	14 c0       	rjmp	.+40     	; 0x2412 <checkintersection+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ea:	6d 89       	ldd	r22, Y+21	; 0x15
    23ec:	7e 89       	ldd	r23, Y+22	; 0x16
    23ee:	8f 89       	ldd	r24, Y+23	; 0x17
    23f0:	98 8d       	ldd	r25, Y+24	; 0x18
    23f2:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9c 8b       	std	Y+20, r25	; 0x14
    23fc:	8b 8b       	std	Y+19, r24	; 0x13
    23fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2400:	9c 89       	ldd	r25, Y+20	; 0x14
    2402:	98 8b       	std	Y+16, r25	; 0x10
    2404:	8f 87       	std	Y+15, r24	; 0x0f
    2406:	8f 85       	ldd	r24, Y+15	; 0x0f
    2408:	98 89       	ldd	r25, Y+16	; 0x10
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <checkintersection+0x182>
    240e:	98 8b       	std	Y+16, r25	; 0x10
    2410:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);		
		stop();
    2412:	0e 94 43 02 	call	0x486	; 0x486 <stop>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	aa ef       	ldi	r26, 0xFA	; 250
    241c:	b4 e4       	ldi	r27, 0x44	; 68
    241e:	8b 87       	std	Y+11, r24	; 0x0b
    2420:	9c 87       	std	Y+12, r25	; 0x0c
    2422:	ad 87       	std	Y+13, r26	; 0x0d
    2424:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	6b 85       	ldd	r22, Y+11	; 0x0b
    2428:	7c 85       	ldd	r23, Y+12	; 0x0c
    242a:	8d 85       	ldd	r24, Y+13	; 0x0d
    242c:	9e 85       	ldd	r25, Y+14	; 0x0e
    242e:	2d ec       	ldi	r18, 0xCD	; 205
    2430:	3c ec       	ldi	r19, 0xCC	; 204
    2432:	4c e2       	ldi	r20, 0x2C	; 44
    2434:	55 e4       	ldi	r21, 0x45	; 69
    2436:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8f 83       	std	Y+7, r24	; 0x07
    2440:	98 87       	std	Y+8, r25	; 0x08
    2442:	a9 87       	std	Y+9, r26	; 0x09
    2444:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	2c f4       	brge	.+10     	; 0x2468 <checkintersection+0x1e0>
		__ticks = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	8d 83       	std	Y+5, r24	; 0x05
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <checkintersection+0x25e>
	else if (__tmp > 65535)
    2468:	6f 81       	ldd	r22, Y+7	; 0x07
    246a:	78 85       	ldd	r23, Y+8	; 0x08
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	4c f5       	brge	.+82     	; 0x24d2 <checkintersection+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	6b 85       	ldd	r22, Y+11	; 0x0b
    2482:	7c 85       	ldd	r23, Y+12	; 0x0c
    2484:	8d 85       	ldd	r24, Y+13	; 0x0d
    2486:	9e 85       	ldd	r25, Y+14	; 0x0e
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <checkintersection+0x240>
    24aa:	84 e1       	ldi	r24, 0x14	; 20
    24ac:	91 e0       	ldi	r25, 0x01	; 1
    24ae:	9c 83       	std	Y+4, r25	; 0x04
    24b0:	8b 83       	std	Y+3, r24	; 0x03
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <checkintersection+0x22e>
    24ba:	9c 83       	std	Y+4, r25	; 0x04
    24bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	8d 81       	ldd	r24, Y+5	; 0x05
    24c0:	9e 81       	ldd	r25, Y+6	; 0x06
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	69 f7       	brne	.-38     	; 0x24aa <checkintersection+0x222>
    24d0:	14 c0       	rjmp	.+40     	; 0x24fa <checkintersection+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	78 85       	ldd	r23, Y+8	; 0x08
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	9a 81       	ldd	r25, Y+2	; 0x02
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <checkintersection+0x26a>
    24f6:	9a 83       	std	Y+2, r25	; 0x02
    24f8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		return 1;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2500:	8d 8f       	std	Y+29, r24	; 0x1d
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <checkintersection+0x280>
	}
	return 0;
    2504:	1e 8e       	std	Y+30, r1	; 0x1e
    2506:	1d 8e       	std	Y+29, r1	; 0x1d
    2508:	8d 8d       	ldd	r24, Y+29	; 0x1d
    250a:	9e 8d       	ldd	r25, Y+30	; 0x1e
}
    250c:	6e 96       	adiw	r28, 0x1e	; 30
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <follow>:


void follow()
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	2e 97       	sbiw	r28, 0x0e	; 14
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
	lcd_cursor(1,1);		
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	61 e0       	ldi	r22, 0x01	; 1
    2536:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
	lcd_string("Go Straight");
    253a:	89 e2       	ldi	r24, 0x29	; 41
    253c:	92 e0       	ldi	r25, 0x02	; 2
    253e:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_string>
	init_sensor_values();
    2542:	0e 94 4d 0c 	call	0x189a	; 0x189a <init_sensor_values>
	forward();
    2546:	0e 94 07 02 	call	0x40e	; 0x40e <forward>
	if(pow_diff < 0) velocity(max+pow_diff, max);
    254a:	80 91 94 03 	lds	r24, 0x0394
    254e:	90 91 95 03 	lds	r25, 0x0395
    2552:	99 23       	and	r25, r25
    2554:	a4 f4       	brge	.+40     	; 0x257e <follow+0x60>
    2556:	80 91 04 02 	lds	r24, 0x0204
    255a:	90 91 05 02 	lds	r25, 0x0205
    255e:	28 2f       	mov	r18, r24
    2560:	80 91 94 03 	lds	r24, 0x0394
    2564:	90 91 95 03 	lds	r25, 0x0395
    2568:	28 0f       	add	r18, r24
    256a:	80 91 04 02 	lds	r24, 0x0204
    256e:	90 91 05 02 	lds	r25, 0x0205
    2572:	98 2f       	mov	r25, r24
    2574:	82 2f       	mov	r24, r18
    2576:	69 2f       	mov	r22, r25
    2578:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <velocity>
    257c:	14 c0       	rjmp	.+40     	; 0x25a6 <follow+0x88>
	else velocity(max, max-pow_diff);
    257e:	80 91 04 02 	lds	r24, 0x0204
    2582:	90 91 05 02 	lds	r25, 0x0205
    2586:	38 2f       	mov	r19, r24
    2588:	80 91 04 02 	lds	r24, 0x0204
    258c:	90 91 05 02 	lds	r25, 0x0205
    2590:	28 2f       	mov	r18, r24
    2592:	80 91 94 03 	lds	r24, 0x0394
    2596:	90 91 95 03 	lds	r25, 0x0395
    259a:	92 2f       	mov	r25, r18
    259c:	98 1b       	sub	r25, r24
    259e:	83 2f       	mov	r24, r19
    25a0:	69 2f       	mov	r22, r25
    25a2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <velocity>

	if((cline<thresh) && (lline<thresh) && (rline<thresh) ) 
    25a6:	80 91 57 03 	lds	r24, 0x0357
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	80 91 06 02 	lds	r24, 0x0206
    25b2:	90 91 07 02 	lds	r25, 0x0207
    25b6:	28 17       	cp	r18, r24
    25b8:	39 07       	cpc	r19, r25
    25ba:	0c f0       	brlt	.+2      	; 0x25be <follow+0xa0>
    25bc:	94 c0       	rjmp	.+296    	; 0x26e6 <follow+0x1c8>
    25be:	80 91 56 03 	lds	r24, 0x0356
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	80 91 06 02 	lds	r24, 0x0206
    25ca:	90 91 07 02 	lds	r25, 0x0207
    25ce:	28 17       	cp	r18, r24
    25d0:	39 07       	cpc	r19, r25
    25d2:	0c f0       	brlt	.+2      	; 0x25d6 <follow+0xb8>
    25d4:	88 c0       	rjmp	.+272    	; 0x26e6 <follow+0x1c8>
    25d6:	80 91 58 03 	lds	r24, 0x0358
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	80 91 06 02 	lds	r24, 0x0206
    25e2:	90 91 07 02 	lds	r25, 0x0207
    25e6:	28 17       	cp	r18, r24
    25e8:	39 07       	cpc	r19, r25
    25ea:	0c f0       	brlt	.+2      	; 0x25ee <follow+0xd0>
    25ec:	7c c0       	rjmp	.+248    	; 0x26e6 <follow+0x1c8>
	{
		
		stop();
    25ee:	0e 94 43 02 	call	0x486	; 0x486 <stop>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a8 ec       	ldi	r26, 0xC8	; 200
    25f8:	b2 e4       	ldi	r27, 0x42	; 66
    25fa:	8b 87       	std	Y+11, r24	; 0x0b
    25fc:	9c 87       	std	Y+12, r25	; 0x0c
    25fe:	ad 87       	std	Y+13, r26	; 0x0d
    2600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2602:	6b 85       	ldd	r22, Y+11	; 0x0b
    2604:	7c 85       	ldd	r23, Y+12	; 0x0c
    2606:	8d 85       	ldd	r24, Y+13	; 0x0d
    2608:	9e 85       	ldd	r25, Y+14	; 0x0e
    260a:	2d ec       	ldi	r18, 0xCD	; 205
    260c:	3c ec       	ldi	r19, 0xCC	; 204
    260e:	4c e2       	ldi	r20, 0x2C	; 44
    2610:	55 e4       	ldi	r21, 0x45	; 69
    2612:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	8f 83       	std	Y+7, r24	; 0x07
    261c:	98 87       	std	Y+8, r25	; 0x08
    261e:	a9 87       	std	Y+9, r26	; 0x09
    2620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	2c f4       	brge	.+10     	; 0x2644 <follow+0x126>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9e 83       	std	Y+6, r25	; 0x06
    2640:	8d 83       	std	Y+5, r24	; 0x05
    2642:	3f c0       	rjmp	.+126    	; 0x26c2 <follow+0x1a4>
	else if (__tmp > 65535)
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	3f ef       	ldi	r19, 0xFF	; 255
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	57 e4       	ldi	r21, 0x47	; 71
    2654:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	4c f5       	brge	.+82     	; 0x26ae <follow+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265c:	6b 85       	ldd	r22, Y+11	; 0x0b
    265e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2660:	8d 85       	ldd	r24, Y+13	; 0x0d
    2662:	9e 85       	ldd	r25, Y+14	; 0x0e
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	51 e4       	ldi	r21, 0x41	; 65
    266c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <follow+0x186>
    2686:	84 e1       	ldi	r24, 0x14	; 20
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <follow+0x174>
    2696:	9c 83       	std	Y+4, r25	; 0x04
    2698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8d 81       	ldd	r24, Y+5	; 0x05
    269c:	9e 81       	ldd	r25, Y+6	; 0x06
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	69 f7       	brne	.-38     	; 0x2686 <follow+0x168>
    26ac:	14 c0       	rjmp	.+40     	; 0x26d6 <follow+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	6f 81       	ldd	r22, Y+7	; 0x07
    26b0:	78 85       	ldd	r23, Y+8	; 0x08
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <follow+0x1b0>
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		lcd_cursor(1,1);		
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	61 e0       	ldi	r22, 0x01	; 1
    26da:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
		lcd_string("Stop");
    26de:	85 e3       	ldi	r24, 0x35	; 53
    26e0:	92 e0       	ldi	r25, 0x02	; 2
    26e2:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_string>
		
	}
}
    26e6:	2e 96       	adiw	r28, 0x0e	; 14
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <__vector_25>:
unsigned char chkid1 = '\0';
unsigned char chkid2 = '\0';
unsigned char mytemp;
const char myid = '1';
SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    26f8:	1f 92       	push	r1
    26fa:	0f 92       	push	r0
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	0f 92       	push	r0
    2700:	00 90 5b 00 	lds	r0, 0x005B
    2704:	0f 92       	push	r0
    2706:	11 24       	eor	r1, r1
    2708:	2f 93       	push	r18
    270a:	3f 93       	push	r19
    270c:	4f 93       	push	r20
    270e:	5f 93       	push	r21
    2710:	6f 93       	push	r22
    2712:	7f 93       	push	r23
    2714:	8f 93       	push	r24
    2716:	9f 93       	push	r25
    2718:	af 93       	push	r26
    271a:	bf 93       	push	r27
    271c:	ef 93       	push	r30
    271e:	ff 93       	push	r31
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
	//receiving protocol : d myid data --> 3chars sent by coordinator
	cli();
    2728:	f8 94       	cli
	mytemp = UDR0 ;
    272a:	e6 ec       	ldi	r30, 0xC6	; 198
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	80 93 6f 03 	sts	0x036F, r24
	if(chkid1 != '\0') //2nd char received
    2734:	80 91 6b 03 	lds	r24, 0x036B
    2738:	88 23       	and	r24, r24
    273a:	61 f1       	breq	.+88     	; 0x2794 <__vector_25+0x9c>
	{
		if(chkid2 != '\0') //3rd char received
    273c:	80 91 6c 03 	lds	r24, 0x036C
    2740:	88 23       	and	r24, r24
    2742:	19 f1       	breq	.+70     	; 0x278a <__vector_25+0x92>
		{
			if(chkid1 != 'g')
    2744:	80 91 6b 03 	lds	r24, 0x036B
    2748:	87 36       	cpi	r24, 0x67	; 103
    274a:	19 f0       	breq	.+6      	; 0x2752 <__vector_25+0x5a>
			{
				data = '\0';
    274c:	10 92 79 03 	sts	0x0379, r1
    2750:	17 c0       	rjmp	.+46     	; 0x2780 <__vector_25+0x88>
			}
			else
			{
				if(chkid2 != myid)
    2752:	90 91 6c 03 	lds	r25, 0x036C
    2756:	80 91 3a 02 	lds	r24, 0x023A
    275a:	98 17       	cp	r25, r24
    275c:	19 f0       	breq	.+6      	; 0x2764 <__vector_25+0x6c>
				{
					data = '\0';					
    275e:	10 92 79 03 	sts	0x0379, r1
    2762:	0e c0       	rjmp	.+28     	; 0x2780 <__vector_25+0x88>
				}
				else
				{
					data = mytemp;
    2764:	80 91 6f 03 	lds	r24, 0x036F
    2768:	80 93 79 03 	sts	0x0379, r24
					lcd_cursor(1,1);		
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
					lcd_string(data);
    2774:	80 91 79 03 	lds	r24, 0x0379
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_string>
				}
			}
			chkid1='\0';
    2780:	10 92 6b 03 	sts	0x036B, r1
			chkid2='\0';
    2784:	10 92 6c 03 	sts	0x036C, r1
    2788:	09 c0       	rjmp	.+18     	; 0x279c <__vector_25+0xa4>
		}
		else //setting 2nd char
		{
			chkid2 = mytemp;
    278a:	80 91 6f 03 	lds	r24, 0x036F
    278e:	80 93 6c 03 	sts	0x036C, r24
    2792:	04 c0       	rjmp	.+8      	; 0x279c <__vector_25+0xa4>
		}
		
	}
	else //setting 1st char
	{ 
		chkid1 = mytemp;
    2794:	80 91 6f 03 	lds	r24, 0x036F
    2798:	80 93 6b 03 	sts	0x036B, r24
	}
	sei();
    279c:	78 94       	sei
}
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	ff 91       	pop	r31
    27a4:	ef 91       	pop	r30
    27a6:	bf 91       	pop	r27
    27a8:	af 91       	pop	r26
    27aa:	9f 91       	pop	r25
    27ac:	8f 91       	pop	r24
    27ae:	7f 91       	pop	r23
    27b0:	6f 91       	pop	r22
    27b2:	5f 91       	pop	r21
    27b4:	4f 91       	pop	r20
    27b6:	3f 91       	pop	r19
    27b8:	2f 91       	pop	r18
    27ba:	0f 90       	pop	r0
    27bc:	00 92 5b 00 	sts	0x005B, r0
    27c0:	0f 90       	pop	r0
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	0f 90       	pop	r0
    27c6:	1f 90       	pop	r1
    27c8:	18 95       	reti

000027ca <xbee_sendString>:


void xbee_sendString(char str[])
{	
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	ae 97       	sbiw	r28, 0x2e	; 46
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	9e a7       	std	Y+46, r25	; 0x2e
    27e4:	8d a7       	std	Y+45, r24	; 0x2d
	cli();
    27e6:	f8 94       	cli
	int i;
	UDR0='#';
    27e8:	e6 ec       	ldi	r30, 0xC6	; 198
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	83 e2       	ldi	r24, 0x23	; 35
    27ee:	80 83       	st	Z, r24
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	a0 e8       	ldi	r26, 0x80	; 128
    27f6:	bf e3       	ldi	r27, 0x3F	; 63
    27f8:	8f a3       	std	Y+39, r24	; 0x27
    27fa:	98 a7       	std	Y+40, r25	; 0x28
    27fc:	a9 a7       	std	Y+41, r26	; 0x29
    27fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2800:	6f a1       	ldd	r22, Y+39	; 0x27
    2802:	78 a5       	ldd	r23, Y+40	; 0x28
    2804:	89 a5       	ldd	r24, Y+41	; 0x29
    2806:	9a a5       	ldd	r25, Y+42	; 0x2a
    2808:	2d ec       	ldi	r18, 0xCD	; 205
    280a:	3c ec       	ldi	r19, 0xCC	; 204
    280c:	4c e2       	ldi	r20, 0x2C	; 44
    280e:	55 e4       	ldi	r21, 0x45	; 69
    2810:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	8b a3       	std	Y+35, r24	; 0x23
    281a:	9c a3       	std	Y+36, r25	; 0x24
    281c:	ad a3       	std	Y+37, r26	; 0x25
    281e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2820:	6b a1       	ldd	r22, Y+35	; 0x23
    2822:	7c a1       	ldd	r23, Y+36	; 0x24
    2824:	8d a1       	ldd	r24, Y+37	; 0x25
    2826:	9e a1       	ldd	r25, Y+38	; 0x26
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e8       	ldi	r20, 0x80	; 128
    282e:	5f e3       	ldi	r21, 0x3F	; 63
    2830:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    2834:	88 23       	and	r24, r24
    2836:	2c f4       	brge	.+10     	; 0x2842 <xbee_sendString+0x78>
		__ticks = 1;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	9a a3       	std	Y+34, r25	; 0x22
    283e:	89 a3       	std	Y+33, r24	; 0x21
    2840:	3f c0       	rjmp	.+126    	; 0x28c0 <xbee_sendString+0xf6>
	else if (__tmp > 65535)
    2842:	6b a1       	ldd	r22, Y+35	; 0x23
    2844:	7c a1       	ldd	r23, Y+36	; 0x24
    2846:	8d a1       	ldd	r24, Y+37	; 0x25
    2848:	9e a1       	ldd	r25, Y+38	; 0x26
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	3f ef       	ldi	r19, 0xFF	; 255
    284e:	4f e7       	ldi	r20, 0x7F	; 127
    2850:	57 e4       	ldi	r21, 0x47	; 71
    2852:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    2856:	18 16       	cp	r1, r24
    2858:	4c f5       	brge	.+82     	; 0x28ac <xbee_sendString+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285a:	6f a1       	ldd	r22, Y+39	; 0x27
    285c:	78 a5       	ldd	r23, Y+40	; 0x28
    285e:	89 a5       	ldd	r24, Y+41	; 0x29
    2860:	9a a5       	ldd	r25, Y+42	; 0x2a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e2       	ldi	r20, 0x20	; 32
    2868:	51 e4       	ldi	r21, 0x41	; 65
    286a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	9a a3       	std	Y+34, r25	; 0x22
    2880:	89 a3       	std	Y+33, r24	; 0x21
    2882:	0f c0       	rjmp	.+30     	; 0x28a2 <xbee_sendString+0xd8>
    2884:	84 e1       	ldi	r24, 0x14	; 20
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	98 a3       	std	Y+32, r25	; 0x20
    288a:	8f 8f       	std	Y+31, r24	; 0x1f
    288c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    288e:	98 a1       	ldd	r25, Y+32	; 0x20
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <xbee_sendString+0xc6>
    2894:	98 a3       	std	Y+32, r25	; 0x20
    2896:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2898:	89 a1       	ldd	r24, Y+33	; 0x21
    289a:	9a a1       	ldd	r25, Y+34	; 0x22
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	9a a3       	std	Y+34, r25	; 0x22
    28a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a2:	89 a1       	ldd	r24, Y+33	; 0x21
    28a4:	9a a1       	ldd	r25, Y+34	; 0x22
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	69 f7       	brne	.-38     	; 0x2884 <xbee_sendString+0xba>
    28aa:	14 c0       	rjmp	.+40     	; 0x28d4 <xbee_sendString+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ac:	6b a1       	ldd	r22, Y+35	; 0x23
    28ae:	7c a1       	ldd	r23, Y+36	; 0x24
    28b0:	8d a1       	ldd	r24, Y+37	; 0x25
    28b2:	9e a1       	ldd	r25, Y+38	; 0x26
    28b4:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	9a a3       	std	Y+34, r25	; 0x22
    28be:	89 a3       	std	Y+33, r24	; 0x21
    28c0:	89 a1       	ldd	r24, Y+33	; 0x21
    28c2:	9a a1       	ldd	r25, Y+34	; 0x22
    28c4:	9e 8f       	std	Y+30, r25	; 0x1e
    28c6:	8d 8f       	std	Y+29, r24	; 0x1d
    28c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <xbee_sendString+0x102>
    28d0:	9e 8f       	std	Y+30, r25	; 0x1e
    28d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	for(i=0;i<strlen(str);i++)
    28d4:	1c a6       	std	Y+44, r1	; 0x2c
    28d6:	1b a6       	std	Y+43, r1	; 0x2b
    28d8:	82 c0       	rjmp	.+260    	; 0x29de <xbee_sendString+0x214>
	{
		UDR0=str[i];
    28da:	a6 ec       	ldi	r26, 0xC6	; 198
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	2b a5       	ldd	r18, Y+43	; 0x2b
    28e0:	3c a5       	ldd	r19, Y+44	; 0x2c
    28e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    28e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    28e6:	fc 01       	movw	r30, r24
    28e8:	e2 0f       	add	r30, r18
    28ea:	f3 1f       	adc	r31, r19
    28ec:	80 81       	ld	r24, Z
    28ee:	8c 93       	st	X, r24
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	a0 e8       	ldi	r26, 0x80	; 128
    28f6:	bf e3       	ldi	r27, 0x3F	; 63
    28f8:	89 8f       	std	Y+25, r24	; 0x19
    28fa:	9a 8f       	std	Y+26, r25	; 0x1a
    28fc:	ab 8f       	std	Y+27, r26	; 0x1b
    28fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2900:	69 8d       	ldd	r22, Y+25	; 0x19
    2902:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2906:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2908:	2d ec       	ldi	r18, 0xCD	; 205
    290a:	3c ec       	ldi	r19, 0xCC	; 204
    290c:	4c e2       	ldi	r20, 0x2C	; 44
    290e:	55 e4       	ldi	r21, 0x45	; 69
    2910:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	8d 8b       	std	Y+21, r24	; 0x15
    291a:	9e 8b       	std	Y+22, r25	; 0x16
    291c:	af 8b       	std	Y+23, r26	; 0x17
    291e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2920:	6d 89       	ldd	r22, Y+21	; 0x15
    2922:	7e 89       	ldd	r23, Y+22	; 0x16
    2924:	8f 89       	ldd	r24, Y+23	; 0x17
    2926:	98 8d       	ldd	r25, Y+24	; 0x18
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e8       	ldi	r20, 0x80	; 128
    292e:	5f e3       	ldi	r21, 0x3F	; 63
    2930:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    2934:	88 23       	and	r24, r24
    2936:	2c f4       	brge	.+10     	; 0x2942 <xbee_sendString+0x178>
		__ticks = 1;
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	9c 8b       	std	Y+20, r25	; 0x14
    293e:	8b 8b       	std	Y+19, r24	; 0x13
    2940:	3f c0       	rjmp	.+126    	; 0x29c0 <xbee_sendString+0x1f6>
	else if (__tmp > 65535)
    2942:	6d 89       	ldd	r22, Y+21	; 0x15
    2944:	7e 89       	ldd	r23, Y+22	; 0x16
    2946:	8f 89       	ldd	r24, Y+23	; 0x17
    2948:	98 8d       	ldd	r25, Y+24	; 0x18
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	3f ef       	ldi	r19, 0xFF	; 255
    294e:	4f e7       	ldi	r20, 0x7F	; 127
    2950:	57 e4       	ldi	r21, 0x47	; 71
    2952:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    2956:	18 16       	cp	r1, r24
    2958:	4c f5       	brge	.+82     	; 0x29ac <xbee_sendString+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295a:	69 8d       	ldd	r22, Y+25	; 0x19
    295c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    295e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2960:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e2       	ldi	r20, 0x20	; 32
    2968:	51 e4       	ldi	r21, 0x41	; 65
    296a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	bc 01       	movw	r22, r24
    2974:	cd 01       	movw	r24, r26
    2976:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9c 8b       	std	Y+20, r25	; 0x14
    2980:	8b 8b       	std	Y+19, r24	; 0x13
    2982:	0f c0       	rjmp	.+30     	; 0x29a2 <xbee_sendString+0x1d8>
    2984:	84 e1       	ldi	r24, 0x14	; 20
    2986:	91 e0       	ldi	r25, 0x01	; 1
    2988:	9a 8b       	std	Y+18, r25	; 0x12
    298a:	89 8b       	std	Y+17, r24	; 0x11
    298c:	89 89       	ldd	r24, Y+17	; 0x11
    298e:	9a 89       	ldd	r25, Y+18	; 0x12
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <xbee_sendString+0x1c6>
    2994:	9a 8b       	std	Y+18, r25	; 0x12
    2996:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2998:	8b 89       	ldd	r24, Y+19	; 0x13
    299a:	9c 89       	ldd	r25, Y+20	; 0x14
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	9c 8b       	std	Y+20, r25	; 0x14
    29a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a2:	8b 89       	ldd	r24, Y+19	; 0x13
    29a4:	9c 89       	ldd	r25, Y+20	; 0x14
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	69 f7       	brne	.-38     	; 0x2984 <xbee_sendString+0x1ba>
    29aa:	14 c0       	rjmp	.+40     	; 0x29d4 <xbee_sendString+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ac:	6d 89       	ldd	r22, Y+21	; 0x15
    29ae:	7e 89       	ldd	r23, Y+22	; 0x16
    29b0:	8f 89       	ldd	r24, Y+23	; 0x17
    29b2:	98 8d       	ldd	r25, Y+24	; 0x18
    29b4:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9c 8b       	std	Y+20, r25	; 0x14
    29be:	8b 8b       	std	Y+19, r24	; 0x13
    29c0:	8b 89       	ldd	r24, Y+19	; 0x13
    29c2:	9c 89       	ldd	r25, Y+20	; 0x14
    29c4:	98 8b       	std	Y+16, r25	; 0x10
    29c6:	8f 87       	std	Y+15, r24	; 0x0f
    29c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ca:	98 89       	ldd	r25, Y+16	; 0x10
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <xbee_sendString+0x202>
    29d0:	98 8b       	std	Y+16, r25	; 0x10
    29d2:	8f 87       	std	Y+15, r24	; 0x0f
{	
	cli();
	int i;
	UDR0='#';
	_delay_ms(1);
	for(i=0;i<strlen(str);i++)
    29d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d8:	01 96       	adiw	r24, 0x01	; 1
    29da:	9c a7       	std	Y+44, r25	; 0x2c
    29dc:	8b a7       	std	Y+43, r24	; 0x2b
    29de:	0b a5       	ldd	r16, Y+43	; 0x2b
    29e0:	1c a5       	ldd	r17, Y+44	; 0x2c
    29e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    29e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    29e6:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <strlen>
    29ea:	08 17       	cp	r16, r24
    29ec:	19 07       	cpc	r17, r25
    29ee:	08 f4       	brcc	.+2      	; 0x29f2 <xbee_sendString+0x228>
    29f0:	74 cf       	rjmp	.-280    	; 0x28da <xbee_sendString+0x110>
	{
		UDR0=str[i];
		_delay_ms(1);
	}
	UDR0='#';
    29f2:	e6 ec       	ldi	r30, 0xC6	; 198
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	83 e2       	ldi	r24, 0x23	; 35
    29f8:	80 83       	st	Z, r24
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a0 e8       	ldi	r26, 0x80	; 128
    2a00:	bf e3       	ldi	r27, 0x3F	; 63
    2a02:	8b 87       	std	Y+11, r24	; 0x0b
    2a04:	9c 87       	std	Y+12, r25	; 0x0c
    2a06:	ad 87       	std	Y+13, r26	; 0x0d
    2a08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a12:	2d ec       	ldi	r18, 0xCD	; 205
    2a14:	3c ec       	ldi	r19, 0xCC	; 204
    2a16:	4c e2       	ldi	r20, 0x2C	; 44
    2a18:	55 e4       	ldi	r21, 0x45	; 69
    2a1a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8f 83       	std	Y+7, r24	; 0x07
    2a24:	98 87       	std	Y+8, r25	; 0x08
    2a26:	a9 87       	std	Y+9, r26	; 0x09
    2a28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2c:	78 85       	ldd	r23, Y+8	; 0x08
    2a2e:	89 85       	ldd	r24, Y+9	; 0x09
    2a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	2c f4       	brge	.+10     	; 0x2a4c <xbee_sendString+0x282>
		__ticks = 1;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	3f c0       	rjmp	.+126    	; 0x2aca <xbee_sendString+0x300>
	else if (__tmp > 65535)
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	78 85       	ldd	r23, Y+8	; 0x08
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	3f ef       	ldi	r19, 0xFF	; 255
    2a58:	4f e7       	ldi	r20, 0x7F	; 127
    2a5a:	57 e4       	ldi	r21, 0x47	; 71
    2a5c:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    2a60:	18 16       	cp	r1, r24
    2a62:	4c f5       	brge	.+82     	; 0x2ab6 <xbee_sendString+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e2       	ldi	r20, 0x20	; 32
    2a72:	51 e4       	ldi	r21, 0x41	; 65
    2a74:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9e 83       	std	Y+6, r25	; 0x06
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	0f c0       	rjmp	.+30     	; 0x2aac <xbee_sendString+0x2e2>
    2a8e:	84 e1       	ldi	r24, 0x14	; 20
    2a90:	91 e0       	ldi	r25, 0x01	; 1
    2a92:	9c 83       	std	Y+4, r25	; 0x04
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <xbee_sendString+0x2d0>
    2a9e:	9c 83       	std	Y+4, r25	; 0x04
    2aa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	9e 83       	std	Y+6, r25	; 0x06
    2aaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aac:	8d 81       	ldd	r24, Y+5	; 0x05
    2aae:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	69 f7       	brne	.-38     	; 0x2a8e <xbee_sendString+0x2c4>
    2ab4:	14 c0       	rjmp	.+40     	; 0x2ade <xbee_sendString+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab8:	78 85       	ldd	r23, Y+8	; 0x08
    2aba:	89 85       	ldd	r24, Y+9	; 0x09
    2abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abe:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ace:	9a 83       	std	Y+2, r25	; 0x02
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <xbee_sendString+0x30c>
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	sei();
    2ade:	78 94       	sei
}
    2ae0:	ae 96       	adiw	r28, 0x2e	; 46
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	cf 91       	pop	r28
    2aee:	df 91       	pop	r29
    2af0:	1f 91       	pop	r17
    2af2:	0f 91       	pop	r16
    2af4:	08 95       	ret

00002af6 <comintersection>:

//protocol : gbot :#g srcid/destid.data#
void comintersection()
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	2a 97       	sbiw	r28, 0x0a	; 10
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	str[0] = 'g';
    2b0a:	87 e6       	ldi	r24, 0x67	; 103
    2b0c:	89 83       	std	Y+1, r24	; 0x01
	str[1] = myid;
    2b0e:	80 91 3a 02 	lds	r24, 0x023A
    2b12:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '.';
    2b14:	8e e2       	ldi	r24, 0x2E	; 46
    2b16:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = '\0';
    2b18:	1c 82       	std	Y+4, r1	; 0x04
	xbee_sendString(str);
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	01 96       	adiw	r24, 0x01	; 1
    2b1e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <xbee_sendString>
}
    2b22:	2a 96       	adiw	r28, 0x0a	; 10
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <__vector_54>:
	lcd_string("Inter Done");
	sei();
}
*/
SIGNAL(SIG_USART3_RECV) 		// ISR for receive complete interrupt
{
    2b34:	1f 92       	push	r1
    2b36:	0f 92       	push	r0
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	0f 92       	push	r0
    2b3c:	00 90 5b 00 	lds	r0, 0x005B
    2b40:	0f 92       	push	r0
    2b42:	11 24       	eor	r1, r1
    2b44:	2f 93       	push	r18
    2b46:	3f 93       	push	r19
    2b48:	4f 93       	push	r20
    2b4a:	5f 93       	push	r21
    2b4c:	6f 93       	push	r22
    2b4e:	7f 93       	push	r23
    2b50:	8f 93       	push	r24
    2b52:	9f 93       	push	r25
    2b54:	af 93       	push	r26
    2b56:	bf 93       	push	r27
    2b58:	ef 93       	push	r30
    2b5a:	ff 93       	push	r31
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	0f 92       	push	r0
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
	cli();
    2b66:	f8 94       	cli
	char mytemp = UDR3;
    2b68:	e6 e3       	ldi	r30, 0x36	; 54
    2b6a:	f1 e0       	ldi	r31, 0x01	; 1
    2b6c:	80 81       	ld	r24, Z
    2b6e:	89 83       	std	Y+1, r24	; 0x01
	lcd_cursor(2,1);		
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	61 e0       	ldi	r22, 0x01	; 1
    2b74:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
	lcd_string("Reading...");	
    2b78:	8b e3       	ldi	r24, 0x3B	; 59
    2b7a:	92 e0       	ldi	r25, 0x02	; 2
    2b7c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_string>
	if(rfid_count==2)
    2b80:	80 91 6d 03 	lds	r24, 0x036D
    2b84:	90 91 6e 03 	lds	r25, 0x036E
    2b88:	82 30       	cpi	r24, 0x02	; 2
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	49 f5       	brne	.+82     	; 0x2be0 <__vector_54+0xac>
	{
		if(mytemp !=  '0')
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	80 33       	cpi	r24, 0x30	; 48
    2b92:	e1 f0       	breq	.+56     	; 0x2bcc <__vector_54+0x98>
		{
			rfidval[rfid_count] = '0';
    2b94:	80 91 6d 03 	lds	r24, 0x036D
    2b98:	90 91 6e 03 	lds	r25, 0x036E
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	e0 58       	subi	r30, 0x80	; 128
    2ba0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ba2:	80 e3       	ldi	r24, 0x30	; 48
    2ba4:	80 83       	st	Z, r24
			rfid_count++;
    2ba6:	80 91 6d 03 	lds	r24, 0x036D
    2baa:	90 91 6e 03 	lds	r25, 0x036E
    2bae:	01 96       	adiw	r24, 0x01	; 1
    2bb0:	90 93 6e 03 	sts	0x036E, r25
    2bb4:	80 93 6d 03 	sts	0x036D, r24
			rfidval[rfid_count] = mytemp;
    2bb8:	80 91 6d 03 	lds	r24, 0x036D
    2bbc:	90 91 6e 03 	lds	r25, 0x036E
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	e0 58       	subi	r30, 0x80	; 128
    2bc4:	fc 4f       	sbci	r31, 0xFC	; 252
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	80 83       	st	Z, r24
    2bca:	13 c0       	rjmp	.+38     	; 0x2bf2 <__vector_54+0xbe>
		}
		else
		{
			 rfidval[rfid_count] = mytemp;
    2bcc:	80 91 6d 03 	lds	r24, 0x036D
    2bd0:	90 91 6e 03 	lds	r25, 0x036E
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	e0 58       	subi	r30, 0x80	; 128
    2bd8:	fc 4f       	sbci	r31, 0xFC	; 252
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	80 83       	st	Z, r24
    2bde:	09 c0       	rjmp	.+18     	; 0x2bf2 <__vector_54+0xbe>
		}
	}
	else 
	{
		rfidval[rfid_count] = mytemp;	
    2be0:	80 91 6d 03 	lds	r24, 0x036D
    2be4:	90 91 6e 03 	lds	r25, 0x036E
    2be8:	fc 01       	movw	r30, r24
    2bea:	e0 58       	subi	r30, 0x80	; 128
    2bec:	fc 4f       	sbci	r31, 0xFC	; 252
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	80 83       	st	Z, r24
	}
	rfid_count ++;
    2bf2:	80 91 6d 03 	lds	r24, 0x036D
    2bf6:	90 91 6e 03 	lds	r25, 0x036E
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	90 93 6e 03 	sts	0x036E, r25
    2c00:	80 93 6d 03 	sts	0x036D, r24
	if(rfid_count == 4)
    2c04:	80 91 6d 03 	lds	r24, 0x036D
    2c08:	90 91 6e 03 	lds	r25, 0x036E
    2c0c:	84 30       	cpi	r24, 0x04	; 4
    2c0e:	91 05       	cpc	r25, r1
    2c10:	61 f4       	brne	.+24     	; 0x2c2a <__vector_54+0xf6>
	{
		rfidval[4] = '\0';
    2c12:	10 92 84 03 	sts	0x0384, r1
		lcd_cursor(1,1);
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	61 e0       	ldi	r22, 0x01	; 1
    2c1a:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
		lcd_string(rfidval);
    2c1e:	80 e8       	ldi	r24, 0x80	; 128
    2c20:	93 e0       	ldi	r25, 0x03	; 3
    2c22:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_string>
		readrfidtag();
    2c26:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <readrfidtag>
	}
		 
	sei();
    2c2a:	78 94       	sei
}
    2c2c:	0f 90       	pop	r0
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	ff 91       	pop	r31
    2c34:	ef 91       	pop	r30
    2c36:	bf 91       	pop	r27
    2c38:	af 91       	pop	r26
    2c3a:	9f 91       	pop	r25
    2c3c:	8f 91       	pop	r24
    2c3e:	7f 91       	pop	r23
    2c40:	6f 91       	pop	r22
    2c42:	5f 91       	pop	r21
    2c44:	4f 91       	pop	r20
    2c46:	3f 91       	pop	r19
    2c48:	2f 91       	pop	r18
    2c4a:	0f 90       	pop	r0
    2c4c:	00 92 5b 00 	sts	0x005B, r0
    2c50:	0f 90       	pop	r0
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	0f 90       	pop	r0
    2c56:	1f 90       	pop	r1
    2c58:	18 95       	reti

00002c5a <readrfidtag>:
//protocol : dbot :#g srcid/destid.data#
void readrfidtag()
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	69 97       	sbiw	r28, 0x19	; 25
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
	char str[25];
	str[0] = 'g';
    2c6e:	87 e6       	ldi	r24, 0x67	; 103
    2c70:	89 83       	std	Y+1, r24	; 0x01
	str[1] = myid;
    2c72:	80 91 3a 02 	lds	r24, 0x023A
    2c76:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '.';
    2c78:	8e e2       	ldi	r24, 0x2E	; 46
    2c7a:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = rfidval[0];
    2c7c:	80 91 80 03 	lds	r24, 0x0380
    2c80:	8c 83       	std	Y+4, r24	; 0x04
	str[4] = rfidval[1];
    2c82:	80 91 81 03 	lds	r24, 0x0381
    2c86:	8d 83       	std	Y+5, r24	; 0x05
	str[5] = rfidval[2];
    2c88:	80 91 82 03 	lds	r24, 0x0382
    2c8c:	8e 83       	std	Y+6, r24	; 0x06
	str[6] = rfidval[3];
    2c8e:	80 91 83 03 	lds	r24, 0x0383
    2c92:	8f 83       	std	Y+7, r24	; 0x07
	str[7] = '\0';
    2c94:	18 86       	std	Y+8, r1	; 0x08
	rfid_count=0;
    2c96:	10 92 6e 03 	sts	0x036E, r1
    2c9a:	10 92 6d 03 	sts	0x036D, r1
	xbee_sendString(str);
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	01 96       	adiw	r24, 0x01	; 1
    2ca2:	0e 94 e5 13 	call	0x27ca	; 0x27ca <xbee_sendString>
}
    2ca6:	69 96       	adiw	r28, 0x19	; 25
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	08 95       	ret

00002cb8 <arm_motion>:
#include <util/delay.h>
#include <avr/signal.h>
#include <math.h> //included to support power function

void arm_motion(unsigned char dir)
{
    2cb8:	df 93       	push	r29
    2cba:	cf 93       	push	r28
    2cbc:	0f 92       	push	r0
    2cbe:	0f 92       	push	r0
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char port_restore = 0;
    2cc6:	19 82       	std	Y+1, r1	; 0x01
	dir &= 0xf0; // removing lower nibbel as it is not needed
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	80 7f       	andi	r24, 0xF0	; 240
    2ccc:	8a 83       	std	Y+2, r24	; 0x02
	//port_restore = PINA;  // reading the PORTA's original status
	//port_restore = port_restore & 0x0f;  // setting lower direction nibbel to 0
	port_restore = dir;  // adding lower nibbel for direction command and restoring the PORTA status
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	PORTA = port_restore;  // setting the command to the port
    2cd2:	e2 e2       	ldi	r30, 0x22	; 34
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	80 83       	st	Z, r24
}
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <arm_down>:


void arm_down()
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
	arm_motion(0x80);
    2cec:	80 e8       	ldi	r24, 0x80	; 128
    2cee:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <arm_motion>
}
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <arm_up>:

void arm_up()
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
	arm_motion(0x40);
    2d00:	80 e4       	ldi	r24, 0x40	; 64
    2d02:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <arm_motion>
}
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <hold>:

void hold()
{
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
	arm_motion(0x10);
    2d14:	80 e1       	ldi	r24, 0x10	; 16
    2d16:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <arm_motion>
}
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <leave>:

void leave()
{
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
	arm_motion(0x20);
    2d28:	80 e2       	ldi	r24, 0x20	; 32
    2d2a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <arm_motion>
}
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	08 95       	ret

00002d34 <move_bot>:
#include "rfid.h"
#include "arm.h"


int move_bot()
{
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	60 97       	sbiw	r28, 0x10	; 16
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
	init_sensor_values();
    2d48:	0e 94 4d 0c 	call	0x189a	; 0x189a <init_sensor_values>
	while(checkobstacle()==0) {} 
    2d4c:	0e 94 a1 10 	call	0x2142	; 0x2142 <checkobstacle>
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	e1 f3       	breq	.-8      	; 0x2d4c <move_bot+0x18>
	buzzer_off();
    2d54:	0e 94 9b 01 	call	0x336	; 0x336 <buzzer_off>
	if(checkintersection() == 1)
    2d58:	0e 94 44 11 	call	0x2288	; 0x2288 <checkintersection>
    2d5c:	81 30       	cpi	r24, 0x01	; 1
    2d5e:	91 05       	cpc	r25, r1
    2d60:	09 f0       	breq	.+2      	; 0x2d64 <move_bot+0x30>
    2d62:	79 c0       	rjmp	.+242    	; 0x2e56 <move_bot+0x122>
	{	
		//communicate with coordinator
		comintersection();
    2d64:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <comintersection>
		stop();
    2d68:	0e 94 43 02 	call	0x486	; 0x486 <stop>
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	a8 ec       	ldi	r26, 0xC8	; 200
    2d72:	b2 e4       	ldi	r27, 0x42	; 66
    2d74:	8b 87       	std	Y+11, r24	; 0x0b
    2d76:	9c 87       	std	Y+12, r25	; 0x0c
    2d78:	ad 87       	std	Y+13, r26	; 0x0d
    2d7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d84:	2d ec       	ldi	r18, 0xCD	; 205
    2d86:	3c ec       	ldi	r19, 0xCC	; 204
    2d88:	4c e2       	ldi	r20, 0x2C	; 44
    2d8a:	55 e4       	ldi	r21, 0x45	; 69
    2d8c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	8f 83       	std	Y+7, r24	; 0x07
    2d96:	98 87       	std	Y+8, r25	; 0x08
    2d98:	a9 87       	std	Y+9, r26	; 0x09
    2d9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9e:	78 85       	ldd	r23, Y+8	; 0x08
    2da0:	89 85       	ldd	r24, Y+9	; 0x09
    2da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e8       	ldi	r20, 0x80	; 128
    2daa:	5f e3       	ldi	r21, 0x3F	; 63
    2dac:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    2db0:	88 23       	and	r24, r24
    2db2:	2c f4       	brge	.+10     	; 0x2dbe <move_bot+0x8a>
		__ticks = 1;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	9e 83       	std	Y+6, r25	; 0x06
    2dba:	8d 83       	std	Y+5, r24	; 0x05
    2dbc:	3f c0       	rjmp	.+126    	; 0x2e3c <move_bot+0x108>
	else if (__tmp > 65535)
    2dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc0:	78 85       	ldd	r23, Y+8	; 0x08
    2dc2:	89 85       	ldd	r24, Y+9	; 0x09
    2dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	3f ef       	ldi	r19, 0xFF	; 255
    2dca:	4f e7       	ldi	r20, 0x7F	; 127
    2dcc:	57 e4       	ldi	r21, 0x47	; 71
    2dce:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    2dd2:	18 16       	cp	r1, r24
    2dd4:	4c f5       	brge	.+82     	; 0x2e28 <move_bot+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e2       	ldi	r20, 0x20	; 32
    2de4:	51 e4       	ldi	r21, 0x41	; 65
    2de6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	bc 01       	movw	r22, r24
    2df0:	cd 01       	movw	r24, r26
    2df2:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9e 83       	std	Y+6, r25	; 0x06
    2dfc:	8d 83       	std	Y+5, r24	; 0x05
    2dfe:	0f c0       	rjmp	.+30     	; 0x2e1e <move_bot+0xea>
    2e00:	84 e1       	ldi	r24, 0x14	; 20
    2e02:	91 e0       	ldi	r25, 0x01	; 1
    2e04:	9c 83       	std	Y+4, r25	; 0x04
    2e06:	8b 83       	std	Y+3, r24	; 0x03
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <move_bot+0xd8>
    2e10:	9c 83       	std	Y+4, r25	; 0x04
    2e12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e14:	8d 81       	ldd	r24, Y+5	; 0x05
    2e16:	9e 81       	ldd	r25, Y+6	; 0x06
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	9e 83       	std	Y+6, r25	; 0x06
    2e1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	9e 81       	ldd	r25, Y+6	; 0x06
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	69 f7       	brne	.-38     	; 0x2e00 <move_bot+0xcc>
    2e26:	14 c0       	rjmp	.+40     	; 0x2e50 <move_bot+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e28:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2a:	78 85       	ldd	r23, Y+8	; 0x08
    2e2c:	89 85       	ldd	r24, Y+9	; 0x09
    2e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e30:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9e 83       	std	Y+6, r25	; 0x06
    2e3a:	8d 83       	std	Y+5, r24	; 0x05
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e40:	9a 83       	std	Y+2, r25	; 0x02
    2e42:	89 83       	std	Y+1, r24	; 0x01
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	9a 81       	ldd	r25, Y+2	; 0x02
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <move_bot+0x114>
    2e4c:	9a 83       	std	Y+2, r25	; 0x02
    2e4e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		return 0;
    2e50:	18 8a       	std	Y+16, r1	; 0x10
    2e52:	1f 86       	std	Y+15, r1	; 0x0f
    2e54:	06 c0       	rjmp	.+12     	; 0x2e62 <move_bot+0x12e>
	}
	else 
	{
		follow();
    2e56:	0e 94 8f 12 	call	0x251e	; 0x251e <follow>
		return 1;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	98 8b       	std	Y+16, r25	; 0x10
    2e60:	8f 87       	std	Y+15, r24	; 0x0f
    2e62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e64:	98 89       	ldd	r25, Y+16	; 0x10
	}
}
    2e66:	60 96       	adiw	r28, 0x10	; 16
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	cf 91       	pop	r28
    2e74:	df 91       	pop	r29
    2e76:	08 95       	ret

00002e78 <run>:
void run(void)
{
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	df 93       	push	r29
    2e7e:	cf 93       	push	r28
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	c4 55       	subi	r28, 0x54	; 84
    2e86:	d0 40       	sbci	r29, 0x00	; 0
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
	data='w';
    2e92:	87 e7       	ldi	r24, 0x77	; 119
    2e94:	80 93 79 03 	sts	0x0379, r24
	while(1)
	{
		while(data == 'w') //waiting for signal
    2e98:	80 91 79 03 	lds	r24, 0x0379
    2e9c:	87 37       	cpi	r24, 0x77	; 119
    2e9e:	e1 f3       	breq	.-8      	; 0x2e98 <run+0x20>
    2ea0:	3c c1       	rjmp	.+632    	; 0x311a <run+0x2a2>
		{
			
		}
		while(data == '\0' )
		{
			stop();
    2ea2:	0e 94 43 02 	call	0x486	; 0x486 <stop>
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ef 5a       	subi	r30, 0xAF	; 175
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	aa e7       	ldi	r26, 0x7A	; 122
    2eb2:	b5 e4       	ldi	r27, 0x45	; 69
    2eb4:	80 83       	st	Z, r24
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	a2 83       	std	Z+2, r26	; 0x02
    2eba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ebc:	8e 01       	movw	r16, r28
    2ebe:	03 5b       	subi	r16, 0xB3	; 179
    2ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ef 5a       	subi	r30, 0xAF	; 175
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	2d ec       	ldi	r18, 0xCD	; 205
    2ed2:	3c ec       	ldi	r19, 0xCC	; 204
    2ed4:	4c e2       	ldi	r20, 0x2C	; 44
    2ed6:	55 e4       	ldi	r21, 0x45	; 69
    2ed8:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	f8 01       	movw	r30, r16
    2ee2:	80 83       	st	Z, r24
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	a2 83       	std	Z+2, r26	; 0x02
    2ee8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eea:	fe 01       	movw	r30, r28
    2eec:	e3 5b       	subi	r30, 0xB3	; 179
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	60 81       	ld	r22, Z
    2ef2:	71 81       	ldd	r23, Z+1	; 0x01
    2ef4:	82 81       	ldd	r24, Z+2	; 0x02
    2ef6:	93 81       	ldd	r25, Z+3	; 0x03
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e8       	ldi	r20, 0x80	; 128
    2efe:	5f e3       	ldi	r21, 0x3F	; 63
    2f00:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    2f04:	88 23       	and	r24, r24
    2f06:	44 f4       	brge	.+16     	; 0x2f18 <run+0xa0>
		__ticks = 1;
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e5 5b       	subi	r30, 0xB5	; 181
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	80 83       	st	Z, r24
    2f16:	64 c0       	rjmp	.+200    	; 0x2fe0 <run+0x168>
	else if (__tmp > 65535)
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e3 5b       	subi	r30, 0xB3	; 179
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	60 81       	ld	r22, Z
    2f20:	71 81       	ldd	r23, Z+1	; 0x01
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	93 81       	ldd	r25, Z+3	; 0x03
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	3f ef       	ldi	r19, 0xFF	; 255
    2f2a:	4f e7       	ldi	r20, 0x7F	; 127
    2f2c:	57 e4       	ldi	r21, 0x47	; 71
    2f2e:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    2f32:	18 16       	cp	r1, r24
    2f34:	0c f0       	brlt	.+2      	; 0x2f38 <run+0xc0>
    2f36:	43 c0       	rjmp	.+134    	; 0x2fbe <run+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f38:	fe 01       	movw	r30, r28
    2f3a:	ef 5a       	subi	r30, 0xAF	; 175
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	60 81       	ld	r22, Z
    2f40:	71 81       	ldd	r23, Z+1	; 0x01
    2f42:	82 81       	ldd	r24, Z+2	; 0x02
    2f44:	93 81       	ldd	r25, Z+3	; 0x03
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	8e 01       	movw	r16, r28
    2f58:	05 5b       	subi	r16, 0xB5	; 181
    2f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	f8 01       	movw	r30, r16
    2f6a:	91 83       	std	Z+1, r25	; 0x01
    2f6c:	80 83       	st	Z, r24
    2f6e:	1f c0       	rjmp	.+62     	; 0x2fae <run+0x136>
    2f70:	fe 01       	movw	r30, r28
    2f72:	e7 5b       	subi	r30, 0xB7	; 183
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	84 e1       	ldi	r24, 0x14	; 20
    2f78:	91 e0       	ldi	r25, 0x01	; 1
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	80 83       	st	Z, r24
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e7 5b       	subi	r30, 0xB7	; 183
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	80 81       	ld	r24, Z
    2f86:	91 81       	ldd	r25, Z+1	; 0x01
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <run+0x110>
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e7 5b       	subi	r30, 0xB7	; 183
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f96:	de 01       	movw	r26, r28
    2f98:	a5 5b       	subi	r26, 0xB5	; 181
    2f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e5 5b       	subi	r30, 0xB5	; 181
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	80 81       	ld	r24, Z
    2fa4:	91 81       	ldd	r25, Z+1	; 0x01
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	11 96       	adiw	r26, 0x01	; 1
    2faa:	9c 93       	st	X, r25
    2fac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e5 5b       	subi	r30, 0xB5	; 181
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	80 81       	ld	r24, Z
    2fb6:	91 81       	ldd	r25, Z+1	; 0x01
    2fb8:	00 97       	sbiw	r24, 0x00	; 0
    2fba:	d1 f6       	brne	.-76     	; 0x2f70 <run+0xf8>
    2fbc:	27 c0       	rjmp	.+78     	; 0x300c <run+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fbe:	8e 01       	movw	r16, r28
    2fc0:	05 5b       	subi	r16, 0xB5	; 181
    2fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e3 5b       	subi	r30, 0xB3	; 179
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	60 81       	ld	r22, Z
    2fcc:	71 81       	ldd	r23, Z+1	; 0x01
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	f8 01       	movw	r30, r16
    2fdc:	91 83       	std	Z+1, r25	; 0x01
    2fde:	80 83       	st	Z, r24
    2fe0:	de 01       	movw	r26, r28
    2fe2:	a9 5b       	subi	r26, 0xB9	; 185
    2fe4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e5 5b       	subi	r30, 0xB5	; 181
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	80 81       	ld	r24, Z
    2fee:	91 81       	ldd	r25, Z+1	; 0x01
    2ff0:	8d 93       	st	X+, r24
    2ff2:	9c 93       	st	X, r25
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	e9 5b       	subi	r30, 0xB9	; 185
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	80 81       	ld	r24, Z
    2ffc:	91 81       	ldd	r25, Z+1	; 0x01
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <run+0x186>
    3002:	fe 01       	movw	r30, r28
    3004:	e9 5b       	subi	r30, 0xB9	; 185
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	91 83       	std	Z+1, r25	; 0x01
    300a:	80 83       	st	Z, r24
			_delay_ms(4000);
			comintersection();
    300c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <comintersection>
    3010:	fe 01       	movw	r30, r28
    3012:	ed 5b       	subi	r30, 0xBD	; 189
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	a8 ec       	ldi	r26, 0xC8	; 200
    301c:	b2 e4       	ldi	r27, 0x42	; 66
    301e:	80 83       	st	Z, r24
    3020:	91 83       	std	Z+1, r25	; 0x01
    3022:	a2 83       	std	Z+2, r26	; 0x02
    3024:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3026:	8e 01       	movw	r16, r28
    3028:	01 5c       	subi	r16, 0xC1	; 193
    302a:	1f 4f       	sbci	r17, 0xFF	; 255
    302c:	fe 01       	movw	r30, r28
    302e:	ed 5b       	subi	r30, 0xBD	; 189
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	60 81       	ld	r22, Z
    3034:	71 81       	ldd	r23, Z+1	; 0x01
    3036:	82 81       	ldd	r24, Z+2	; 0x02
    3038:	93 81       	ldd	r25, Z+3	; 0x03
    303a:	2d ec       	ldi	r18, 0xCD	; 205
    303c:	3c ec       	ldi	r19, 0xCC	; 204
    303e:	4c e2       	ldi	r20, 0x2C	; 44
    3040:	55 e4       	ldi	r21, 0x45	; 69
    3042:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	f8 01       	movw	r30, r16
    304c:	80 83       	st	Z, r24
    304e:	91 83       	std	Z+1, r25	; 0x01
    3050:	a2 83       	std	Z+2, r26	; 0x02
    3052:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3054:	fe 01       	movw	r30, r28
    3056:	ff 96       	adiw	r30, 0x3f	; 63
    3058:	60 81       	ld	r22, Z
    305a:	71 81       	ldd	r23, Z+1	; 0x01
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e8       	ldi	r20, 0x80	; 128
    3066:	5f e3       	ldi	r21, 0x3F	; 63
    3068:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    306c:	88 23       	and	r24, r24
    306e:	2c f4       	brge	.+10     	; 0x307a <run+0x202>
		__ticks = 1;
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	9e af       	std	Y+62, r25	; 0x3e
    3076:	8d af       	std	Y+61, r24	; 0x3d
    3078:	46 c0       	rjmp	.+140    	; 0x3106 <run+0x28e>
	else if (__tmp > 65535)
    307a:	fe 01       	movw	r30, r28
    307c:	ff 96       	adiw	r30, 0x3f	; 63
    307e:	60 81       	ld	r22, Z
    3080:	71 81       	ldd	r23, Z+1	; 0x01
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	93 81       	ldd	r25, Z+3	; 0x03
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	3f ef       	ldi	r19, 0xFF	; 255
    308a:	4f e7       	ldi	r20, 0x7F	; 127
    308c:	57 e4       	ldi	r21, 0x47	; 71
    308e:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    3092:	18 16       	cp	r1, r24
    3094:	64 f5       	brge	.+88     	; 0x30ee <run+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3096:	fe 01       	movw	r30, r28
    3098:	ed 5b       	subi	r30, 0xBD	; 189
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	60 81       	ld	r22, Z
    309e:	71 81       	ldd	r23, Z+1	; 0x01
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	93 81       	ldd	r25, Z+3	; 0x03
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e2       	ldi	r20, 0x20	; 32
    30aa:	51 e4       	ldi	r21, 0x41	; 65
    30ac:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	bc 01       	movw	r22, r24
    30b6:	cd 01       	movw	r24, r26
    30b8:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	9e af       	std	Y+62, r25	; 0x3e
    30c2:	8d af       	std	Y+61, r24	; 0x3d
    30c4:	0f c0       	rjmp	.+30     	; 0x30e4 <run+0x26c>
    30c6:	84 e1       	ldi	r24, 0x14	; 20
    30c8:	91 e0       	ldi	r25, 0x01	; 1
    30ca:	9c af       	std	Y+60, r25	; 0x3c
    30cc:	8b af       	std	Y+59, r24	; 0x3b
    30ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    30d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <run+0x25a>
    30d6:	9c af       	std	Y+60, r25	; 0x3c
    30d8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30da:	8d ad       	ldd	r24, Y+61	; 0x3d
    30dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	9e af       	std	Y+62, r25	; 0x3e
    30e2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    30e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    30e8:	00 97       	sbiw	r24, 0x00	; 0
    30ea:	69 f7       	brne	.-38     	; 0x30c6 <run+0x24e>
    30ec:	16 c0       	rjmp	.+44     	; 0x311a <run+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ee:	fe 01       	movw	r30, r28
    30f0:	ff 96       	adiw	r30, 0x3f	; 63
    30f2:	60 81       	ld	r22, Z
    30f4:	71 81       	ldd	r23, Z+1	; 0x01
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	9e af       	std	Y+62, r25	; 0x3e
    3104:	8d af       	std	Y+61, r24	; 0x3d
    3106:	8d ad       	ldd	r24, Y+61	; 0x3d
    3108:	9e ad       	ldd	r25, Y+62	; 0x3e
    310a:	9a af       	std	Y+58, r25	; 0x3a
    310c:	89 af       	std	Y+57, r24	; 0x39
    310e:	89 ad       	ldd	r24, Y+57	; 0x39
    3110:	9a ad       	ldd	r25, Y+58	; 0x3a
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	f1 f7       	brne	.-4      	; 0x3112 <run+0x29a>
    3116:	9a af       	std	Y+58, r25	; 0x3a
    3118:	89 af       	std	Y+57, r24	; 0x39
	{
		while(data == 'w') //waiting for signal
		{
			
		}
		while(data == '\0' )
    311a:	80 91 79 03 	lds	r24, 0x0379
    311e:	88 23       	and	r24, r24
    3120:	09 f4       	brne	.+2      	; 0x3124 <run+0x2ac>
    3122:	bf ce       	rjmp	.-642    	; 0x2ea2 <run+0x2a>
			stop();
			_delay_ms(4000);
			comintersection();
			_delay_ms(100);
		}
		if(data=='f') // forward
    3124:	80 91 79 03 	lds	r24, 0x0379
    3128:	86 36       	cpi	r24, 0x66	; 102
    312a:	11 f4       	brne	.+4      	; 0x3130 <run+0x2b8>
		{
			data='\0';
    312c:	10 92 79 03 	sts	0x0379, r1
		}
		if(data=='r') // right	
    3130:	80 91 79 03 	lds	r24, 0x0379
    3134:	82 37       	cpi	r24, 0x72	; 114
    3136:	21 f4       	brne	.+8      	; 0x3140 <run+0x2c8>
		{
			data='\0';
    3138:	10 92 79 03 	sts	0x0379, r1
			turn_right();
    313c:	0e 94 8e 10 	call	0x211c	; 0x211c <turn_right>
		}
		if(data=='l') // left
    3140:	80 91 79 03 	lds	r24, 0x0379
    3144:	8c 36       	cpi	r24, 0x6C	; 108
    3146:	21 f4       	brne	.+8      	; 0x3150 <run+0x2d8>
		{
			data='\0';
    3148:	10 92 79 03 	sts	0x0379, r1
			turn_left();
    314c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <turn_left>
		} 
		if(data == 'h') // halt
    3150:	80 91 79 03 	lds	r24, 0x0379
    3154:	88 36       	cpi	r24, 0x68	; 104
    3156:	09 f0       	breq	.+2      	; 0x315a <run+0x2e2>
    3158:	77 c0       	rjmp	.+238    	; 0x3248 <run+0x3d0>
		{
			data='\0';
    315a:	10 92 79 03 	sts	0x0379, r1
			stop();
    315e:	0e 94 43 02 	call	0x486	; 0x486 <stop>
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	a8 ec       	ldi	r26, 0xC8	; 200
    3168:	b2 e4       	ldi	r27, 0x42	; 66
    316a:	8d ab       	std	Y+53, r24	; 0x35
    316c:	9e ab       	std	Y+54, r25	; 0x36
    316e:	af ab       	std	Y+55, r26	; 0x37
    3170:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3172:	6d a9       	ldd	r22, Y+53	; 0x35
    3174:	7e a9       	ldd	r23, Y+54	; 0x36
    3176:	8f a9       	ldd	r24, Y+55	; 0x37
    3178:	98 ad       	ldd	r25, Y+56	; 0x38
    317a:	2d ec       	ldi	r18, 0xCD	; 205
    317c:	3c ec       	ldi	r19, 0xCC	; 204
    317e:	4c e2       	ldi	r20, 0x2C	; 44
    3180:	55 e4       	ldi	r21, 0x45	; 69
    3182:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	89 ab       	std	Y+49, r24	; 0x31
    318c:	9a ab       	std	Y+50, r25	; 0x32
    318e:	ab ab       	std	Y+51, r26	; 0x33
    3190:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3192:	69 a9       	ldd	r22, Y+49	; 0x31
    3194:	7a a9       	ldd	r23, Y+50	; 0x32
    3196:	8b a9       	ldd	r24, Y+51	; 0x33
    3198:	9c a9       	ldd	r25, Y+52	; 0x34
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    31a6:	88 23       	and	r24, r24
    31a8:	2c f4       	brge	.+10     	; 0x31b4 <run+0x33c>
		__ticks = 1;
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	98 ab       	std	Y+48, r25	; 0x30
    31b0:	8f a7       	std	Y+47, r24	; 0x2f
    31b2:	3f c0       	rjmp	.+126    	; 0x3232 <run+0x3ba>
	else if (__tmp > 65535)
    31b4:	69 a9       	ldd	r22, Y+49	; 0x31
    31b6:	7a a9       	ldd	r23, Y+50	; 0x32
    31b8:	8b a9       	ldd	r24, Y+51	; 0x33
    31ba:	9c a9       	ldd	r25, Y+52	; 0x34
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f e7       	ldi	r20, 0x7F	; 127
    31c2:	57 e4       	ldi	r21, 0x47	; 71
    31c4:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    31c8:	18 16       	cp	r1, r24
    31ca:	4c f5       	brge	.+82     	; 0x321e <run+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31cc:	6d a9       	ldd	r22, Y+53	; 0x35
    31ce:	7e a9       	ldd	r23, Y+54	; 0x36
    31d0:	8f a9       	ldd	r24, Y+55	; 0x37
    31d2:	98 ad       	ldd	r25, Y+56	; 0x38
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e2       	ldi	r20, 0x20	; 32
    31da:	51 e4       	ldi	r21, 0x41	; 65
    31dc:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	98 ab       	std	Y+48, r25	; 0x30
    31f2:	8f a7       	std	Y+47, r24	; 0x2f
    31f4:	0f c0       	rjmp	.+30     	; 0x3214 <run+0x39c>
    31f6:	84 e1       	ldi	r24, 0x14	; 20
    31f8:	91 e0       	ldi	r25, 0x01	; 1
    31fa:	9e a7       	std	Y+46, r25	; 0x2e
    31fc:	8d a7       	std	Y+45, r24	; 0x2d
    31fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    3200:	9e a5       	ldd	r25, Y+46	; 0x2e
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <run+0x38a>
    3206:	9e a7       	std	Y+46, r25	; 0x2e
    3208:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320a:	8f a5       	ldd	r24, Y+47	; 0x2f
    320c:	98 a9       	ldd	r25, Y+48	; 0x30
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	98 ab       	std	Y+48, r25	; 0x30
    3212:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3214:	8f a5       	ldd	r24, Y+47	; 0x2f
    3216:	98 a9       	ldd	r25, Y+48	; 0x30
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	69 f7       	brne	.-38     	; 0x31f6 <run+0x37e>
    321c:	3d ce       	rjmp	.-902    	; 0x2e98 <run+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321e:	69 a9       	ldd	r22, Y+49	; 0x31
    3220:	7a a9       	ldd	r23, Y+50	; 0x32
    3222:	8b a9       	ldd	r24, Y+51	; 0x33
    3224:	9c a9       	ldd	r25, Y+52	; 0x34
    3226:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	98 ab       	std	Y+48, r25	; 0x30
    3230:	8f a7       	std	Y+47, r24	; 0x2f
    3232:	8f a5       	ldd	r24, Y+47	; 0x2f
    3234:	98 a9       	ldd	r25, Y+48	; 0x30
    3236:	9c a7       	std	Y+44, r25	; 0x2c
    3238:	8b a7       	std	Y+43, r24	; 0x2b
    323a:	8b a5       	ldd	r24, Y+43	; 0x2b
    323c:	9c a5       	ldd	r25, Y+44	; 0x2c
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <run+0x3c6>
    3242:	9c a7       	std	Y+44, r25	; 0x2c
    3244:	8b a7       	std	Y+43, r24	; 0x2b
    3246:	28 ce       	rjmp	.-944    	; 0x2e98 <run+0x20>
			_delay_ms(100);
			continue;
		
		}
		if(data == 'o') // origin
    3248:	80 91 79 03 	lds	r24, 0x0379
    324c:	8f 36       	cpi	r24, 0x6F	; 111
    324e:	09 f0       	breq	.+2      	; 0x3252 <run+0x3da>
    3250:	78 c0       	rjmp	.+240    	; 0x3342 <run+0x4ca>
		{
			data='w';
    3252:	87 e7       	ldi	r24, 0x77	; 119
    3254:	80 93 79 03 	sts	0x0379, r24
			stop();
    3258:	0e 94 43 02 	call	0x486	; 0x486 <stop>
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	a8 ec       	ldi	r26, 0xC8	; 200
    3262:	b2 e4       	ldi	r27, 0x42	; 66
    3264:	8f a3       	std	Y+39, r24	; 0x27
    3266:	98 a7       	std	Y+40, r25	; 0x28
    3268:	a9 a7       	std	Y+41, r26	; 0x29
    326a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326c:	6f a1       	ldd	r22, Y+39	; 0x27
    326e:	78 a5       	ldd	r23, Y+40	; 0x28
    3270:	89 a5       	ldd	r24, Y+41	; 0x29
    3272:	9a a5       	ldd	r25, Y+42	; 0x2a
    3274:	2d ec       	ldi	r18, 0xCD	; 205
    3276:	3c ec       	ldi	r19, 0xCC	; 204
    3278:	4c e2       	ldi	r20, 0x2C	; 44
    327a:	55 e4       	ldi	r21, 0x45	; 69
    327c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	8b a3       	std	Y+35, r24	; 0x23
    3286:	9c a3       	std	Y+36, r25	; 0x24
    3288:	ad a3       	std	Y+37, r26	; 0x25
    328a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    328c:	6b a1       	ldd	r22, Y+35	; 0x23
    328e:	7c a1       	ldd	r23, Y+36	; 0x24
    3290:	8d a1       	ldd	r24, Y+37	; 0x25
    3292:	9e a1       	ldd	r25, Y+38	; 0x26
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e8       	ldi	r20, 0x80	; 128
    329a:	5f e3       	ldi	r21, 0x3F	; 63
    329c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    32a0:	88 23       	and	r24, r24
    32a2:	2c f4       	brge	.+10     	; 0x32ae <run+0x436>
		__ticks = 1;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	9a a3       	std	Y+34, r25	; 0x22
    32aa:	89 a3       	std	Y+33, r24	; 0x21
    32ac:	3f c0       	rjmp	.+126    	; 0x332c <run+0x4b4>
	else if (__tmp > 65535)
    32ae:	6b a1       	ldd	r22, Y+35	; 0x23
    32b0:	7c a1       	ldd	r23, Y+36	; 0x24
    32b2:	8d a1       	ldd	r24, Y+37	; 0x25
    32b4:	9e a1       	ldd	r25, Y+38	; 0x26
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	3f ef       	ldi	r19, 0xFF	; 255
    32ba:	4f e7       	ldi	r20, 0x7F	; 127
    32bc:	57 e4       	ldi	r21, 0x47	; 71
    32be:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    32c2:	18 16       	cp	r1, r24
    32c4:	4c f5       	brge	.+82     	; 0x3318 <run+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c6:	6f a1       	ldd	r22, Y+39	; 0x27
    32c8:	78 a5       	ldd	r23, Y+40	; 0x28
    32ca:	89 a5       	ldd	r24, Y+41	; 0x29
    32cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e2       	ldi	r20, 0x20	; 32
    32d4:	51 e4       	ldi	r21, 0x41	; 65
    32d6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	9a a3       	std	Y+34, r25	; 0x22
    32ec:	89 a3       	std	Y+33, r24	; 0x21
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <run+0x496>
    32f0:	84 e1       	ldi	r24, 0x14	; 20
    32f2:	91 e0       	ldi	r25, 0x01	; 1
    32f4:	98 a3       	std	Y+32, r25	; 0x20
    32f6:	8f 8f       	std	Y+31, r24	; 0x1f
    32f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32fa:	98 a1       	ldd	r25, Y+32	; 0x20
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <run+0x484>
    3300:	98 a3       	std	Y+32, r25	; 0x20
    3302:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3304:	89 a1       	ldd	r24, Y+33	; 0x21
    3306:	9a a1       	ldd	r25, Y+34	; 0x22
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	9a a3       	std	Y+34, r25	; 0x22
    330c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330e:	89 a1       	ldd	r24, Y+33	; 0x21
    3310:	9a a1       	ldd	r25, Y+34	; 0x22
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	69 f7       	brne	.-38     	; 0x32f0 <run+0x478>
    3316:	c0 cd       	rjmp	.-1152   	; 0x2e98 <run+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3318:	6b a1       	ldd	r22, Y+35	; 0x23
    331a:	7c a1       	ldd	r23, Y+36	; 0x24
    331c:	8d a1       	ldd	r24, Y+37	; 0x25
    331e:	9e a1       	ldd	r25, Y+38	; 0x26
    3320:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	9a a3       	std	Y+34, r25	; 0x22
    332a:	89 a3       	std	Y+33, r24	; 0x21
    332c:	89 a1       	ldd	r24, Y+33	; 0x21
    332e:	9a a1       	ldd	r25, Y+34	; 0x22
    3330:	9e 8f       	std	Y+30, r25	; 0x1e
    3332:	8d 8f       	std	Y+29, r24	; 0x1d
    3334:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3336:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <run+0x4c0>
    333c:	9e 8f       	std	Y+30, r25	; 0x1e
    333e:	8d 8f       	std	Y+29, r24	; 0x1d
    3340:	ab cd       	rjmp	.-1194   	; 0x2e98 <run+0x20>
			_delay_ms(100);
			continue;
		}
		if(data == 'c') //collect item
    3342:	80 91 79 03 	lds	r24, 0x0379
    3346:	83 36       	cpi	r24, 0x63	; 99
    3348:	09 f0       	breq	.+2      	; 0x334c <run+0x4d4>
    334a:	7a c0       	rjmp	.+244    	; 0x3440 <run+0x5c8>
		{
			data='\0';
    334c:	10 92 79 03 	sts	0x0379, r1
			arm_down();
    3350:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <arm_down>
			hold();
    3354:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <hold>
			arm_up();
    3358:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <arm_up>
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	aa e7       	ldi	r26, 0x7A	; 122
    3362:	b4 e4       	ldi	r27, 0x44	; 68
    3364:	89 8f       	std	Y+25, r24	; 0x19
    3366:	9a 8f       	std	Y+26, r25	; 0x1a
    3368:	ab 8f       	std	Y+27, r26	; 0x1b
    336a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336c:	69 8d       	ldd	r22, Y+25	; 0x19
    336e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3370:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3372:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3374:	2d ec       	ldi	r18, 0xCD	; 205
    3376:	3c ec       	ldi	r19, 0xCC	; 204
    3378:	4c e2       	ldi	r20, 0x2C	; 44
    337a:	55 e4       	ldi	r21, 0x45	; 69
    337c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	8d 8b       	std	Y+21, r24	; 0x15
    3386:	9e 8b       	std	Y+22, r25	; 0x16
    3388:	af 8b       	std	Y+23, r26	; 0x17
    338a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    338c:	6d 89       	ldd	r22, Y+21	; 0x15
    338e:	7e 89       	ldd	r23, Y+22	; 0x16
    3390:	8f 89       	ldd	r24, Y+23	; 0x17
    3392:	98 8d       	ldd	r25, Y+24	; 0x18
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e8       	ldi	r20, 0x80	; 128
    339a:	5f e3       	ldi	r21, 0x3F	; 63
    339c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    33a0:	88 23       	and	r24, r24
    33a2:	2c f4       	brge	.+10     	; 0x33ae <run+0x536>
		__ticks = 1;
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	9c 8b       	std	Y+20, r25	; 0x14
    33aa:	8b 8b       	std	Y+19, r24	; 0x13
    33ac:	3f c0       	rjmp	.+126    	; 0x342c <run+0x5b4>
	else if (__tmp > 65535)
    33ae:	6d 89       	ldd	r22, Y+21	; 0x15
    33b0:	7e 89       	ldd	r23, Y+22	; 0x16
    33b2:	8f 89       	ldd	r24, Y+23	; 0x17
    33b4:	98 8d       	ldd	r25, Y+24	; 0x18
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	3f ef       	ldi	r19, 0xFF	; 255
    33ba:	4f e7       	ldi	r20, 0x7F	; 127
    33bc:	57 e4       	ldi	r21, 0x47	; 71
    33be:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    33c2:	18 16       	cp	r1, r24
    33c4:	4c f5       	brge	.+82     	; 0x3418 <run+0x5a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c6:	69 8d       	ldd	r22, Y+25	; 0x19
    33c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	40 e2       	ldi	r20, 0x20	; 32
    33d4:	51 e4       	ldi	r21, 0x41	; 65
    33d6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	bc 01       	movw	r22, r24
    33e0:	cd 01       	movw	r24, r26
    33e2:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	9c 8b       	std	Y+20, r25	; 0x14
    33ec:	8b 8b       	std	Y+19, r24	; 0x13
    33ee:	0f c0       	rjmp	.+30     	; 0x340e <run+0x596>
    33f0:	84 e1       	ldi	r24, 0x14	; 20
    33f2:	91 e0       	ldi	r25, 0x01	; 1
    33f4:	9a 8b       	std	Y+18, r25	; 0x12
    33f6:	89 8b       	std	Y+17, r24	; 0x11
    33f8:	89 89       	ldd	r24, Y+17	; 0x11
    33fa:	9a 89       	ldd	r25, Y+18	; 0x12
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <run+0x584>
    3400:	9a 8b       	std	Y+18, r25	; 0x12
    3402:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3404:	8b 89       	ldd	r24, Y+19	; 0x13
    3406:	9c 89       	ldd	r25, Y+20	; 0x14
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	9c 8b       	std	Y+20, r25	; 0x14
    340c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340e:	8b 89       	ldd	r24, Y+19	; 0x13
    3410:	9c 89       	ldd	r25, Y+20	; 0x14
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	69 f7       	brne	.-38     	; 0x33f0 <run+0x578>
    3416:	14 c0       	rjmp	.+40     	; 0x3440 <run+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3418:	6d 89       	ldd	r22, Y+21	; 0x15
    341a:	7e 89       	ldd	r23, Y+22	; 0x16
    341c:	8f 89       	ldd	r24, Y+23	; 0x17
    341e:	98 8d       	ldd	r25, Y+24	; 0x18
    3420:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	9c 8b       	std	Y+20, r25	; 0x14
    342a:	8b 8b       	std	Y+19, r24	; 0x13
    342c:	8b 89       	ldd	r24, Y+19	; 0x13
    342e:	9c 89       	ldd	r25, Y+20	; 0x14
    3430:	98 8b       	std	Y+16, r25	; 0x10
    3432:	8f 87       	std	Y+15, r24	; 0x0f
    3434:	8f 85       	ldd	r24, Y+15	; 0x0f
    3436:	98 89       	ldd	r25, Y+16	; 0x10
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <run+0x5c0>
    343c:	98 8b       	std	Y+16, r25	; 0x10
    343e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
		}
		if(data == 'd') //drop_item
    3440:	80 91 79 03 	lds	r24, 0x0379
    3444:	84 36       	cpi	r24, 0x64	; 100
    3446:	09 f0       	breq	.+2      	; 0x344a <run+0x5d2>
    3448:	7a c0       	rjmp	.+244    	; 0x353e <run+0x6c6>
		{
			data='\0';
    344a:	10 92 79 03 	sts	0x0379, r1
			arm_down();
    344e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <arm_down>
			leave();
    3452:	0e 94 90 16 	call	0x2d20	; 0x2d20 <leave>
			arm_up();
    3456:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <arm_up>
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	aa e7       	ldi	r26, 0x7A	; 122
    3460:	b4 e4       	ldi	r27, 0x44	; 68
    3462:	8b 87       	std	Y+11, r24	; 0x0b
    3464:	9c 87       	std	Y+12, r25	; 0x0c
    3466:	ad 87       	std	Y+13, r26	; 0x0d
    3468:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346a:	6b 85       	ldd	r22, Y+11	; 0x0b
    346c:	7c 85       	ldd	r23, Y+12	; 0x0c
    346e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3470:	9e 85       	ldd	r25, Y+14	; 0x0e
    3472:	2d ec       	ldi	r18, 0xCD	; 205
    3474:	3c ec       	ldi	r19, 0xCC	; 204
    3476:	4c e2       	ldi	r20, 0x2C	; 44
    3478:	55 e4       	ldi	r21, 0x45	; 69
    347a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	8f 83       	std	Y+7, r24	; 0x07
    3484:	98 87       	std	Y+8, r25	; 0x08
    3486:	a9 87       	std	Y+9, r26	; 0x09
    3488:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    348a:	6f 81       	ldd	r22, Y+7	; 0x07
    348c:	78 85       	ldd	r23, Y+8	; 0x08
    348e:	89 85       	ldd	r24, Y+9	; 0x09
    3490:	9a 85       	ldd	r25, Y+10	; 0x0a
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	40 e8       	ldi	r20, 0x80	; 128
    3498:	5f e3       	ldi	r21, 0x3F	; 63
    349a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    349e:	88 23       	and	r24, r24
    34a0:	2c f4       	brge	.+10     	; 0x34ac <run+0x634>
		__ticks = 1;
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	9e 83       	std	Y+6, r25	; 0x06
    34a8:	8d 83       	std	Y+5, r24	; 0x05
    34aa:	3f c0       	rjmp	.+126    	; 0x352a <run+0x6b2>
	else if (__tmp > 65535)
    34ac:	6f 81       	ldd	r22, Y+7	; 0x07
    34ae:	78 85       	ldd	r23, Y+8	; 0x08
    34b0:	89 85       	ldd	r24, Y+9	; 0x09
    34b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	3f ef       	ldi	r19, 0xFF	; 255
    34b8:	4f e7       	ldi	r20, 0x7F	; 127
    34ba:	57 e4       	ldi	r21, 0x47	; 71
    34bc:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    34c0:	18 16       	cp	r1, r24
    34c2:	4c f5       	brge	.+82     	; 0x3516 <run+0x69e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e2       	ldi	r20, 0x20	; 32
    34d2:	51 e4       	ldi	r21, 0x41	; 65
    34d4:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	bc 01       	movw	r22, r24
    34de:	cd 01       	movw	r24, r26
    34e0:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	9e 83       	std	Y+6, r25	; 0x06
    34ea:	8d 83       	std	Y+5, r24	; 0x05
    34ec:	0f c0       	rjmp	.+30     	; 0x350c <run+0x694>
    34ee:	84 e1       	ldi	r24, 0x14	; 20
    34f0:	91 e0       	ldi	r25, 0x01	; 1
    34f2:	9c 83       	std	Y+4, r25	; 0x04
    34f4:	8b 83       	std	Y+3, r24	; 0x03
    34f6:	8b 81       	ldd	r24, Y+3	; 0x03
    34f8:	9c 81       	ldd	r25, Y+4	; 0x04
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	f1 f7       	brne	.-4      	; 0x34fa <run+0x682>
    34fe:	9c 83       	std	Y+4, r25	; 0x04
    3500:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3502:	8d 81       	ldd	r24, Y+5	; 0x05
    3504:	9e 81       	ldd	r25, Y+6	; 0x06
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	9e 83       	std	Y+6, r25	; 0x06
    350a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350c:	8d 81       	ldd	r24, Y+5	; 0x05
    350e:	9e 81       	ldd	r25, Y+6	; 0x06
    3510:	00 97       	sbiw	r24, 0x00	; 0
    3512:	69 f7       	brne	.-38     	; 0x34ee <run+0x676>
    3514:	14 c0       	rjmp	.+40     	; 0x353e <run+0x6c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3516:	6f 81       	ldd	r22, Y+7	; 0x07
    3518:	78 85       	ldd	r23, Y+8	; 0x08
    351a:	89 85       	ldd	r24, Y+9	; 0x09
    351c:	9a 85       	ldd	r25, Y+10	; 0x0a
    351e:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	9e 83       	std	Y+6, r25	; 0x06
    3528:	8d 83       	std	Y+5, r24	; 0x05
    352a:	8d 81       	ldd	r24, Y+5	; 0x05
    352c:	9e 81       	ldd	r25, Y+6	; 0x06
    352e:	9a 83       	std	Y+2, r25	; 0x02
    3530:	89 83       	std	Y+1, r24	; 0x01
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	9a 81       	ldd	r25, Y+2	; 0x02
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	f1 f7       	brne	.-4      	; 0x3536 <run+0x6be>
    353a:	9a 83       	std	Y+2, r25	; 0x02
    353c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
		while(move_bot() == 1) { }
    353e:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <move_bot>
    3542:	81 30       	cpi	r24, 0x01	; 1
    3544:	91 05       	cpc	r25, r1
    3546:	d9 f3       	breq	.-10     	; 0x353e <run+0x6c6>
    3548:	a7 cc       	rjmp	.-1714   	; 0x2e98 <run+0x20>

0000354a <checkfollow>:
	}
}


void checkfollow(void)
{
    354a:	df 93       	push	r29
    354c:	cf 93       	push	r28
    354e:	0f 92       	push	r0
    3550:	0f 92       	push	r0
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
	int temp12=0;
    3556:	1a 82       	std	Y+2, r1	; 0x02
    3558:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		init_sensor_values();
    355a:	0e 94 4d 0c 	call	0x189a	; 0x189a <init_sensor_values>
		while(checkobstacle()==0) {} 
    355e:	0e 94 a1 10 	call	0x2142	; 0x2142 <checkobstacle>
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	e1 f3       	breq	.-8      	; 0x355e <checkfollow+0x14>
		buzzer_off();
    3566:	0e 94 9b 01 	call	0x336	; 0x336 <buzzer_off>
		follow();
    356a:	0e 94 8f 12 	call	0x251e	; 0x251e <follow>
		
		if(checkintersection() == 1 )
    356e:	0e 94 44 11 	call	0x2288	; 0x2288 <checkintersection>
    3572:	81 30       	cpi	r24, 0x01	; 1
    3574:	91 05       	cpc	r25, r1
    3576:	91 f4       	brne	.+36     	; 0x359c <checkfollow+0x52>
		{	
			temp12++;
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	9a 81       	ldd	r25, Y+2	; 0x02
    357c:	01 96       	adiw	r24, 0x01	; 1
    357e:	9a 83       	std	Y+2, r25	; 0x02
    3580:	89 83       	std	Y+1, r24	; 0x01
			if(temp12==2){ turn_right(); temp12=0; }
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	82 30       	cpi	r24, 0x02	; 2
    3588:	91 05       	cpc	r25, r1
    358a:	29 f4       	brne	.+10     	; 0x3596 <checkfollow+0x4c>
    358c:	0e 94 8e 10 	call	0x211c	; 0x211c <turn_right>
    3590:	1a 82       	std	Y+2, r1	; 0x02
    3592:	19 82       	std	Y+1, r1	; 0x01
    3594:	e2 cf       	rjmp	.-60     	; 0x355a <checkfollow+0x10>
			else follow();
    3596:	0e 94 8f 12 	call	0x251e	; 0x251e <follow>
    359a:	df cf       	rjmp	.-66     	; 0x355a <checkfollow+0x10>
			
		}
		else 
		{
			follow();
    359c:	0e 94 8f 12 	call	0x251e	; 0x251e <follow>
    35a0:	dc cf       	rjmp	.-72     	; 0x355a <checkfollow+0x10>

000035a2 <checkarm>:
		
	}
}

void checkarm(void)
{
    35a2:	df 93       	push	r29
    35a4:	cf 93       	push	r28
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	6c 97       	sbiw	r28, 0x1c	; 28
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	f8 94       	cli
    35b0:	de bf       	out	0x3e, r29	; 62
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		arm_up();
    35b6:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <arm_up>
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	aa ef       	ldi	r26, 0xFA	; 250
    35c0:	b4 e4       	ldi	r27, 0x44	; 68
    35c2:	89 8f       	std	Y+25, r24	; 0x19
    35c4:	9a 8f       	std	Y+26, r25	; 0x1a
    35c6:	ab 8f       	std	Y+27, r26	; 0x1b
    35c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ca:	69 8d       	ldd	r22, Y+25	; 0x19
    35cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35d2:	2d ec       	ldi	r18, 0xCD	; 205
    35d4:	3c ec       	ldi	r19, 0xCC	; 204
    35d6:	4c e2       	ldi	r20, 0x2C	; 44
    35d8:	55 e4       	ldi	r21, 0x45	; 69
    35da:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	8d 8b       	std	Y+21, r24	; 0x15
    35e4:	9e 8b       	std	Y+22, r25	; 0x16
    35e6:	af 8b       	std	Y+23, r26	; 0x17
    35e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35ea:	6d 89       	ldd	r22, Y+21	; 0x15
    35ec:	7e 89       	ldd	r23, Y+22	; 0x16
    35ee:	8f 89       	ldd	r24, Y+23	; 0x17
    35f0:	98 8d       	ldd	r25, Y+24	; 0x18
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	40 e8       	ldi	r20, 0x80	; 128
    35f8:	5f e3       	ldi	r21, 0x3F	; 63
    35fa:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    35fe:	88 23       	and	r24, r24
    3600:	2c f4       	brge	.+10     	; 0x360c <checkarm+0x6a>
		__ticks = 1;
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	9c 8b       	std	Y+20, r25	; 0x14
    3608:	8b 8b       	std	Y+19, r24	; 0x13
    360a:	3f c0       	rjmp	.+126    	; 0x368a <checkarm+0xe8>
	else if (__tmp > 65535)
    360c:	6d 89       	ldd	r22, Y+21	; 0x15
    360e:	7e 89       	ldd	r23, Y+22	; 0x16
    3610:	8f 89       	ldd	r24, Y+23	; 0x17
    3612:	98 8d       	ldd	r25, Y+24	; 0x18
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	3f ef       	ldi	r19, 0xFF	; 255
    3618:	4f e7       	ldi	r20, 0x7F	; 127
    361a:	57 e4       	ldi	r21, 0x47	; 71
    361c:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    3620:	18 16       	cp	r1, r24
    3622:	4c f5       	brge	.+82     	; 0x3676 <checkarm+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3624:	69 8d       	ldd	r22, Y+25	; 0x19
    3626:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3628:	8b 8d       	ldd	r24, Y+27	; 0x1b
    362a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	40 e2       	ldi	r20, 0x20	; 32
    3632:	51 e4       	ldi	r21, 0x41	; 65
    3634:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	bc 01       	movw	r22, r24
    363e:	cd 01       	movw	r24, r26
    3640:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	9c 8b       	std	Y+20, r25	; 0x14
    364a:	8b 8b       	std	Y+19, r24	; 0x13
    364c:	0f c0       	rjmp	.+30     	; 0x366c <checkarm+0xca>
    364e:	84 e1       	ldi	r24, 0x14	; 20
    3650:	91 e0       	ldi	r25, 0x01	; 1
    3652:	9a 8b       	std	Y+18, r25	; 0x12
    3654:	89 8b       	std	Y+17, r24	; 0x11
    3656:	89 89       	ldd	r24, Y+17	; 0x11
    3658:	9a 89       	ldd	r25, Y+18	; 0x12
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	f1 f7       	brne	.-4      	; 0x365a <checkarm+0xb8>
    365e:	9a 8b       	std	Y+18, r25	; 0x12
    3660:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3662:	8b 89       	ldd	r24, Y+19	; 0x13
    3664:	9c 89       	ldd	r25, Y+20	; 0x14
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	9c 8b       	std	Y+20, r25	; 0x14
    366a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    366c:	8b 89       	ldd	r24, Y+19	; 0x13
    366e:	9c 89       	ldd	r25, Y+20	; 0x14
    3670:	00 97       	sbiw	r24, 0x00	; 0
    3672:	69 f7       	brne	.-38     	; 0x364e <checkarm+0xac>
    3674:	14 c0       	rjmp	.+40     	; 0x369e <checkarm+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3676:	6d 89       	ldd	r22, Y+21	; 0x15
    3678:	7e 89       	ldd	r23, Y+22	; 0x16
    367a:	8f 89       	ldd	r24, Y+23	; 0x17
    367c:	98 8d       	ldd	r25, Y+24	; 0x18
    367e:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	9c 8b       	std	Y+20, r25	; 0x14
    3688:	8b 8b       	std	Y+19, r24	; 0x13
    368a:	8b 89       	ldd	r24, Y+19	; 0x13
    368c:	9c 89       	ldd	r25, Y+20	; 0x14
    368e:	98 8b       	std	Y+16, r25	; 0x10
    3690:	8f 87       	std	Y+15, r24	; 0x0f
    3692:	8f 85       	ldd	r24, Y+15	; 0x0f
    3694:	98 89       	ldd	r25, Y+16	; 0x10
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	f1 f7       	brne	.-4      	; 0x3696 <checkarm+0xf4>
    369a:	98 8b       	std	Y+16, r25	; 0x10
    369c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		arm_down();
    369e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <arm_down>
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	aa ef       	ldi	r26, 0xFA	; 250
    36a8:	b4 e4       	ldi	r27, 0x44	; 68
    36aa:	8b 87       	std	Y+11, r24	; 0x0b
    36ac:	9c 87       	std	Y+12, r25	; 0x0c
    36ae:	ad 87       	std	Y+13, r26	; 0x0d
    36b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    36b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    36b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ba:	2d ec       	ldi	r18, 0xCD	; 205
    36bc:	3c ec       	ldi	r19, 0xCC	; 204
    36be:	4c e2       	ldi	r20, 0x2C	; 44
    36c0:	55 e4       	ldi	r21, 0x45	; 69
    36c2:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	8f 83       	std	Y+7, r24	; 0x07
    36cc:	98 87       	std	Y+8, r25	; 0x08
    36ce:	a9 87       	std	Y+9, r26	; 0x09
    36d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36d2:	6f 81       	ldd	r22, Y+7	; 0x07
    36d4:	78 85       	ldd	r23, Y+8	; 0x08
    36d6:	89 85       	ldd	r24, Y+9	; 0x09
    36d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 e8       	ldi	r20, 0x80	; 128
    36e0:	5f e3       	ldi	r21, 0x3F	; 63
    36e2:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <__ltsf2>
    36e6:	88 23       	and	r24, r24
    36e8:	2c f4       	brge	.+10     	; 0x36f4 <checkarm+0x152>
		__ticks = 1;
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	9e 83       	std	Y+6, r25	; 0x06
    36f0:	8d 83       	std	Y+5, r24	; 0x05
    36f2:	3f c0       	rjmp	.+126    	; 0x3772 <checkarm+0x1d0>
	else if (__tmp > 65535)
    36f4:	6f 81       	ldd	r22, Y+7	; 0x07
    36f6:	78 85       	ldd	r23, Y+8	; 0x08
    36f8:	89 85       	ldd	r24, Y+9	; 0x09
    36fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	3f ef       	ldi	r19, 0xFF	; 255
    3700:	4f e7       	ldi	r20, 0x7F	; 127
    3702:	57 e4       	ldi	r21, 0x47	; 71
    3704:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gtsf2>
    3708:	18 16       	cp	r1, r24
    370a:	4c f5       	brge	.+82     	; 0x375e <checkarm+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370c:	6b 85       	ldd	r22, Y+11	; 0x0b
    370e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3710:	8d 85       	ldd	r24, Y+13	; 0x0d
    3712:	9e 85       	ldd	r25, Y+14	; 0x0e
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	40 e2       	ldi	r20, 0x20	; 32
    371a:	51 e4       	ldi	r21, 0x41	; 65
    371c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__mulsf3>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	bc 01       	movw	r22, r24
    3726:	cd 01       	movw	r24, r26
    3728:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    372c:	dc 01       	movw	r26, r24
    372e:	cb 01       	movw	r24, r22
    3730:	9e 83       	std	Y+6, r25	; 0x06
    3732:	8d 83       	std	Y+5, r24	; 0x05
    3734:	0f c0       	rjmp	.+30     	; 0x3754 <checkarm+0x1b2>
    3736:	84 e1       	ldi	r24, 0x14	; 20
    3738:	91 e0       	ldi	r25, 0x01	; 1
    373a:	9c 83       	std	Y+4, r25	; 0x04
    373c:	8b 83       	std	Y+3, r24	; 0x03
    373e:	8b 81       	ldd	r24, Y+3	; 0x03
    3740:	9c 81       	ldd	r25, Y+4	; 0x04
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	f1 f7       	brne	.-4      	; 0x3742 <checkarm+0x1a0>
    3746:	9c 83       	std	Y+4, r25	; 0x04
    3748:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    374a:	8d 81       	ldd	r24, Y+5	; 0x05
    374c:	9e 81       	ldd	r25, Y+6	; 0x06
    374e:	01 97       	sbiw	r24, 0x01	; 1
    3750:	9e 83       	std	Y+6, r25	; 0x06
    3752:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3754:	8d 81       	ldd	r24, Y+5	; 0x05
    3756:	9e 81       	ldd	r25, Y+6	; 0x06
    3758:	00 97       	sbiw	r24, 0x00	; 0
    375a:	69 f7       	brne	.-38     	; 0x3736 <checkarm+0x194>
    375c:	2c cf       	rjmp	.-424    	; 0x35b6 <checkarm+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375e:	6f 81       	ldd	r22, Y+7	; 0x07
    3760:	78 85       	ldd	r23, Y+8	; 0x08
    3762:	89 85       	ldd	r24, Y+9	; 0x09
    3764:	9a 85       	ldd	r25, Y+10	; 0x0a
    3766:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	9e 83       	std	Y+6, r25	; 0x06
    3770:	8d 83       	std	Y+5, r24	; 0x05
    3772:	8d 81       	ldd	r24, Y+5	; 0x05
    3774:	9e 81       	ldd	r25, Y+6	; 0x06
    3776:	9a 83       	std	Y+2, r25	; 0x02
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	9a 81       	ldd	r25, Y+2	; 0x02
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	f1 f7       	brne	.-4      	; 0x377e <checkarm+0x1dc>
    3782:	9a 83       	std	Y+2, r25	; 0x02
    3784:	89 83       	std	Y+1, r24	; 0x01
    3786:	17 cf       	rjmp	.-466    	; 0x35b6 <checkarm+0x14>

00003788 <checkstraight>:
		_delay_ms(2000);
	}
}

void checkstraight()
{
    3788:	df 93       	push	r29
    378a:	cf 93       	push	r28
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		follow();
    3790:	0e 94 8f 12 	call	0x251e	; 0x251e <follow>
    3794:	fd cf       	rjmp	.-6      	; 0x3790 <checkstraight+0x8>

00003796 <main>:
	}
}

int main(void)
{
    3796:	df 93       	push	r29
    3798:	cf 93       	push	r28
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    379e:	0e 94 84 01 	call	0x308	; 0x308 <init_devices>
	lcd_cursor(1,1);		
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	61 e0       	ldi	r22, 0x01	; 1
    37a6:	0e 94 cf 0a 	call	0x159e	; 0x159e <lcd_cursor>
	lcd_string("Welcome");
    37aa:	86 e4       	ldi	r24, 0x46	; 70
    37ac:	92 e0       	ldi	r25, 0x02	; 2
    37ae:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_string>
	
	UDR0 = 'a';
    37b2:	e6 ec       	ldi	r30, 0xC6	; 198
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	81 e6       	ldi	r24, 0x61	; 97
    37b8:	80 83       	st	Z, r24
	checkstraight();
    37ba:	0e 94 c4 1b 	call	0x3788	; 0x3788 <checkstraight>
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
	//checkfollow();
	//checkarm();
	//run();
	
	
}
    37c2:	cf 91       	pop	r28
    37c4:	df 91       	pop	r29
    37c6:	08 95       	ret

000037c8 <__fixunssfsi>:
    37c8:	ef 92       	push	r14
    37ca:	ff 92       	push	r15
    37cc:	0f 93       	push	r16
    37ce:	1f 93       	push	r17
    37d0:	7b 01       	movw	r14, r22
    37d2:	8c 01       	movw	r16, r24
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e0       	ldi	r20, 0x00	; 0
    37da:	5f e4       	ldi	r21, 0x4F	; 79
    37dc:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__gesf2>
    37e0:	88 23       	and	r24, r24
    37e2:	8c f0       	brlt	.+34     	; 0x3806 <__fixunssfsi+0x3e>
    37e4:	c8 01       	movw	r24, r16
    37e6:	b7 01       	movw	r22, r14
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	40 e0       	ldi	r20, 0x00	; 0
    37ee:	5f e4       	ldi	r21, 0x4F	; 79
    37f0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    37f4:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__fixsfsi>
    37f8:	9b 01       	movw	r18, r22
    37fa:	ac 01       	movw	r20, r24
    37fc:	20 50       	subi	r18, 0x00	; 0
    37fe:	30 40       	sbci	r19, 0x00	; 0
    3800:	40 40       	sbci	r20, 0x00	; 0
    3802:	50 48       	sbci	r21, 0x80	; 128
    3804:	06 c0       	rjmp	.+12     	; 0x3812 <__fixunssfsi+0x4a>
    3806:	c8 01       	movw	r24, r16
    3808:	b7 01       	movw	r22, r14
    380a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__fixsfsi>
    380e:	9b 01       	movw	r18, r22
    3810:	ac 01       	movw	r20, r24
    3812:	b9 01       	movw	r22, r18
    3814:	ca 01       	movw	r24, r20
    3816:	1f 91       	pop	r17
    3818:	0f 91       	pop	r16
    381a:	ff 90       	pop	r15
    381c:	ef 90       	pop	r14
    381e:	08 95       	ret

00003820 <_fpadd_parts>:
    3820:	a0 e0       	ldi	r26, 0x00	; 0
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	e6 e1       	ldi	r30, 0x16	; 22
    3826:	fc e1       	ldi	r31, 0x1C	; 28
    3828:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__prologue_saves__>
    382c:	dc 01       	movw	r26, r24
    382e:	2b 01       	movw	r4, r22
    3830:	fa 01       	movw	r30, r20
    3832:	9c 91       	ld	r25, X
    3834:	92 30       	cpi	r25, 0x02	; 2
    3836:	08 f4       	brcc	.+2      	; 0x383a <_fpadd_parts+0x1a>
    3838:	39 c1       	rjmp	.+626    	; 0x3aac <_fpadd_parts+0x28c>
    383a:	eb 01       	movw	r28, r22
    383c:	88 81       	ld	r24, Y
    383e:	82 30       	cpi	r24, 0x02	; 2
    3840:	08 f4       	brcc	.+2      	; 0x3844 <_fpadd_parts+0x24>
    3842:	33 c1       	rjmp	.+614    	; 0x3aaa <_fpadd_parts+0x28a>
    3844:	94 30       	cpi	r25, 0x04	; 4
    3846:	69 f4       	brne	.+26     	; 0x3862 <_fpadd_parts+0x42>
    3848:	84 30       	cpi	r24, 0x04	; 4
    384a:	09 f0       	breq	.+2      	; 0x384e <_fpadd_parts+0x2e>
    384c:	2f c1       	rjmp	.+606    	; 0x3aac <_fpadd_parts+0x28c>
    384e:	11 96       	adiw	r26, 0x01	; 1
    3850:	9c 91       	ld	r25, X
    3852:	11 97       	sbiw	r26, 0x01	; 1
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	98 17       	cp	r25, r24
    3858:	09 f4       	brne	.+2      	; 0x385c <_fpadd_parts+0x3c>
    385a:	28 c1       	rjmp	.+592    	; 0x3aac <_fpadd_parts+0x28c>
    385c:	ae e4       	ldi	r26, 0x4E	; 78
    385e:	b2 e0       	ldi	r27, 0x02	; 2
    3860:	25 c1       	rjmp	.+586    	; 0x3aac <_fpadd_parts+0x28c>
    3862:	84 30       	cpi	r24, 0x04	; 4
    3864:	09 f4       	brne	.+2      	; 0x3868 <_fpadd_parts+0x48>
    3866:	21 c1       	rjmp	.+578    	; 0x3aaa <_fpadd_parts+0x28a>
    3868:	82 30       	cpi	r24, 0x02	; 2
    386a:	a9 f4       	brne	.+42     	; 0x3896 <_fpadd_parts+0x76>
    386c:	92 30       	cpi	r25, 0x02	; 2
    386e:	09 f0       	breq	.+2      	; 0x3872 <_fpadd_parts+0x52>
    3870:	1d c1       	rjmp	.+570    	; 0x3aac <_fpadd_parts+0x28c>
    3872:	9a 01       	movw	r18, r20
    3874:	ad 01       	movw	r20, r26
    3876:	88 e0       	ldi	r24, 0x08	; 8
    3878:	ea 01       	movw	r28, r20
    387a:	09 90       	ld	r0, Y+
    387c:	ae 01       	movw	r20, r28
    387e:	e9 01       	movw	r28, r18
    3880:	09 92       	st	Y+, r0
    3882:	9e 01       	movw	r18, r28
    3884:	81 50       	subi	r24, 0x01	; 1
    3886:	c1 f7       	brne	.-16     	; 0x3878 <_fpadd_parts+0x58>
    3888:	e2 01       	movw	r28, r4
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	11 96       	adiw	r26, 0x01	; 1
    388e:	9c 91       	ld	r25, X
    3890:	89 23       	and	r24, r25
    3892:	81 83       	std	Z+1, r24	; 0x01
    3894:	08 c1       	rjmp	.+528    	; 0x3aa6 <_fpadd_parts+0x286>
    3896:	92 30       	cpi	r25, 0x02	; 2
    3898:	09 f4       	brne	.+2      	; 0x389c <_fpadd_parts+0x7c>
    389a:	07 c1       	rjmp	.+526    	; 0x3aaa <_fpadd_parts+0x28a>
    389c:	12 96       	adiw	r26, 0x02	; 2
    389e:	2d 90       	ld	r2, X+
    38a0:	3c 90       	ld	r3, X
    38a2:	13 97       	sbiw	r26, 0x03	; 3
    38a4:	eb 01       	movw	r28, r22
    38a6:	8a 81       	ldd	r24, Y+2	; 0x02
    38a8:	9b 81       	ldd	r25, Y+3	; 0x03
    38aa:	14 96       	adiw	r26, 0x04	; 4
    38ac:	ad 90       	ld	r10, X+
    38ae:	bd 90       	ld	r11, X+
    38b0:	cd 90       	ld	r12, X+
    38b2:	dc 90       	ld	r13, X
    38b4:	17 97       	sbiw	r26, 0x07	; 7
    38b6:	ec 80       	ldd	r14, Y+4	; 0x04
    38b8:	fd 80       	ldd	r15, Y+5	; 0x05
    38ba:	0e 81       	ldd	r16, Y+6	; 0x06
    38bc:	1f 81       	ldd	r17, Y+7	; 0x07
    38be:	91 01       	movw	r18, r2
    38c0:	28 1b       	sub	r18, r24
    38c2:	39 0b       	sbc	r19, r25
    38c4:	b9 01       	movw	r22, r18
    38c6:	37 ff       	sbrs	r19, 7
    38c8:	04 c0       	rjmp	.+8      	; 0x38d2 <_fpadd_parts+0xb2>
    38ca:	66 27       	eor	r22, r22
    38cc:	77 27       	eor	r23, r23
    38ce:	62 1b       	sub	r22, r18
    38d0:	73 0b       	sbc	r23, r19
    38d2:	60 32       	cpi	r22, 0x20	; 32
    38d4:	71 05       	cpc	r23, r1
    38d6:	0c f0       	brlt	.+2      	; 0x38da <_fpadd_parts+0xba>
    38d8:	61 c0       	rjmp	.+194    	; 0x399c <_fpadd_parts+0x17c>
    38da:	12 16       	cp	r1, r18
    38dc:	13 06       	cpc	r1, r19
    38de:	6c f5       	brge	.+90     	; 0x393a <_fpadd_parts+0x11a>
    38e0:	37 01       	movw	r6, r14
    38e2:	48 01       	movw	r8, r16
    38e4:	06 2e       	mov	r0, r22
    38e6:	04 c0       	rjmp	.+8      	; 0x38f0 <_fpadd_parts+0xd0>
    38e8:	96 94       	lsr	r9
    38ea:	87 94       	ror	r8
    38ec:	77 94       	ror	r7
    38ee:	67 94       	ror	r6
    38f0:	0a 94       	dec	r0
    38f2:	d2 f7       	brpl	.-12     	; 0x38e8 <_fpadd_parts+0xc8>
    38f4:	21 e0       	ldi	r18, 0x01	; 1
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 e0       	ldi	r20, 0x00	; 0
    38fa:	50 e0       	ldi	r21, 0x00	; 0
    38fc:	04 c0       	rjmp	.+8      	; 0x3906 <_fpadd_parts+0xe6>
    38fe:	22 0f       	add	r18, r18
    3900:	33 1f       	adc	r19, r19
    3902:	44 1f       	adc	r20, r20
    3904:	55 1f       	adc	r21, r21
    3906:	6a 95       	dec	r22
    3908:	d2 f7       	brpl	.-12     	; 0x38fe <_fpadd_parts+0xde>
    390a:	21 50       	subi	r18, 0x01	; 1
    390c:	30 40       	sbci	r19, 0x00	; 0
    390e:	40 40       	sbci	r20, 0x00	; 0
    3910:	50 40       	sbci	r21, 0x00	; 0
    3912:	2e 21       	and	r18, r14
    3914:	3f 21       	and	r19, r15
    3916:	40 23       	and	r20, r16
    3918:	51 23       	and	r21, r17
    391a:	21 15       	cp	r18, r1
    391c:	31 05       	cpc	r19, r1
    391e:	41 05       	cpc	r20, r1
    3920:	51 05       	cpc	r21, r1
    3922:	21 f0       	breq	.+8      	; 0x392c <_fpadd_parts+0x10c>
    3924:	21 e0       	ldi	r18, 0x01	; 1
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e0       	ldi	r20, 0x00	; 0
    392a:	50 e0       	ldi	r21, 0x00	; 0
    392c:	79 01       	movw	r14, r18
    392e:	8a 01       	movw	r16, r20
    3930:	e6 28       	or	r14, r6
    3932:	f7 28       	or	r15, r7
    3934:	08 29       	or	r16, r8
    3936:	19 29       	or	r17, r9
    3938:	3c c0       	rjmp	.+120    	; 0x39b2 <_fpadd_parts+0x192>
    393a:	23 2b       	or	r18, r19
    393c:	d1 f1       	breq	.+116    	; 0x39b2 <_fpadd_parts+0x192>
    393e:	26 0e       	add	r2, r22
    3940:	37 1e       	adc	r3, r23
    3942:	35 01       	movw	r6, r10
    3944:	46 01       	movw	r8, r12
    3946:	06 2e       	mov	r0, r22
    3948:	04 c0       	rjmp	.+8      	; 0x3952 <_fpadd_parts+0x132>
    394a:	96 94       	lsr	r9
    394c:	87 94       	ror	r8
    394e:	77 94       	ror	r7
    3950:	67 94       	ror	r6
    3952:	0a 94       	dec	r0
    3954:	d2 f7       	brpl	.-12     	; 0x394a <_fpadd_parts+0x12a>
    3956:	21 e0       	ldi	r18, 0x01	; 1
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	50 e0       	ldi	r21, 0x00	; 0
    395e:	04 c0       	rjmp	.+8      	; 0x3968 <_fpadd_parts+0x148>
    3960:	22 0f       	add	r18, r18
    3962:	33 1f       	adc	r19, r19
    3964:	44 1f       	adc	r20, r20
    3966:	55 1f       	adc	r21, r21
    3968:	6a 95       	dec	r22
    396a:	d2 f7       	brpl	.-12     	; 0x3960 <_fpadd_parts+0x140>
    396c:	21 50       	subi	r18, 0x01	; 1
    396e:	30 40       	sbci	r19, 0x00	; 0
    3970:	40 40       	sbci	r20, 0x00	; 0
    3972:	50 40       	sbci	r21, 0x00	; 0
    3974:	2a 21       	and	r18, r10
    3976:	3b 21       	and	r19, r11
    3978:	4c 21       	and	r20, r12
    397a:	5d 21       	and	r21, r13
    397c:	21 15       	cp	r18, r1
    397e:	31 05       	cpc	r19, r1
    3980:	41 05       	cpc	r20, r1
    3982:	51 05       	cpc	r21, r1
    3984:	21 f0       	breq	.+8      	; 0x398e <_fpadd_parts+0x16e>
    3986:	21 e0       	ldi	r18, 0x01	; 1
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	40 e0       	ldi	r20, 0x00	; 0
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	59 01       	movw	r10, r18
    3990:	6a 01       	movw	r12, r20
    3992:	a6 28       	or	r10, r6
    3994:	b7 28       	or	r11, r7
    3996:	c8 28       	or	r12, r8
    3998:	d9 28       	or	r13, r9
    399a:	0b c0       	rjmp	.+22     	; 0x39b2 <_fpadd_parts+0x192>
    399c:	82 15       	cp	r24, r2
    399e:	93 05       	cpc	r25, r3
    39a0:	2c f0       	brlt	.+10     	; 0x39ac <_fpadd_parts+0x18c>
    39a2:	1c 01       	movw	r2, r24
    39a4:	aa 24       	eor	r10, r10
    39a6:	bb 24       	eor	r11, r11
    39a8:	65 01       	movw	r12, r10
    39aa:	03 c0       	rjmp	.+6      	; 0x39b2 <_fpadd_parts+0x192>
    39ac:	ee 24       	eor	r14, r14
    39ae:	ff 24       	eor	r15, r15
    39b0:	87 01       	movw	r16, r14
    39b2:	11 96       	adiw	r26, 0x01	; 1
    39b4:	9c 91       	ld	r25, X
    39b6:	d2 01       	movw	r26, r4
    39b8:	11 96       	adiw	r26, 0x01	; 1
    39ba:	8c 91       	ld	r24, X
    39bc:	98 17       	cp	r25, r24
    39be:	09 f4       	brne	.+2      	; 0x39c2 <_fpadd_parts+0x1a2>
    39c0:	45 c0       	rjmp	.+138    	; 0x3a4c <_fpadd_parts+0x22c>
    39c2:	99 23       	and	r25, r25
    39c4:	39 f0       	breq	.+14     	; 0x39d4 <_fpadd_parts+0x1b4>
    39c6:	a8 01       	movw	r20, r16
    39c8:	97 01       	movw	r18, r14
    39ca:	2a 19       	sub	r18, r10
    39cc:	3b 09       	sbc	r19, r11
    39ce:	4c 09       	sbc	r20, r12
    39d0:	5d 09       	sbc	r21, r13
    39d2:	06 c0       	rjmp	.+12     	; 0x39e0 <_fpadd_parts+0x1c0>
    39d4:	a6 01       	movw	r20, r12
    39d6:	95 01       	movw	r18, r10
    39d8:	2e 19       	sub	r18, r14
    39da:	3f 09       	sbc	r19, r15
    39dc:	40 0b       	sbc	r20, r16
    39de:	51 0b       	sbc	r21, r17
    39e0:	57 fd       	sbrc	r21, 7
    39e2:	08 c0       	rjmp	.+16     	; 0x39f4 <_fpadd_parts+0x1d4>
    39e4:	11 82       	std	Z+1, r1	; 0x01
    39e6:	33 82       	std	Z+3, r3	; 0x03
    39e8:	22 82       	std	Z+2, r2	; 0x02
    39ea:	24 83       	std	Z+4, r18	; 0x04
    39ec:	35 83       	std	Z+5, r19	; 0x05
    39ee:	46 83       	std	Z+6, r20	; 0x06
    39f0:	57 83       	std	Z+7, r21	; 0x07
    39f2:	1d c0       	rjmp	.+58     	; 0x3a2e <_fpadd_parts+0x20e>
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	81 83       	std	Z+1, r24	; 0x01
    39f8:	33 82       	std	Z+3, r3	; 0x03
    39fa:	22 82       	std	Z+2, r2	; 0x02
    39fc:	88 27       	eor	r24, r24
    39fe:	99 27       	eor	r25, r25
    3a00:	dc 01       	movw	r26, r24
    3a02:	82 1b       	sub	r24, r18
    3a04:	93 0b       	sbc	r25, r19
    3a06:	a4 0b       	sbc	r26, r20
    3a08:	b5 0b       	sbc	r27, r21
    3a0a:	84 83       	std	Z+4, r24	; 0x04
    3a0c:	95 83       	std	Z+5, r25	; 0x05
    3a0e:	a6 83       	std	Z+6, r26	; 0x06
    3a10:	b7 83       	std	Z+7, r27	; 0x07
    3a12:	0d c0       	rjmp	.+26     	; 0x3a2e <_fpadd_parts+0x20e>
    3a14:	22 0f       	add	r18, r18
    3a16:	33 1f       	adc	r19, r19
    3a18:	44 1f       	adc	r20, r20
    3a1a:	55 1f       	adc	r21, r21
    3a1c:	24 83       	std	Z+4, r18	; 0x04
    3a1e:	35 83       	std	Z+5, r19	; 0x05
    3a20:	46 83       	std	Z+6, r20	; 0x06
    3a22:	57 83       	std	Z+7, r21	; 0x07
    3a24:	82 81       	ldd	r24, Z+2	; 0x02
    3a26:	93 81       	ldd	r25, Z+3	; 0x03
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	93 83       	std	Z+3, r25	; 0x03
    3a2c:	82 83       	std	Z+2, r24	; 0x02
    3a2e:	24 81       	ldd	r18, Z+4	; 0x04
    3a30:	35 81       	ldd	r19, Z+5	; 0x05
    3a32:	46 81       	ldd	r20, Z+6	; 0x06
    3a34:	57 81       	ldd	r21, Z+7	; 0x07
    3a36:	da 01       	movw	r26, r20
    3a38:	c9 01       	movw	r24, r18
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	a1 09       	sbc	r26, r1
    3a3e:	b1 09       	sbc	r27, r1
    3a40:	8f 5f       	subi	r24, 0xFF	; 255
    3a42:	9f 4f       	sbci	r25, 0xFF	; 255
    3a44:	af 4f       	sbci	r26, 0xFF	; 255
    3a46:	bf 43       	sbci	r27, 0x3F	; 63
    3a48:	28 f3       	brcs	.-54     	; 0x3a14 <_fpadd_parts+0x1f4>
    3a4a:	0b c0       	rjmp	.+22     	; 0x3a62 <_fpadd_parts+0x242>
    3a4c:	91 83       	std	Z+1, r25	; 0x01
    3a4e:	33 82       	std	Z+3, r3	; 0x03
    3a50:	22 82       	std	Z+2, r2	; 0x02
    3a52:	ea 0c       	add	r14, r10
    3a54:	fb 1c       	adc	r15, r11
    3a56:	0c 1d       	adc	r16, r12
    3a58:	1d 1d       	adc	r17, r13
    3a5a:	e4 82       	std	Z+4, r14	; 0x04
    3a5c:	f5 82       	std	Z+5, r15	; 0x05
    3a5e:	06 83       	std	Z+6, r16	; 0x06
    3a60:	17 83       	std	Z+7, r17	; 0x07
    3a62:	83 e0       	ldi	r24, 0x03	; 3
    3a64:	80 83       	st	Z, r24
    3a66:	24 81       	ldd	r18, Z+4	; 0x04
    3a68:	35 81       	ldd	r19, Z+5	; 0x05
    3a6a:	46 81       	ldd	r20, Z+6	; 0x06
    3a6c:	57 81       	ldd	r21, Z+7	; 0x07
    3a6e:	57 ff       	sbrs	r21, 7
    3a70:	1a c0       	rjmp	.+52     	; 0x3aa6 <_fpadd_parts+0x286>
    3a72:	c9 01       	movw	r24, r18
    3a74:	aa 27       	eor	r26, r26
    3a76:	97 fd       	sbrc	r25, 7
    3a78:	a0 95       	com	r26
    3a7a:	ba 2f       	mov	r27, r26
    3a7c:	81 70       	andi	r24, 0x01	; 1
    3a7e:	90 70       	andi	r25, 0x00	; 0
    3a80:	a0 70       	andi	r26, 0x00	; 0
    3a82:	b0 70       	andi	r27, 0x00	; 0
    3a84:	56 95       	lsr	r21
    3a86:	47 95       	ror	r20
    3a88:	37 95       	ror	r19
    3a8a:	27 95       	ror	r18
    3a8c:	82 2b       	or	r24, r18
    3a8e:	93 2b       	or	r25, r19
    3a90:	a4 2b       	or	r26, r20
    3a92:	b5 2b       	or	r27, r21
    3a94:	84 83       	std	Z+4, r24	; 0x04
    3a96:	95 83       	std	Z+5, r25	; 0x05
    3a98:	a6 83       	std	Z+6, r26	; 0x06
    3a9a:	b7 83       	std	Z+7, r27	; 0x07
    3a9c:	82 81       	ldd	r24, Z+2	; 0x02
    3a9e:	93 81       	ldd	r25, Z+3	; 0x03
    3aa0:	01 96       	adiw	r24, 0x01	; 1
    3aa2:	93 83       	std	Z+3, r25	; 0x03
    3aa4:	82 83       	std	Z+2, r24	; 0x02
    3aa6:	df 01       	movw	r26, r30
    3aa8:	01 c0       	rjmp	.+2      	; 0x3aac <_fpadd_parts+0x28c>
    3aaa:	d2 01       	movw	r26, r4
    3aac:	cd 01       	movw	r24, r26
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	e2 e1       	ldi	r30, 0x12	; 18
    3ab4:	0c 94 24 22 	jmp	0x4448	; 0x4448 <__epilogue_restores__>

00003ab8 <__subsf3>:
    3ab8:	a0 e2       	ldi	r26, 0x20	; 32
    3aba:	b0 e0       	ldi	r27, 0x00	; 0
    3abc:	e2 e6       	ldi	r30, 0x62	; 98
    3abe:	fd e1       	ldi	r31, 0x1D	; 29
    3ac0:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__prologue_saves__+0x18>
    3ac4:	69 83       	std	Y+1, r22	; 0x01
    3ac6:	7a 83       	std	Y+2, r23	; 0x02
    3ac8:	8b 83       	std	Y+3, r24	; 0x03
    3aca:	9c 83       	std	Y+4, r25	; 0x04
    3acc:	2d 83       	std	Y+5, r18	; 0x05
    3ace:	3e 83       	std	Y+6, r19	; 0x06
    3ad0:	4f 83       	std	Y+7, r20	; 0x07
    3ad2:	58 87       	std	Y+8, r21	; 0x08
    3ad4:	e9 e0       	ldi	r30, 0x09	; 9
    3ad6:	ee 2e       	mov	r14, r30
    3ad8:	f1 2c       	mov	r15, r1
    3ada:	ec 0e       	add	r14, r28
    3adc:	fd 1e       	adc	r15, r29
    3ade:	ce 01       	movw	r24, r28
    3ae0:	01 96       	adiw	r24, 0x01	; 1
    3ae2:	b7 01       	movw	r22, r14
    3ae4:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3ae8:	8e 01       	movw	r16, r28
    3aea:	0f 5e       	subi	r16, 0xEF	; 239
    3aec:	1f 4f       	sbci	r17, 0xFF	; 255
    3aee:	ce 01       	movw	r24, r28
    3af0:	05 96       	adiw	r24, 0x05	; 5
    3af2:	b8 01       	movw	r22, r16
    3af4:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3af8:	8a 89       	ldd	r24, Y+18	; 0x12
    3afa:	91 e0       	ldi	r25, 0x01	; 1
    3afc:	89 27       	eor	r24, r25
    3afe:	8a 8b       	std	Y+18, r24	; 0x12
    3b00:	c7 01       	movw	r24, r14
    3b02:	b8 01       	movw	r22, r16
    3b04:	ae 01       	movw	r20, r28
    3b06:	47 5e       	subi	r20, 0xE7	; 231
    3b08:	5f 4f       	sbci	r21, 0xFF	; 255
    3b0a:	0e 94 10 1c 	call	0x3820	; 0x3820 <_fpadd_parts>
    3b0e:	0e 94 45 20 	call	0x408a	; 0x408a <__pack_f>
    3b12:	a0 96       	adiw	r28, 0x20	; 32
    3b14:	e6 e0       	ldi	r30, 0x06	; 6
    3b16:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__epilogue_restores__+0x18>

00003b1a <__addsf3>:
    3b1a:	a0 e2       	ldi	r26, 0x20	; 32
    3b1c:	b0 e0       	ldi	r27, 0x00	; 0
    3b1e:	e3 e9       	ldi	r30, 0x93	; 147
    3b20:	fd e1       	ldi	r31, 0x1D	; 29
    3b22:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__prologue_saves__+0x18>
    3b26:	69 83       	std	Y+1, r22	; 0x01
    3b28:	7a 83       	std	Y+2, r23	; 0x02
    3b2a:	8b 83       	std	Y+3, r24	; 0x03
    3b2c:	9c 83       	std	Y+4, r25	; 0x04
    3b2e:	2d 83       	std	Y+5, r18	; 0x05
    3b30:	3e 83       	std	Y+6, r19	; 0x06
    3b32:	4f 83       	std	Y+7, r20	; 0x07
    3b34:	58 87       	std	Y+8, r21	; 0x08
    3b36:	f9 e0       	ldi	r31, 0x09	; 9
    3b38:	ef 2e       	mov	r14, r31
    3b3a:	f1 2c       	mov	r15, r1
    3b3c:	ec 0e       	add	r14, r28
    3b3e:	fd 1e       	adc	r15, r29
    3b40:	ce 01       	movw	r24, r28
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	b7 01       	movw	r22, r14
    3b46:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3b4a:	8e 01       	movw	r16, r28
    3b4c:	0f 5e       	subi	r16, 0xEF	; 239
    3b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b50:	ce 01       	movw	r24, r28
    3b52:	05 96       	adiw	r24, 0x05	; 5
    3b54:	b8 01       	movw	r22, r16
    3b56:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3b5a:	c7 01       	movw	r24, r14
    3b5c:	b8 01       	movw	r22, r16
    3b5e:	ae 01       	movw	r20, r28
    3b60:	47 5e       	subi	r20, 0xE7	; 231
    3b62:	5f 4f       	sbci	r21, 0xFF	; 255
    3b64:	0e 94 10 1c 	call	0x3820	; 0x3820 <_fpadd_parts>
    3b68:	0e 94 45 20 	call	0x408a	; 0x408a <__pack_f>
    3b6c:	a0 96       	adiw	r28, 0x20	; 32
    3b6e:	e6 e0       	ldi	r30, 0x06	; 6
    3b70:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__epilogue_restores__+0x18>

00003b74 <__mulsf3>:
    3b74:	a0 e2       	ldi	r26, 0x20	; 32
    3b76:	b0 e0       	ldi	r27, 0x00	; 0
    3b78:	e0 ec       	ldi	r30, 0xC0	; 192
    3b7a:	fd e1       	ldi	r31, 0x1D	; 29
    3b7c:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__prologue_saves__>
    3b80:	69 83       	std	Y+1, r22	; 0x01
    3b82:	7a 83       	std	Y+2, r23	; 0x02
    3b84:	8b 83       	std	Y+3, r24	; 0x03
    3b86:	9c 83       	std	Y+4, r25	; 0x04
    3b88:	2d 83       	std	Y+5, r18	; 0x05
    3b8a:	3e 83       	std	Y+6, r19	; 0x06
    3b8c:	4f 83       	std	Y+7, r20	; 0x07
    3b8e:	58 87       	std	Y+8, r21	; 0x08
    3b90:	ce 01       	movw	r24, r28
    3b92:	01 96       	adiw	r24, 0x01	; 1
    3b94:	be 01       	movw	r22, r28
    3b96:	67 5f       	subi	r22, 0xF7	; 247
    3b98:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9a:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3b9e:	ce 01       	movw	r24, r28
    3ba0:	05 96       	adiw	r24, 0x05	; 5
    3ba2:	be 01       	movw	r22, r28
    3ba4:	6f 5e       	subi	r22, 0xEF	; 239
    3ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba8:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3bac:	99 85       	ldd	r25, Y+9	; 0x09
    3bae:	92 30       	cpi	r25, 0x02	; 2
    3bb0:	88 f0       	brcs	.+34     	; 0x3bd4 <__mulsf3+0x60>
    3bb2:	89 89       	ldd	r24, Y+17	; 0x11
    3bb4:	82 30       	cpi	r24, 0x02	; 2
    3bb6:	c8 f0       	brcs	.+50     	; 0x3bea <__mulsf3+0x76>
    3bb8:	94 30       	cpi	r25, 0x04	; 4
    3bba:	19 f4       	brne	.+6      	; 0x3bc2 <__mulsf3+0x4e>
    3bbc:	82 30       	cpi	r24, 0x02	; 2
    3bbe:	51 f4       	brne	.+20     	; 0x3bd4 <__mulsf3+0x60>
    3bc0:	04 c0       	rjmp	.+8      	; 0x3bca <__mulsf3+0x56>
    3bc2:	84 30       	cpi	r24, 0x04	; 4
    3bc4:	29 f4       	brne	.+10     	; 0x3bd0 <__mulsf3+0x5c>
    3bc6:	92 30       	cpi	r25, 0x02	; 2
    3bc8:	81 f4       	brne	.+32     	; 0x3bea <__mulsf3+0x76>
    3bca:	8e e4       	ldi	r24, 0x4E	; 78
    3bcc:	92 e0       	ldi	r25, 0x02	; 2
    3bce:	c6 c0       	rjmp	.+396    	; 0x3d5c <__mulsf3+0x1e8>
    3bd0:	92 30       	cpi	r25, 0x02	; 2
    3bd2:	49 f4       	brne	.+18     	; 0x3be6 <__mulsf3+0x72>
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd8:	8a 89       	ldd	r24, Y+18	; 0x12
    3bda:	98 13       	cpse	r25, r24
    3bdc:	21 e0       	ldi	r18, 0x01	; 1
    3bde:	2a 87       	std	Y+10, r18	; 0x0a
    3be0:	ce 01       	movw	r24, r28
    3be2:	09 96       	adiw	r24, 0x09	; 9
    3be4:	bb c0       	rjmp	.+374    	; 0x3d5c <__mulsf3+0x1e8>
    3be6:	82 30       	cpi	r24, 0x02	; 2
    3be8:	49 f4       	brne	.+18     	; 0x3bfc <__mulsf3+0x88>
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bee:	8a 89       	ldd	r24, Y+18	; 0x12
    3bf0:	98 13       	cpse	r25, r24
    3bf2:	21 e0       	ldi	r18, 0x01	; 1
    3bf4:	2a 8b       	std	Y+18, r18	; 0x12
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	41 96       	adiw	r24, 0x11	; 17
    3bfa:	b0 c0       	rjmp	.+352    	; 0x3d5c <__mulsf3+0x1e8>
    3bfc:	2d 84       	ldd	r2, Y+13	; 0x0d
    3bfe:	3e 84       	ldd	r3, Y+14	; 0x0e
    3c00:	4f 84       	ldd	r4, Y+15	; 0x0f
    3c02:	58 88       	ldd	r5, Y+16	; 0x10
    3c04:	6d 88       	ldd	r6, Y+21	; 0x15
    3c06:	7e 88       	ldd	r7, Y+22	; 0x16
    3c08:	8f 88       	ldd	r8, Y+23	; 0x17
    3c0a:	98 8c       	ldd	r9, Y+24	; 0x18
    3c0c:	ee 24       	eor	r14, r14
    3c0e:	ff 24       	eor	r15, r15
    3c10:	87 01       	movw	r16, r14
    3c12:	aa 24       	eor	r10, r10
    3c14:	bb 24       	eor	r11, r11
    3c16:	65 01       	movw	r12, r10
    3c18:	40 e0       	ldi	r20, 0x00	; 0
    3c1a:	50 e0       	ldi	r21, 0x00	; 0
    3c1c:	60 e0       	ldi	r22, 0x00	; 0
    3c1e:	70 e0       	ldi	r23, 0x00	; 0
    3c20:	e0 e0       	ldi	r30, 0x00	; 0
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	c1 01       	movw	r24, r2
    3c26:	81 70       	andi	r24, 0x01	; 1
    3c28:	90 70       	andi	r25, 0x00	; 0
    3c2a:	89 2b       	or	r24, r25
    3c2c:	e9 f0       	breq	.+58     	; 0x3c68 <__mulsf3+0xf4>
    3c2e:	e6 0c       	add	r14, r6
    3c30:	f7 1c       	adc	r15, r7
    3c32:	08 1d       	adc	r16, r8
    3c34:	19 1d       	adc	r17, r9
    3c36:	9a 01       	movw	r18, r20
    3c38:	ab 01       	movw	r20, r22
    3c3a:	2a 0d       	add	r18, r10
    3c3c:	3b 1d       	adc	r19, r11
    3c3e:	4c 1d       	adc	r20, r12
    3c40:	5d 1d       	adc	r21, r13
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	a0 e0       	ldi	r26, 0x00	; 0
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	e6 14       	cp	r14, r6
    3c4c:	f7 04       	cpc	r15, r7
    3c4e:	08 05       	cpc	r16, r8
    3c50:	19 05       	cpc	r17, r9
    3c52:	20 f4       	brcc	.+8      	; 0x3c5c <__mulsf3+0xe8>
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	a0 e0       	ldi	r26, 0x00	; 0
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	ba 01       	movw	r22, r20
    3c5e:	a9 01       	movw	r20, r18
    3c60:	48 0f       	add	r20, r24
    3c62:	59 1f       	adc	r21, r25
    3c64:	6a 1f       	adc	r22, r26
    3c66:	7b 1f       	adc	r23, r27
    3c68:	aa 0c       	add	r10, r10
    3c6a:	bb 1c       	adc	r11, r11
    3c6c:	cc 1c       	adc	r12, r12
    3c6e:	dd 1c       	adc	r13, r13
    3c70:	97 fe       	sbrs	r9, 7
    3c72:	08 c0       	rjmp	.+16     	; 0x3c84 <__mulsf3+0x110>
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	a0 e0       	ldi	r26, 0x00	; 0
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	a8 2a       	or	r10, r24
    3c7e:	b9 2a       	or	r11, r25
    3c80:	ca 2a       	or	r12, r26
    3c82:	db 2a       	or	r13, r27
    3c84:	31 96       	adiw	r30, 0x01	; 1
    3c86:	e0 32       	cpi	r30, 0x20	; 32
    3c88:	f1 05       	cpc	r31, r1
    3c8a:	49 f0       	breq	.+18     	; 0x3c9e <__mulsf3+0x12a>
    3c8c:	66 0c       	add	r6, r6
    3c8e:	77 1c       	adc	r7, r7
    3c90:	88 1c       	adc	r8, r8
    3c92:	99 1c       	adc	r9, r9
    3c94:	56 94       	lsr	r5
    3c96:	47 94       	ror	r4
    3c98:	37 94       	ror	r3
    3c9a:	27 94       	ror	r2
    3c9c:	c3 cf       	rjmp	.-122    	; 0x3c24 <__mulsf3+0xb0>
    3c9e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ca0:	ea 89       	ldd	r30, Y+18	; 0x12
    3ca2:	2b 89       	ldd	r18, Y+19	; 0x13
    3ca4:	3c 89       	ldd	r19, Y+20	; 0x14
    3ca6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ca8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3caa:	28 0f       	add	r18, r24
    3cac:	39 1f       	adc	r19, r25
    3cae:	2e 5f       	subi	r18, 0xFE	; 254
    3cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb2:	17 c0       	rjmp	.+46     	; 0x3ce2 <__mulsf3+0x16e>
    3cb4:	ca 01       	movw	r24, r20
    3cb6:	81 70       	andi	r24, 0x01	; 1
    3cb8:	90 70       	andi	r25, 0x00	; 0
    3cba:	89 2b       	or	r24, r25
    3cbc:	61 f0       	breq	.+24     	; 0x3cd6 <__mulsf3+0x162>
    3cbe:	16 95       	lsr	r17
    3cc0:	07 95       	ror	r16
    3cc2:	f7 94       	ror	r15
    3cc4:	e7 94       	ror	r14
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	a0 e0       	ldi	r26, 0x00	; 0
    3ccc:	b0 e8       	ldi	r27, 0x80	; 128
    3cce:	e8 2a       	or	r14, r24
    3cd0:	f9 2a       	or	r15, r25
    3cd2:	0a 2b       	or	r16, r26
    3cd4:	1b 2b       	or	r17, r27
    3cd6:	76 95       	lsr	r23
    3cd8:	67 95       	ror	r22
    3cda:	57 95       	ror	r21
    3cdc:	47 95       	ror	r20
    3cde:	2f 5f       	subi	r18, 0xFF	; 255
    3ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce2:	77 fd       	sbrc	r23, 7
    3ce4:	e7 cf       	rjmp	.-50     	; 0x3cb4 <__mulsf3+0x140>
    3ce6:	0c c0       	rjmp	.+24     	; 0x3d00 <__mulsf3+0x18c>
    3ce8:	44 0f       	add	r20, r20
    3cea:	55 1f       	adc	r21, r21
    3cec:	66 1f       	adc	r22, r22
    3cee:	77 1f       	adc	r23, r23
    3cf0:	17 fd       	sbrc	r17, 7
    3cf2:	41 60       	ori	r20, 0x01	; 1
    3cf4:	ee 0c       	add	r14, r14
    3cf6:	ff 1c       	adc	r15, r15
    3cf8:	00 1f       	adc	r16, r16
    3cfa:	11 1f       	adc	r17, r17
    3cfc:	21 50       	subi	r18, 0x01	; 1
    3cfe:	30 40       	sbci	r19, 0x00	; 0
    3d00:	40 30       	cpi	r20, 0x00	; 0
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	59 07       	cpc	r21, r25
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	69 07       	cpc	r22, r25
    3d0a:	90 e4       	ldi	r25, 0x40	; 64
    3d0c:	79 07       	cpc	r23, r25
    3d0e:	60 f3       	brcs	.-40     	; 0x3ce8 <__mulsf3+0x174>
    3d10:	2b 8f       	std	Y+27, r18	; 0x1b
    3d12:	3c 8f       	std	Y+28, r19	; 0x1c
    3d14:	db 01       	movw	r26, r22
    3d16:	ca 01       	movw	r24, r20
    3d18:	8f 77       	andi	r24, 0x7F	; 127
    3d1a:	90 70       	andi	r25, 0x00	; 0
    3d1c:	a0 70       	andi	r26, 0x00	; 0
    3d1e:	b0 70       	andi	r27, 0x00	; 0
    3d20:	80 34       	cpi	r24, 0x40	; 64
    3d22:	91 05       	cpc	r25, r1
    3d24:	a1 05       	cpc	r26, r1
    3d26:	b1 05       	cpc	r27, r1
    3d28:	61 f4       	brne	.+24     	; 0x3d42 <__mulsf3+0x1ce>
    3d2a:	47 fd       	sbrc	r20, 7
    3d2c:	0a c0       	rjmp	.+20     	; 0x3d42 <__mulsf3+0x1ce>
    3d2e:	e1 14       	cp	r14, r1
    3d30:	f1 04       	cpc	r15, r1
    3d32:	01 05       	cpc	r16, r1
    3d34:	11 05       	cpc	r17, r1
    3d36:	29 f0       	breq	.+10     	; 0x3d42 <__mulsf3+0x1ce>
    3d38:	40 5c       	subi	r20, 0xC0	; 192
    3d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d3c:	6f 4f       	sbci	r22, 0xFF	; 255
    3d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d40:	40 78       	andi	r20, 0x80	; 128
    3d42:	1a 8e       	std	Y+26, r1	; 0x1a
    3d44:	fe 17       	cp	r31, r30
    3d46:	11 f0       	breq	.+4      	; 0x3d4c <__mulsf3+0x1d8>
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	8a 8f       	std	Y+26, r24	; 0x1a
    3d4c:	4d 8f       	std	Y+29, r20	; 0x1d
    3d4e:	5e 8f       	std	Y+30, r21	; 0x1e
    3d50:	6f 8f       	std	Y+31, r22	; 0x1f
    3d52:	78 a3       	std	Y+32, r23	; 0x20
    3d54:	83 e0       	ldi	r24, 0x03	; 3
    3d56:	89 8f       	std	Y+25, r24	; 0x19
    3d58:	ce 01       	movw	r24, r28
    3d5a:	49 96       	adiw	r24, 0x19	; 25
    3d5c:	0e 94 45 20 	call	0x408a	; 0x408a <__pack_f>
    3d60:	a0 96       	adiw	r28, 0x20	; 32
    3d62:	e2 e1       	ldi	r30, 0x12	; 18
    3d64:	0c 94 24 22 	jmp	0x4448	; 0x4448 <__epilogue_restores__>

00003d68 <__gtsf2>:
    3d68:	a8 e1       	ldi	r26, 0x18	; 24
    3d6a:	b0 e0       	ldi	r27, 0x00	; 0
    3d6c:	ea eb       	ldi	r30, 0xBA	; 186
    3d6e:	fe e1       	ldi	r31, 0x1E	; 30
    3d70:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__prologue_saves__+0x18>
    3d74:	69 83       	std	Y+1, r22	; 0x01
    3d76:	7a 83       	std	Y+2, r23	; 0x02
    3d78:	8b 83       	std	Y+3, r24	; 0x03
    3d7a:	9c 83       	std	Y+4, r25	; 0x04
    3d7c:	2d 83       	std	Y+5, r18	; 0x05
    3d7e:	3e 83       	std	Y+6, r19	; 0x06
    3d80:	4f 83       	std	Y+7, r20	; 0x07
    3d82:	58 87       	std	Y+8, r21	; 0x08
    3d84:	89 e0       	ldi	r24, 0x09	; 9
    3d86:	e8 2e       	mov	r14, r24
    3d88:	f1 2c       	mov	r15, r1
    3d8a:	ec 0e       	add	r14, r28
    3d8c:	fd 1e       	adc	r15, r29
    3d8e:	ce 01       	movw	r24, r28
    3d90:	01 96       	adiw	r24, 0x01	; 1
    3d92:	b7 01       	movw	r22, r14
    3d94:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3d98:	8e 01       	movw	r16, r28
    3d9a:	0f 5e       	subi	r16, 0xEF	; 239
    3d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9e:	ce 01       	movw	r24, r28
    3da0:	05 96       	adiw	r24, 0x05	; 5
    3da2:	b8 01       	movw	r22, r16
    3da4:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3da8:	89 85       	ldd	r24, Y+9	; 0x09
    3daa:	82 30       	cpi	r24, 0x02	; 2
    3dac:	40 f0       	brcs	.+16     	; 0x3dbe <__gtsf2+0x56>
    3dae:	89 89       	ldd	r24, Y+17	; 0x11
    3db0:	82 30       	cpi	r24, 0x02	; 2
    3db2:	28 f0       	brcs	.+10     	; 0x3dbe <__gtsf2+0x56>
    3db4:	c7 01       	movw	r24, r14
    3db6:	b8 01       	movw	r22, r16
    3db8:	0e 94 92 21 	call	0x4324	; 0x4324 <__fpcmp_parts_f>
    3dbc:	01 c0       	rjmp	.+2      	; 0x3dc0 <__gtsf2+0x58>
    3dbe:	8f ef       	ldi	r24, 0xFF	; 255
    3dc0:	68 96       	adiw	r28, 0x18	; 24
    3dc2:	e6 e0       	ldi	r30, 0x06	; 6
    3dc4:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__epilogue_restores__+0x18>

00003dc8 <__gesf2>:
    3dc8:	a8 e1       	ldi	r26, 0x18	; 24
    3dca:	b0 e0       	ldi	r27, 0x00	; 0
    3dcc:	ea ee       	ldi	r30, 0xEA	; 234
    3dce:	fe e1       	ldi	r31, 0x1E	; 30
    3dd0:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__prologue_saves__+0x18>
    3dd4:	69 83       	std	Y+1, r22	; 0x01
    3dd6:	7a 83       	std	Y+2, r23	; 0x02
    3dd8:	8b 83       	std	Y+3, r24	; 0x03
    3dda:	9c 83       	std	Y+4, r25	; 0x04
    3ddc:	2d 83       	std	Y+5, r18	; 0x05
    3dde:	3e 83       	std	Y+6, r19	; 0x06
    3de0:	4f 83       	std	Y+7, r20	; 0x07
    3de2:	58 87       	std	Y+8, r21	; 0x08
    3de4:	89 e0       	ldi	r24, 0x09	; 9
    3de6:	e8 2e       	mov	r14, r24
    3de8:	f1 2c       	mov	r15, r1
    3dea:	ec 0e       	add	r14, r28
    3dec:	fd 1e       	adc	r15, r29
    3dee:	ce 01       	movw	r24, r28
    3df0:	01 96       	adiw	r24, 0x01	; 1
    3df2:	b7 01       	movw	r22, r14
    3df4:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3df8:	8e 01       	movw	r16, r28
    3dfa:	0f 5e       	subi	r16, 0xEF	; 239
    3dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfe:	ce 01       	movw	r24, r28
    3e00:	05 96       	adiw	r24, 0x05	; 5
    3e02:	b8 01       	movw	r22, r16
    3e04:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3e08:	89 85       	ldd	r24, Y+9	; 0x09
    3e0a:	82 30       	cpi	r24, 0x02	; 2
    3e0c:	40 f0       	brcs	.+16     	; 0x3e1e <__gesf2+0x56>
    3e0e:	89 89       	ldd	r24, Y+17	; 0x11
    3e10:	82 30       	cpi	r24, 0x02	; 2
    3e12:	28 f0       	brcs	.+10     	; 0x3e1e <__gesf2+0x56>
    3e14:	c7 01       	movw	r24, r14
    3e16:	b8 01       	movw	r22, r16
    3e18:	0e 94 92 21 	call	0x4324	; 0x4324 <__fpcmp_parts_f>
    3e1c:	01 c0       	rjmp	.+2      	; 0x3e20 <__gesf2+0x58>
    3e1e:	8f ef       	ldi	r24, 0xFF	; 255
    3e20:	68 96       	adiw	r28, 0x18	; 24
    3e22:	e6 e0       	ldi	r30, 0x06	; 6
    3e24:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__epilogue_restores__+0x18>

00003e28 <__ltsf2>:
    3e28:	a8 e1       	ldi	r26, 0x18	; 24
    3e2a:	b0 e0       	ldi	r27, 0x00	; 0
    3e2c:	ea e1       	ldi	r30, 0x1A	; 26
    3e2e:	ff e1       	ldi	r31, 0x1F	; 31
    3e30:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__prologue_saves__+0x18>
    3e34:	69 83       	std	Y+1, r22	; 0x01
    3e36:	7a 83       	std	Y+2, r23	; 0x02
    3e38:	8b 83       	std	Y+3, r24	; 0x03
    3e3a:	9c 83       	std	Y+4, r25	; 0x04
    3e3c:	2d 83       	std	Y+5, r18	; 0x05
    3e3e:	3e 83       	std	Y+6, r19	; 0x06
    3e40:	4f 83       	std	Y+7, r20	; 0x07
    3e42:	58 87       	std	Y+8, r21	; 0x08
    3e44:	89 e0       	ldi	r24, 0x09	; 9
    3e46:	e8 2e       	mov	r14, r24
    3e48:	f1 2c       	mov	r15, r1
    3e4a:	ec 0e       	add	r14, r28
    3e4c:	fd 1e       	adc	r15, r29
    3e4e:	ce 01       	movw	r24, r28
    3e50:	01 96       	adiw	r24, 0x01	; 1
    3e52:	b7 01       	movw	r22, r14
    3e54:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3e58:	8e 01       	movw	r16, r28
    3e5a:	0f 5e       	subi	r16, 0xEF	; 239
    3e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5e:	ce 01       	movw	r24, r28
    3e60:	05 96       	adiw	r24, 0x05	; 5
    3e62:	b8 01       	movw	r22, r16
    3e64:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3e68:	89 85       	ldd	r24, Y+9	; 0x09
    3e6a:	82 30       	cpi	r24, 0x02	; 2
    3e6c:	40 f0       	brcs	.+16     	; 0x3e7e <__ltsf2+0x56>
    3e6e:	89 89       	ldd	r24, Y+17	; 0x11
    3e70:	82 30       	cpi	r24, 0x02	; 2
    3e72:	28 f0       	brcs	.+10     	; 0x3e7e <__ltsf2+0x56>
    3e74:	c7 01       	movw	r24, r14
    3e76:	b8 01       	movw	r22, r16
    3e78:	0e 94 92 21 	call	0x4324	; 0x4324 <__fpcmp_parts_f>
    3e7c:	01 c0       	rjmp	.+2      	; 0x3e80 <__ltsf2+0x58>
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	68 96       	adiw	r28, 0x18	; 24
    3e82:	e6 e0       	ldi	r30, 0x06	; 6
    3e84:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__epilogue_restores__+0x18>

00003e88 <__floatsisf>:
    3e88:	a8 e0       	ldi	r26, 0x08	; 8
    3e8a:	b0 e0       	ldi	r27, 0x00	; 0
    3e8c:	ea e4       	ldi	r30, 0x4A	; 74
    3e8e:	ff e1       	ldi	r31, 0x1F	; 31
    3e90:	0c 94 11 22 	jmp	0x4422	; 0x4422 <__prologue_saves__+0x12>
    3e94:	9b 01       	movw	r18, r22
    3e96:	ac 01       	movw	r20, r24
    3e98:	83 e0       	ldi	r24, 0x03	; 3
    3e9a:	89 83       	std	Y+1, r24	; 0x01
    3e9c:	da 01       	movw	r26, r20
    3e9e:	c9 01       	movw	r24, r18
    3ea0:	88 27       	eor	r24, r24
    3ea2:	b7 fd       	sbrc	r27, 7
    3ea4:	83 95       	inc	r24
    3ea6:	99 27       	eor	r25, r25
    3ea8:	aa 27       	eor	r26, r26
    3eaa:	bb 27       	eor	r27, r27
    3eac:	b8 2e       	mov	r11, r24
    3eae:	21 15       	cp	r18, r1
    3eb0:	31 05       	cpc	r19, r1
    3eb2:	41 05       	cpc	r20, r1
    3eb4:	51 05       	cpc	r21, r1
    3eb6:	19 f4       	brne	.+6      	; 0x3ebe <__floatsisf+0x36>
    3eb8:	82 e0       	ldi	r24, 0x02	; 2
    3eba:	89 83       	std	Y+1, r24	; 0x01
    3ebc:	3a c0       	rjmp	.+116    	; 0x3f32 <__floatsisf+0xaa>
    3ebe:	88 23       	and	r24, r24
    3ec0:	a9 f0       	breq	.+42     	; 0x3eec <__floatsisf+0x64>
    3ec2:	20 30       	cpi	r18, 0x00	; 0
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	38 07       	cpc	r19, r24
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	48 07       	cpc	r20, r24
    3ecc:	80 e8       	ldi	r24, 0x80	; 128
    3ece:	58 07       	cpc	r21, r24
    3ed0:	29 f4       	brne	.+10     	; 0x3edc <__floatsisf+0x54>
    3ed2:	60 e0       	ldi	r22, 0x00	; 0
    3ed4:	70 e0       	ldi	r23, 0x00	; 0
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	9f ec       	ldi	r25, 0xCF	; 207
    3eda:	30 c0       	rjmp	.+96     	; 0x3f3c <__floatsisf+0xb4>
    3edc:	ee 24       	eor	r14, r14
    3ede:	ff 24       	eor	r15, r15
    3ee0:	87 01       	movw	r16, r14
    3ee2:	e2 1a       	sub	r14, r18
    3ee4:	f3 0a       	sbc	r15, r19
    3ee6:	04 0b       	sbc	r16, r20
    3ee8:	15 0b       	sbc	r17, r21
    3eea:	02 c0       	rjmp	.+4      	; 0x3ef0 <__floatsisf+0x68>
    3eec:	79 01       	movw	r14, r18
    3eee:	8a 01       	movw	r16, r20
    3ef0:	8e e1       	ldi	r24, 0x1E	; 30
    3ef2:	c8 2e       	mov	r12, r24
    3ef4:	d1 2c       	mov	r13, r1
    3ef6:	dc 82       	std	Y+4, r13	; 0x04
    3ef8:	cb 82       	std	Y+3, r12	; 0x03
    3efa:	ed 82       	std	Y+5, r14	; 0x05
    3efc:	fe 82       	std	Y+6, r15	; 0x06
    3efe:	0f 83       	std	Y+7, r16	; 0x07
    3f00:	18 87       	std	Y+8, r17	; 0x08
    3f02:	c8 01       	movw	r24, r16
    3f04:	b7 01       	movw	r22, r14
    3f06:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__clzsi2>
    3f0a:	01 97       	sbiw	r24, 0x01	; 1
    3f0c:	18 16       	cp	r1, r24
    3f0e:	19 06       	cpc	r1, r25
    3f10:	84 f4       	brge	.+32     	; 0x3f32 <__floatsisf+0xaa>
    3f12:	08 2e       	mov	r0, r24
    3f14:	04 c0       	rjmp	.+8      	; 0x3f1e <__floatsisf+0x96>
    3f16:	ee 0c       	add	r14, r14
    3f18:	ff 1c       	adc	r15, r15
    3f1a:	00 1f       	adc	r16, r16
    3f1c:	11 1f       	adc	r17, r17
    3f1e:	0a 94       	dec	r0
    3f20:	d2 f7       	brpl	.-12     	; 0x3f16 <__floatsisf+0x8e>
    3f22:	ed 82       	std	Y+5, r14	; 0x05
    3f24:	fe 82       	std	Y+6, r15	; 0x06
    3f26:	0f 83       	std	Y+7, r16	; 0x07
    3f28:	18 87       	std	Y+8, r17	; 0x08
    3f2a:	c8 1a       	sub	r12, r24
    3f2c:	d9 0a       	sbc	r13, r25
    3f2e:	dc 82       	std	Y+4, r13	; 0x04
    3f30:	cb 82       	std	Y+3, r12	; 0x03
    3f32:	ba 82       	std	Y+2, r11	; 0x02
    3f34:	ce 01       	movw	r24, r28
    3f36:	01 96       	adiw	r24, 0x01	; 1
    3f38:	0e 94 45 20 	call	0x408a	; 0x408a <__pack_f>
    3f3c:	28 96       	adiw	r28, 0x08	; 8
    3f3e:	e9 e0       	ldi	r30, 0x09	; 9
    3f40:	0c 94 2d 22 	jmp	0x445a	; 0x445a <__epilogue_restores__+0x12>

00003f44 <__fixsfsi>:
    3f44:	ac e0       	ldi	r26, 0x0C	; 12
    3f46:	b0 e0       	ldi	r27, 0x00	; 0
    3f48:	e8 ea       	ldi	r30, 0xA8	; 168
    3f4a:	ff e1       	ldi	r31, 0x1F	; 31
    3f4c:	0c 94 18 22 	jmp	0x4430	; 0x4430 <__prologue_saves__+0x20>
    3f50:	69 83       	std	Y+1, r22	; 0x01
    3f52:	7a 83       	std	Y+2, r23	; 0x02
    3f54:	8b 83       	std	Y+3, r24	; 0x03
    3f56:	9c 83       	std	Y+4, r25	; 0x04
    3f58:	ce 01       	movw	r24, r28
    3f5a:	01 96       	adiw	r24, 0x01	; 1
    3f5c:	be 01       	movw	r22, r28
    3f5e:	6b 5f       	subi	r22, 0xFB	; 251
    3f60:	7f 4f       	sbci	r23, 0xFF	; 255
    3f62:	0e 94 1a 21 	call	0x4234	; 0x4234 <__unpack_f>
    3f66:	8d 81       	ldd	r24, Y+5	; 0x05
    3f68:	82 30       	cpi	r24, 0x02	; 2
    3f6a:	61 f1       	breq	.+88     	; 0x3fc4 <__fixsfsi+0x80>
    3f6c:	82 30       	cpi	r24, 0x02	; 2
    3f6e:	50 f1       	brcs	.+84     	; 0x3fc4 <__fixsfsi+0x80>
    3f70:	84 30       	cpi	r24, 0x04	; 4
    3f72:	21 f4       	brne	.+8      	; 0x3f7c <__fixsfsi+0x38>
    3f74:	8e 81       	ldd	r24, Y+6	; 0x06
    3f76:	88 23       	and	r24, r24
    3f78:	51 f1       	breq	.+84     	; 0x3fce <__fixsfsi+0x8a>
    3f7a:	2e c0       	rjmp	.+92     	; 0x3fd8 <__fixsfsi+0x94>
    3f7c:	2f 81       	ldd	r18, Y+7	; 0x07
    3f7e:	38 85       	ldd	r19, Y+8	; 0x08
    3f80:	37 fd       	sbrc	r19, 7
    3f82:	20 c0       	rjmp	.+64     	; 0x3fc4 <__fixsfsi+0x80>
    3f84:	6e 81       	ldd	r22, Y+6	; 0x06
    3f86:	2f 31       	cpi	r18, 0x1F	; 31
    3f88:	31 05       	cpc	r19, r1
    3f8a:	1c f0       	brlt	.+6      	; 0x3f92 <__fixsfsi+0x4e>
    3f8c:	66 23       	and	r22, r22
    3f8e:	f9 f0       	breq	.+62     	; 0x3fce <__fixsfsi+0x8a>
    3f90:	23 c0       	rjmp	.+70     	; 0x3fd8 <__fixsfsi+0x94>
    3f92:	8e e1       	ldi	r24, 0x1E	; 30
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	82 1b       	sub	r24, r18
    3f98:	93 0b       	sbc	r25, r19
    3f9a:	29 85       	ldd	r18, Y+9	; 0x09
    3f9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f9e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3fa0:	5c 85       	ldd	r21, Y+12	; 0x0c
    3fa2:	04 c0       	rjmp	.+8      	; 0x3fac <__fixsfsi+0x68>
    3fa4:	56 95       	lsr	r21
    3fa6:	47 95       	ror	r20
    3fa8:	37 95       	ror	r19
    3faa:	27 95       	ror	r18
    3fac:	8a 95       	dec	r24
    3fae:	d2 f7       	brpl	.-12     	; 0x3fa4 <__fixsfsi+0x60>
    3fb0:	66 23       	and	r22, r22
    3fb2:	b1 f0       	breq	.+44     	; 0x3fe0 <__fixsfsi+0x9c>
    3fb4:	50 95       	com	r21
    3fb6:	40 95       	com	r20
    3fb8:	30 95       	com	r19
    3fba:	21 95       	neg	r18
    3fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3fbe:	4f 4f       	sbci	r20, 0xFF	; 255
    3fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc2:	0e c0       	rjmp	.+28     	; 0x3fe0 <__fixsfsi+0x9c>
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	40 e0       	ldi	r20, 0x00	; 0
    3fca:	50 e0       	ldi	r21, 0x00	; 0
    3fcc:	09 c0       	rjmp	.+18     	; 0x3fe0 <__fixsfsi+0x9c>
    3fce:	2f ef       	ldi	r18, 0xFF	; 255
    3fd0:	3f ef       	ldi	r19, 0xFF	; 255
    3fd2:	4f ef       	ldi	r20, 0xFF	; 255
    3fd4:	5f e7       	ldi	r21, 0x7F	; 127
    3fd6:	04 c0       	rjmp	.+8      	; 0x3fe0 <__fixsfsi+0x9c>
    3fd8:	20 e0       	ldi	r18, 0x00	; 0
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	40 e0       	ldi	r20, 0x00	; 0
    3fde:	50 e8       	ldi	r21, 0x80	; 128
    3fe0:	b9 01       	movw	r22, r18
    3fe2:	ca 01       	movw	r24, r20
    3fe4:	2c 96       	adiw	r28, 0x0c	; 12
    3fe6:	e2 e0       	ldi	r30, 0x02	; 2
    3fe8:	0c 94 34 22 	jmp	0x4468	; 0x4468 <__epilogue_restores__+0x20>

00003fec <__clzsi2>:
    3fec:	ef 92       	push	r14
    3fee:	ff 92       	push	r15
    3ff0:	0f 93       	push	r16
    3ff2:	1f 93       	push	r17
    3ff4:	7b 01       	movw	r14, r22
    3ff6:	8c 01       	movw	r16, r24
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	e8 16       	cp	r14, r24
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	f8 06       	cpc	r15, r24
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	08 07       	cpc	r16, r24
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	18 07       	cpc	r17, r24
    4008:	88 f4       	brcc	.+34     	; 0x402c <__clzsi2+0x40>
    400a:	8f ef       	ldi	r24, 0xFF	; 255
    400c:	e8 16       	cp	r14, r24
    400e:	f1 04       	cpc	r15, r1
    4010:	01 05       	cpc	r16, r1
    4012:	11 05       	cpc	r17, r1
    4014:	31 f0       	breq	.+12     	; 0x4022 <__clzsi2+0x36>
    4016:	28 f0       	brcs	.+10     	; 0x4022 <__clzsi2+0x36>
    4018:	88 e0       	ldi	r24, 0x08	; 8
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	a0 e0       	ldi	r26, 0x00	; 0
    401e:	b0 e0       	ldi	r27, 0x00	; 0
    4020:	17 c0       	rjmp	.+46     	; 0x4050 <__clzsi2+0x64>
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	a0 e0       	ldi	r26, 0x00	; 0
    4028:	b0 e0       	ldi	r27, 0x00	; 0
    402a:	12 c0       	rjmp	.+36     	; 0x4050 <__clzsi2+0x64>
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	e8 16       	cp	r14, r24
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	f8 06       	cpc	r15, r24
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	08 07       	cpc	r16, r24
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	18 07       	cpc	r17, r24
    403c:	28 f0       	brcs	.+10     	; 0x4048 <__clzsi2+0x5c>
    403e:	88 e1       	ldi	r24, 0x18	; 24
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	a0 e0       	ldi	r26, 0x00	; 0
    4044:	b0 e0       	ldi	r27, 0x00	; 0
    4046:	04 c0       	rjmp	.+8      	; 0x4050 <__clzsi2+0x64>
    4048:	80 e1       	ldi	r24, 0x10	; 16
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	a0 e0       	ldi	r26, 0x00	; 0
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	20 e2       	ldi	r18, 0x20	; 32
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	40 e0       	ldi	r20, 0x00	; 0
    4056:	50 e0       	ldi	r21, 0x00	; 0
    4058:	28 1b       	sub	r18, r24
    405a:	39 0b       	sbc	r19, r25
    405c:	4a 0b       	sbc	r20, r26
    405e:	5b 0b       	sbc	r21, r27
    4060:	04 c0       	rjmp	.+8      	; 0x406a <__clzsi2+0x7e>
    4062:	16 95       	lsr	r17
    4064:	07 95       	ror	r16
    4066:	f7 94       	ror	r15
    4068:	e7 94       	ror	r14
    406a:	8a 95       	dec	r24
    406c:	d2 f7       	brpl	.-12     	; 0x4062 <__clzsi2+0x76>
    406e:	f7 01       	movw	r30, r14
    4070:	ea 5a       	subi	r30, 0xAA	; 170
    4072:	fd 4f       	sbci	r31, 0xFD	; 253
    4074:	80 81       	ld	r24, Z
    4076:	28 1b       	sub	r18, r24
    4078:	31 09       	sbc	r19, r1
    407a:	41 09       	sbc	r20, r1
    407c:	51 09       	sbc	r21, r1
    407e:	c9 01       	movw	r24, r18
    4080:	1f 91       	pop	r17
    4082:	0f 91       	pop	r16
    4084:	ff 90       	pop	r15
    4086:	ef 90       	pop	r14
    4088:	08 95       	ret

0000408a <__pack_f>:
    408a:	df 92       	push	r13
    408c:	ef 92       	push	r14
    408e:	ff 92       	push	r15
    4090:	0f 93       	push	r16
    4092:	1f 93       	push	r17
    4094:	fc 01       	movw	r30, r24
    4096:	e4 80       	ldd	r14, Z+4	; 0x04
    4098:	f5 80       	ldd	r15, Z+5	; 0x05
    409a:	06 81       	ldd	r16, Z+6	; 0x06
    409c:	17 81       	ldd	r17, Z+7	; 0x07
    409e:	d1 80       	ldd	r13, Z+1	; 0x01
    40a0:	80 81       	ld	r24, Z
    40a2:	82 30       	cpi	r24, 0x02	; 2
    40a4:	48 f4       	brcc	.+18     	; 0x40b8 <__pack_f+0x2e>
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	a0 e1       	ldi	r26, 0x10	; 16
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	e8 2a       	or	r14, r24
    40b0:	f9 2a       	or	r15, r25
    40b2:	0a 2b       	or	r16, r26
    40b4:	1b 2b       	or	r17, r27
    40b6:	a5 c0       	rjmp	.+330    	; 0x4202 <__pack_f+0x178>
    40b8:	84 30       	cpi	r24, 0x04	; 4
    40ba:	09 f4       	brne	.+2      	; 0x40be <__pack_f+0x34>
    40bc:	9f c0       	rjmp	.+318    	; 0x41fc <__pack_f+0x172>
    40be:	82 30       	cpi	r24, 0x02	; 2
    40c0:	21 f4       	brne	.+8      	; 0x40ca <__pack_f+0x40>
    40c2:	ee 24       	eor	r14, r14
    40c4:	ff 24       	eor	r15, r15
    40c6:	87 01       	movw	r16, r14
    40c8:	05 c0       	rjmp	.+10     	; 0x40d4 <__pack_f+0x4a>
    40ca:	e1 14       	cp	r14, r1
    40cc:	f1 04       	cpc	r15, r1
    40ce:	01 05       	cpc	r16, r1
    40d0:	11 05       	cpc	r17, r1
    40d2:	19 f4       	brne	.+6      	; 0x40da <__pack_f+0x50>
    40d4:	e0 e0       	ldi	r30, 0x00	; 0
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	96 c0       	rjmp	.+300    	; 0x4206 <__pack_f+0x17c>
    40da:	62 81       	ldd	r22, Z+2	; 0x02
    40dc:	73 81       	ldd	r23, Z+3	; 0x03
    40de:	9f ef       	ldi	r25, 0xFF	; 255
    40e0:	62 38       	cpi	r22, 0x82	; 130
    40e2:	79 07       	cpc	r23, r25
    40e4:	0c f0       	brlt	.+2      	; 0x40e8 <__pack_f+0x5e>
    40e6:	5b c0       	rjmp	.+182    	; 0x419e <__pack_f+0x114>
    40e8:	22 e8       	ldi	r18, 0x82	; 130
    40ea:	3f ef       	ldi	r19, 0xFF	; 255
    40ec:	26 1b       	sub	r18, r22
    40ee:	37 0b       	sbc	r19, r23
    40f0:	2a 31       	cpi	r18, 0x1A	; 26
    40f2:	31 05       	cpc	r19, r1
    40f4:	2c f0       	brlt	.+10     	; 0x4100 <__pack_f+0x76>
    40f6:	20 e0       	ldi	r18, 0x00	; 0
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	40 e0       	ldi	r20, 0x00	; 0
    40fc:	50 e0       	ldi	r21, 0x00	; 0
    40fe:	2a c0       	rjmp	.+84     	; 0x4154 <__pack_f+0xca>
    4100:	b8 01       	movw	r22, r16
    4102:	a7 01       	movw	r20, r14
    4104:	02 2e       	mov	r0, r18
    4106:	04 c0       	rjmp	.+8      	; 0x4110 <__pack_f+0x86>
    4108:	76 95       	lsr	r23
    410a:	67 95       	ror	r22
    410c:	57 95       	ror	r21
    410e:	47 95       	ror	r20
    4110:	0a 94       	dec	r0
    4112:	d2 f7       	brpl	.-12     	; 0x4108 <__pack_f+0x7e>
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	a0 e0       	ldi	r26, 0x00	; 0
    411a:	b0 e0       	ldi	r27, 0x00	; 0
    411c:	04 c0       	rjmp	.+8      	; 0x4126 <__pack_f+0x9c>
    411e:	88 0f       	add	r24, r24
    4120:	99 1f       	adc	r25, r25
    4122:	aa 1f       	adc	r26, r26
    4124:	bb 1f       	adc	r27, r27
    4126:	2a 95       	dec	r18
    4128:	d2 f7       	brpl	.-12     	; 0x411e <__pack_f+0x94>
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	a1 09       	sbc	r26, r1
    412e:	b1 09       	sbc	r27, r1
    4130:	8e 21       	and	r24, r14
    4132:	9f 21       	and	r25, r15
    4134:	a0 23       	and	r26, r16
    4136:	b1 23       	and	r27, r17
    4138:	00 97       	sbiw	r24, 0x00	; 0
    413a:	a1 05       	cpc	r26, r1
    413c:	b1 05       	cpc	r27, r1
    413e:	21 f0       	breq	.+8      	; 0x4148 <__pack_f+0xbe>
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	a0 e0       	ldi	r26, 0x00	; 0
    4146:	b0 e0       	ldi	r27, 0x00	; 0
    4148:	9a 01       	movw	r18, r20
    414a:	ab 01       	movw	r20, r22
    414c:	28 2b       	or	r18, r24
    414e:	39 2b       	or	r19, r25
    4150:	4a 2b       	or	r20, r26
    4152:	5b 2b       	or	r21, r27
    4154:	da 01       	movw	r26, r20
    4156:	c9 01       	movw	r24, r18
    4158:	8f 77       	andi	r24, 0x7F	; 127
    415a:	90 70       	andi	r25, 0x00	; 0
    415c:	a0 70       	andi	r26, 0x00	; 0
    415e:	b0 70       	andi	r27, 0x00	; 0
    4160:	80 34       	cpi	r24, 0x40	; 64
    4162:	91 05       	cpc	r25, r1
    4164:	a1 05       	cpc	r26, r1
    4166:	b1 05       	cpc	r27, r1
    4168:	39 f4       	brne	.+14     	; 0x4178 <__pack_f+0xee>
    416a:	27 ff       	sbrs	r18, 7
    416c:	09 c0       	rjmp	.+18     	; 0x4180 <__pack_f+0xf6>
    416e:	20 5c       	subi	r18, 0xC0	; 192
    4170:	3f 4f       	sbci	r19, 0xFF	; 255
    4172:	4f 4f       	sbci	r20, 0xFF	; 255
    4174:	5f 4f       	sbci	r21, 0xFF	; 255
    4176:	04 c0       	rjmp	.+8      	; 0x4180 <__pack_f+0xf6>
    4178:	21 5c       	subi	r18, 0xC1	; 193
    417a:	3f 4f       	sbci	r19, 0xFF	; 255
    417c:	4f 4f       	sbci	r20, 0xFF	; 255
    417e:	5f 4f       	sbci	r21, 0xFF	; 255
    4180:	e0 e0       	ldi	r30, 0x00	; 0
    4182:	f0 e0       	ldi	r31, 0x00	; 0
    4184:	20 30       	cpi	r18, 0x00	; 0
    4186:	a0 e0       	ldi	r26, 0x00	; 0
    4188:	3a 07       	cpc	r19, r26
    418a:	a0 e0       	ldi	r26, 0x00	; 0
    418c:	4a 07       	cpc	r20, r26
    418e:	a0 e4       	ldi	r26, 0x40	; 64
    4190:	5a 07       	cpc	r21, r26
    4192:	10 f0       	brcs	.+4      	; 0x4198 <__pack_f+0x10e>
    4194:	e1 e0       	ldi	r30, 0x01	; 1
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	79 01       	movw	r14, r18
    419a:	8a 01       	movw	r16, r20
    419c:	27 c0       	rjmp	.+78     	; 0x41ec <__pack_f+0x162>
    419e:	60 38       	cpi	r22, 0x80	; 128
    41a0:	71 05       	cpc	r23, r1
    41a2:	64 f5       	brge	.+88     	; 0x41fc <__pack_f+0x172>
    41a4:	fb 01       	movw	r30, r22
    41a6:	e1 58       	subi	r30, 0x81	; 129
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	d8 01       	movw	r26, r16
    41ac:	c7 01       	movw	r24, r14
    41ae:	8f 77       	andi	r24, 0x7F	; 127
    41b0:	90 70       	andi	r25, 0x00	; 0
    41b2:	a0 70       	andi	r26, 0x00	; 0
    41b4:	b0 70       	andi	r27, 0x00	; 0
    41b6:	80 34       	cpi	r24, 0x40	; 64
    41b8:	91 05       	cpc	r25, r1
    41ba:	a1 05       	cpc	r26, r1
    41bc:	b1 05       	cpc	r27, r1
    41be:	39 f4       	brne	.+14     	; 0x41ce <__pack_f+0x144>
    41c0:	e7 fe       	sbrs	r14, 7
    41c2:	0d c0       	rjmp	.+26     	; 0x41de <__pack_f+0x154>
    41c4:	80 e4       	ldi	r24, 0x40	; 64
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	a0 e0       	ldi	r26, 0x00	; 0
    41ca:	b0 e0       	ldi	r27, 0x00	; 0
    41cc:	04 c0       	rjmp	.+8      	; 0x41d6 <__pack_f+0x14c>
    41ce:	8f e3       	ldi	r24, 0x3F	; 63
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	a0 e0       	ldi	r26, 0x00	; 0
    41d4:	b0 e0       	ldi	r27, 0x00	; 0
    41d6:	e8 0e       	add	r14, r24
    41d8:	f9 1e       	adc	r15, r25
    41da:	0a 1f       	adc	r16, r26
    41dc:	1b 1f       	adc	r17, r27
    41de:	17 ff       	sbrs	r17, 7
    41e0:	05 c0       	rjmp	.+10     	; 0x41ec <__pack_f+0x162>
    41e2:	16 95       	lsr	r17
    41e4:	07 95       	ror	r16
    41e6:	f7 94       	ror	r15
    41e8:	e7 94       	ror	r14
    41ea:	31 96       	adiw	r30, 0x01	; 1
    41ec:	87 e0       	ldi	r24, 0x07	; 7
    41ee:	16 95       	lsr	r17
    41f0:	07 95       	ror	r16
    41f2:	f7 94       	ror	r15
    41f4:	e7 94       	ror	r14
    41f6:	8a 95       	dec	r24
    41f8:	d1 f7       	brne	.-12     	; 0x41ee <__pack_f+0x164>
    41fa:	05 c0       	rjmp	.+10     	; 0x4206 <__pack_f+0x17c>
    41fc:	ee 24       	eor	r14, r14
    41fe:	ff 24       	eor	r15, r15
    4200:	87 01       	movw	r16, r14
    4202:	ef ef       	ldi	r30, 0xFF	; 255
    4204:	f0 e0       	ldi	r31, 0x00	; 0
    4206:	6e 2f       	mov	r22, r30
    4208:	67 95       	ror	r22
    420a:	66 27       	eor	r22, r22
    420c:	67 95       	ror	r22
    420e:	90 2f       	mov	r25, r16
    4210:	9f 77       	andi	r25, 0x7F	; 127
    4212:	d7 94       	ror	r13
    4214:	dd 24       	eor	r13, r13
    4216:	d7 94       	ror	r13
    4218:	8e 2f       	mov	r24, r30
    421a:	86 95       	lsr	r24
    421c:	49 2f       	mov	r20, r25
    421e:	46 2b       	or	r20, r22
    4220:	58 2f       	mov	r21, r24
    4222:	5d 29       	or	r21, r13
    4224:	b7 01       	movw	r22, r14
    4226:	ca 01       	movw	r24, r20
    4228:	1f 91       	pop	r17
    422a:	0f 91       	pop	r16
    422c:	ff 90       	pop	r15
    422e:	ef 90       	pop	r14
    4230:	df 90       	pop	r13
    4232:	08 95       	ret

00004234 <__unpack_f>:
    4234:	fc 01       	movw	r30, r24
    4236:	db 01       	movw	r26, r22
    4238:	40 81       	ld	r20, Z
    423a:	51 81       	ldd	r21, Z+1	; 0x01
    423c:	22 81       	ldd	r18, Z+2	; 0x02
    423e:	62 2f       	mov	r22, r18
    4240:	6f 77       	andi	r22, 0x7F	; 127
    4242:	70 e0       	ldi	r23, 0x00	; 0
    4244:	22 1f       	adc	r18, r18
    4246:	22 27       	eor	r18, r18
    4248:	22 1f       	adc	r18, r18
    424a:	93 81       	ldd	r25, Z+3	; 0x03
    424c:	89 2f       	mov	r24, r25
    424e:	88 0f       	add	r24, r24
    4250:	82 2b       	or	r24, r18
    4252:	28 2f       	mov	r18, r24
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	99 1f       	adc	r25, r25
    4258:	99 27       	eor	r25, r25
    425a:	99 1f       	adc	r25, r25
    425c:	11 96       	adiw	r26, 0x01	; 1
    425e:	9c 93       	st	X, r25
    4260:	11 97       	sbiw	r26, 0x01	; 1
    4262:	21 15       	cp	r18, r1
    4264:	31 05       	cpc	r19, r1
    4266:	a9 f5       	brne	.+106    	; 0x42d2 <__unpack_f+0x9e>
    4268:	41 15       	cp	r20, r1
    426a:	51 05       	cpc	r21, r1
    426c:	61 05       	cpc	r22, r1
    426e:	71 05       	cpc	r23, r1
    4270:	11 f4       	brne	.+4      	; 0x4276 <__unpack_f+0x42>
    4272:	82 e0       	ldi	r24, 0x02	; 2
    4274:	37 c0       	rjmp	.+110    	; 0x42e4 <__unpack_f+0xb0>
    4276:	82 e8       	ldi	r24, 0x82	; 130
    4278:	9f ef       	ldi	r25, 0xFF	; 255
    427a:	13 96       	adiw	r26, 0x03	; 3
    427c:	9c 93       	st	X, r25
    427e:	8e 93       	st	-X, r24
    4280:	12 97       	sbiw	r26, 0x02	; 2
    4282:	9a 01       	movw	r18, r20
    4284:	ab 01       	movw	r20, r22
    4286:	67 e0       	ldi	r22, 0x07	; 7
    4288:	22 0f       	add	r18, r18
    428a:	33 1f       	adc	r19, r19
    428c:	44 1f       	adc	r20, r20
    428e:	55 1f       	adc	r21, r21
    4290:	6a 95       	dec	r22
    4292:	d1 f7       	brne	.-12     	; 0x4288 <__unpack_f+0x54>
    4294:	83 e0       	ldi	r24, 0x03	; 3
    4296:	8c 93       	st	X, r24
    4298:	0d c0       	rjmp	.+26     	; 0x42b4 <__unpack_f+0x80>
    429a:	22 0f       	add	r18, r18
    429c:	33 1f       	adc	r19, r19
    429e:	44 1f       	adc	r20, r20
    42a0:	55 1f       	adc	r21, r21
    42a2:	12 96       	adiw	r26, 0x02	; 2
    42a4:	8d 91       	ld	r24, X+
    42a6:	9c 91       	ld	r25, X
    42a8:	13 97       	sbiw	r26, 0x03	; 3
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	13 96       	adiw	r26, 0x03	; 3
    42ae:	9c 93       	st	X, r25
    42b0:	8e 93       	st	-X, r24
    42b2:	12 97       	sbiw	r26, 0x02	; 2
    42b4:	20 30       	cpi	r18, 0x00	; 0
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	38 07       	cpc	r19, r24
    42ba:	80 e0       	ldi	r24, 0x00	; 0
    42bc:	48 07       	cpc	r20, r24
    42be:	80 e4       	ldi	r24, 0x40	; 64
    42c0:	58 07       	cpc	r21, r24
    42c2:	58 f3       	brcs	.-42     	; 0x429a <__unpack_f+0x66>
    42c4:	14 96       	adiw	r26, 0x04	; 4
    42c6:	2d 93       	st	X+, r18
    42c8:	3d 93       	st	X+, r19
    42ca:	4d 93       	st	X+, r20
    42cc:	5c 93       	st	X, r21
    42ce:	17 97       	sbiw	r26, 0x07	; 7
    42d0:	08 95       	ret
    42d2:	2f 3f       	cpi	r18, 0xFF	; 255
    42d4:	31 05       	cpc	r19, r1
    42d6:	79 f4       	brne	.+30     	; 0x42f6 <__unpack_f+0xc2>
    42d8:	41 15       	cp	r20, r1
    42da:	51 05       	cpc	r21, r1
    42dc:	61 05       	cpc	r22, r1
    42de:	71 05       	cpc	r23, r1
    42e0:	19 f4       	brne	.+6      	; 0x42e8 <__unpack_f+0xb4>
    42e2:	84 e0       	ldi	r24, 0x04	; 4
    42e4:	8c 93       	st	X, r24
    42e6:	08 95       	ret
    42e8:	64 ff       	sbrs	r22, 4
    42ea:	03 c0       	rjmp	.+6      	; 0x42f2 <__unpack_f+0xbe>
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	8c 93       	st	X, r24
    42f0:	12 c0       	rjmp	.+36     	; 0x4316 <__unpack_f+0xe2>
    42f2:	1c 92       	st	X, r1
    42f4:	10 c0       	rjmp	.+32     	; 0x4316 <__unpack_f+0xe2>
    42f6:	2f 57       	subi	r18, 0x7F	; 127
    42f8:	30 40       	sbci	r19, 0x00	; 0
    42fa:	13 96       	adiw	r26, 0x03	; 3
    42fc:	3c 93       	st	X, r19
    42fe:	2e 93       	st	-X, r18
    4300:	12 97       	sbiw	r26, 0x02	; 2
    4302:	83 e0       	ldi	r24, 0x03	; 3
    4304:	8c 93       	st	X, r24
    4306:	87 e0       	ldi	r24, 0x07	; 7
    4308:	44 0f       	add	r20, r20
    430a:	55 1f       	adc	r21, r21
    430c:	66 1f       	adc	r22, r22
    430e:	77 1f       	adc	r23, r23
    4310:	8a 95       	dec	r24
    4312:	d1 f7       	brne	.-12     	; 0x4308 <__unpack_f+0xd4>
    4314:	70 64       	ori	r23, 0x40	; 64
    4316:	14 96       	adiw	r26, 0x04	; 4
    4318:	4d 93       	st	X+, r20
    431a:	5d 93       	st	X+, r21
    431c:	6d 93       	st	X+, r22
    431e:	7c 93       	st	X, r23
    4320:	17 97       	sbiw	r26, 0x07	; 7
    4322:	08 95       	ret

00004324 <__fpcmp_parts_f>:
    4324:	1f 93       	push	r17
    4326:	dc 01       	movw	r26, r24
    4328:	fb 01       	movw	r30, r22
    432a:	9c 91       	ld	r25, X
    432c:	92 30       	cpi	r25, 0x02	; 2
    432e:	08 f4       	brcc	.+2      	; 0x4332 <__fpcmp_parts_f+0xe>
    4330:	47 c0       	rjmp	.+142    	; 0x43c0 <__fpcmp_parts_f+0x9c>
    4332:	80 81       	ld	r24, Z
    4334:	82 30       	cpi	r24, 0x02	; 2
    4336:	08 f4       	brcc	.+2      	; 0x433a <__fpcmp_parts_f+0x16>
    4338:	43 c0       	rjmp	.+134    	; 0x43c0 <__fpcmp_parts_f+0x9c>
    433a:	94 30       	cpi	r25, 0x04	; 4
    433c:	51 f4       	brne	.+20     	; 0x4352 <__fpcmp_parts_f+0x2e>
    433e:	11 96       	adiw	r26, 0x01	; 1
    4340:	1c 91       	ld	r17, X
    4342:	84 30       	cpi	r24, 0x04	; 4
    4344:	99 f5       	brne	.+102    	; 0x43ac <__fpcmp_parts_f+0x88>
    4346:	81 81       	ldd	r24, Z+1	; 0x01
    4348:	68 2f       	mov	r22, r24
    434a:	70 e0       	ldi	r23, 0x00	; 0
    434c:	61 1b       	sub	r22, r17
    434e:	71 09       	sbc	r23, r1
    4350:	3f c0       	rjmp	.+126    	; 0x43d0 <__fpcmp_parts_f+0xac>
    4352:	84 30       	cpi	r24, 0x04	; 4
    4354:	21 f0       	breq	.+8      	; 0x435e <__fpcmp_parts_f+0x3a>
    4356:	92 30       	cpi	r25, 0x02	; 2
    4358:	31 f4       	brne	.+12     	; 0x4366 <__fpcmp_parts_f+0x42>
    435a:	82 30       	cpi	r24, 0x02	; 2
    435c:	b9 f1       	breq	.+110    	; 0x43cc <__fpcmp_parts_f+0xa8>
    435e:	81 81       	ldd	r24, Z+1	; 0x01
    4360:	88 23       	and	r24, r24
    4362:	89 f1       	breq	.+98     	; 0x43c6 <__fpcmp_parts_f+0xa2>
    4364:	2d c0       	rjmp	.+90     	; 0x43c0 <__fpcmp_parts_f+0x9c>
    4366:	11 96       	adiw	r26, 0x01	; 1
    4368:	1c 91       	ld	r17, X
    436a:	11 97       	sbiw	r26, 0x01	; 1
    436c:	82 30       	cpi	r24, 0x02	; 2
    436e:	f1 f0       	breq	.+60     	; 0x43ac <__fpcmp_parts_f+0x88>
    4370:	81 81       	ldd	r24, Z+1	; 0x01
    4372:	18 17       	cp	r17, r24
    4374:	d9 f4       	brne	.+54     	; 0x43ac <__fpcmp_parts_f+0x88>
    4376:	12 96       	adiw	r26, 0x02	; 2
    4378:	2d 91       	ld	r18, X+
    437a:	3c 91       	ld	r19, X
    437c:	13 97       	sbiw	r26, 0x03	; 3
    437e:	82 81       	ldd	r24, Z+2	; 0x02
    4380:	93 81       	ldd	r25, Z+3	; 0x03
    4382:	82 17       	cp	r24, r18
    4384:	93 07       	cpc	r25, r19
    4386:	94 f0       	brlt	.+36     	; 0x43ac <__fpcmp_parts_f+0x88>
    4388:	28 17       	cp	r18, r24
    438a:	39 07       	cpc	r19, r25
    438c:	bc f0       	brlt	.+46     	; 0x43bc <__fpcmp_parts_f+0x98>
    438e:	14 96       	adiw	r26, 0x04	; 4
    4390:	8d 91       	ld	r24, X+
    4392:	9d 91       	ld	r25, X+
    4394:	0d 90       	ld	r0, X+
    4396:	bc 91       	ld	r27, X
    4398:	a0 2d       	mov	r26, r0
    439a:	24 81       	ldd	r18, Z+4	; 0x04
    439c:	35 81       	ldd	r19, Z+5	; 0x05
    439e:	46 81       	ldd	r20, Z+6	; 0x06
    43a0:	57 81       	ldd	r21, Z+7	; 0x07
    43a2:	28 17       	cp	r18, r24
    43a4:	39 07       	cpc	r19, r25
    43a6:	4a 07       	cpc	r20, r26
    43a8:	5b 07       	cpc	r21, r27
    43aa:	18 f4       	brcc	.+6      	; 0x43b2 <__fpcmp_parts_f+0x8e>
    43ac:	11 23       	and	r17, r17
    43ae:	41 f0       	breq	.+16     	; 0x43c0 <__fpcmp_parts_f+0x9c>
    43b0:	0a c0       	rjmp	.+20     	; 0x43c6 <__fpcmp_parts_f+0xa2>
    43b2:	82 17       	cp	r24, r18
    43b4:	93 07       	cpc	r25, r19
    43b6:	a4 07       	cpc	r26, r20
    43b8:	b5 07       	cpc	r27, r21
    43ba:	40 f4       	brcc	.+16     	; 0x43cc <__fpcmp_parts_f+0xa8>
    43bc:	11 23       	and	r17, r17
    43be:	19 f0       	breq	.+6      	; 0x43c6 <__fpcmp_parts_f+0xa2>
    43c0:	61 e0       	ldi	r22, 0x01	; 1
    43c2:	70 e0       	ldi	r23, 0x00	; 0
    43c4:	05 c0       	rjmp	.+10     	; 0x43d0 <__fpcmp_parts_f+0xac>
    43c6:	6f ef       	ldi	r22, 0xFF	; 255
    43c8:	7f ef       	ldi	r23, 0xFF	; 255
    43ca:	02 c0       	rjmp	.+4      	; 0x43d0 <__fpcmp_parts_f+0xac>
    43cc:	60 e0       	ldi	r22, 0x00	; 0
    43ce:	70 e0       	ldi	r23, 0x00	; 0
    43d0:	cb 01       	movw	r24, r22
    43d2:	1f 91       	pop	r17
    43d4:	08 95       	ret

000043d6 <strlen>:
    43d6:	fc 01       	movw	r30, r24
    43d8:	01 90       	ld	r0, Z+
    43da:	00 20       	and	r0, r0
    43dc:	e9 f7       	brne	.-6      	; 0x43d8 <strlen+0x2>
    43de:	80 95       	com	r24
    43e0:	90 95       	com	r25
    43e2:	8e 0f       	add	r24, r30
    43e4:	9f 1f       	adc	r25, r31
    43e6:	08 95       	ret

000043e8 <__udivmodhi4>:
    43e8:	aa 1b       	sub	r26, r26
    43ea:	bb 1b       	sub	r27, r27
    43ec:	51 e1       	ldi	r21, 0x11	; 17
    43ee:	07 c0       	rjmp	.+14     	; 0x43fe <__udivmodhi4_ep>

000043f0 <__udivmodhi4_loop>:
    43f0:	aa 1f       	adc	r26, r26
    43f2:	bb 1f       	adc	r27, r27
    43f4:	a6 17       	cp	r26, r22
    43f6:	b7 07       	cpc	r27, r23
    43f8:	10 f0       	brcs	.+4      	; 0x43fe <__udivmodhi4_ep>
    43fa:	a6 1b       	sub	r26, r22
    43fc:	b7 0b       	sbc	r27, r23

000043fe <__udivmodhi4_ep>:
    43fe:	88 1f       	adc	r24, r24
    4400:	99 1f       	adc	r25, r25
    4402:	5a 95       	dec	r21
    4404:	a9 f7       	brne	.-22     	; 0x43f0 <__udivmodhi4_loop>
    4406:	80 95       	com	r24
    4408:	90 95       	com	r25
    440a:	bc 01       	movw	r22, r24
    440c:	cd 01       	movw	r24, r26
    440e:	08 95       	ret

00004410 <__prologue_saves__>:
    4410:	2f 92       	push	r2
    4412:	3f 92       	push	r3
    4414:	4f 92       	push	r4
    4416:	5f 92       	push	r5
    4418:	6f 92       	push	r6
    441a:	7f 92       	push	r7
    441c:	8f 92       	push	r8
    441e:	9f 92       	push	r9
    4420:	af 92       	push	r10
    4422:	bf 92       	push	r11
    4424:	cf 92       	push	r12
    4426:	df 92       	push	r13
    4428:	ef 92       	push	r14
    442a:	ff 92       	push	r15
    442c:	0f 93       	push	r16
    442e:	1f 93       	push	r17
    4430:	cf 93       	push	r28
    4432:	df 93       	push	r29
    4434:	cd b7       	in	r28, 0x3d	; 61
    4436:	de b7       	in	r29, 0x3e	; 62
    4438:	ca 1b       	sub	r28, r26
    443a:	db 0b       	sbc	r29, r27
    443c:	0f b6       	in	r0, 0x3f	; 63
    443e:	f8 94       	cli
    4440:	de bf       	out	0x3e, r29	; 62
    4442:	0f be       	out	0x3f, r0	; 63
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	19 94       	eijmp

00004448 <__epilogue_restores__>:
    4448:	2a 88       	ldd	r2, Y+18	; 0x12
    444a:	39 88       	ldd	r3, Y+17	; 0x11
    444c:	48 88       	ldd	r4, Y+16	; 0x10
    444e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4450:	6e 84       	ldd	r6, Y+14	; 0x0e
    4452:	7d 84       	ldd	r7, Y+13	; 0x0d
    4454:	8c 84       	ldd	r8, Y+12	; 0x0c
    4456:	9b 84       	ldd	r9, Y+11	; 0x0b
    4458:	aa 84       	ldd	r10, Y+10	; 0x0a
    445a:	b9 84       	ldd	r11, Y+9	; 0x09
    445c:	c8 84       	ldd	r12, Y+8	; 0x08
    445e:	df 80       	ldd	r13, Y+7	; 0x07
    4460:	ee 80       	ldd	r14, Y+6	; 0x06
    4462:	fd 80       	ldd	r15, Y+5	; 0x05
    4464:	0c 81       	ldd	r16, Y+4	; 0x04
    4466:	1b 81       	ldd	r17, Y+3	; 0x03
    4468:	aa 81       	ldd	r26, Y+2	; 0x02
    446a:	b9 81       	ldd	r27, Y+1	; 0x01
    446c:	ce 0f       	add	r28, r30
    446e:	d1 1d       	adc	r29, r1
    4470:	0f b6       	in	r0, 0x3f	; 63
    4472:	f8 94       	cli
    4474:	de bf       	out	0x3e, r29	; 62
    4476:	0f be       	out	0x3f, r0	; 63
    4478:	cd bf       	out	0x3d, r28	; 61
    447a:	ed 01       	movw	r28, r26
    447c:	08 95       	ret

0000447e <_exit>:
    447e:	f8 94       	cli

00004480 <__stop_program>:
    4480:	ff cf       	rjmp	.-2      	; 0x4480 <__stop_program>
