
10B_Serial_Communication_ZigBee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  000018d4  00001968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  008001aa  008001aa  00001ab2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003ed  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001655  00000000  00000000  00001ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002cd  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012f5  00000000  00000000  000037e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00004ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000423  00000000  00000000  00004dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000070a  00000000  00000000  000051eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  000058f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3d       	cpi	r26, 0xD1	; 209
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 06 	call	0xd10	; 0xd10 <main>
      8a:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      92:	8a ef       	ldi	r24, 0xFA	; 250
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	fc 01       	movw	r30, r24
      98:	31 97       	sbiw	r30, 0x01	; 1
      9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      9c:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      9e:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
      a0:	40 e3       	ldi	r20, 0x30	; 48
      a2:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      a4:	aa 9a       	sbi	0x15, 2	; 21
      a6:	22 ee       	ldi	r18, 0xE2	; 226
      a8:	34 e0       	ldi	r19, 0x04	; 4
      aa:	f9 01       	movw	r30, r18
      ac:	31 97       	sbiw	r30, 0x01	; 1
      ae:	f1 f7       	brne	.-4      	; 0xac <lcd_set_4bit+0x1a>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      b0:	aa 98       	cbi	0x15, 2	; 21
      b2:	fc 01       	movw	r30, r24
      b4:	31 97       	sbiw	r30, 0x01	; 1
      b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      b8:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      ba:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
      bc:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      be:	aa 9a       	sbi	0x15, 2	; 21
      c0:	f9 01       	movw	r30, r18
      c2:	31 97       	sbiw	r30, 0x01	; 1
      c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_set_4bit+0x30>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      c6:	aa 98       	cbi	0x15, 2	; 21
      c8:	fc 01       	movw	r30, r24
      ca:	31 97       	sbiw	r30, 0x01	; 1
      cc:	f1 f7       	brne	.-4      	; 0xca <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      ce:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      d0:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
      d2:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      d4:	aa 9a       	sbi	0x15, 2	; 21
      d6:	f9 01       	movw	r30, r18
      d8:	31 97       	sbiw	r30, 0x01	; 1
      da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_set_4bit+0x46>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      dc:	aa 98       	cbi	0x15, 2	; 21
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      e2:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      e4:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
      e6:	80 e2       	ldi	r24, 0x20	; 32
      e8:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      ea:	aa 9a       	sbi	0x15, 2	; 21
      ec:	c9 01       	movw	r24, r18
      ee:	01 97       	sbiw	r24, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <lcd_set_4bit+0x5c>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      f2:	aa 98       	cbi	0x15, 2	; 21
}
      f4:	08 95       	ret

000000f6 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
      f6:	95 b3       	in	r25, 0x15	; 21
      f8:	9f 70       	andi	r25, 0x0F	; 15
      fa:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
      fc:	25 b3       	in	r18, 0x15	; 21
      fe:	98 2f       	mov	r25, r24
     100:	90 7f       	andi	r25, 0xF0	; 240
     102:	92 2b       	or	r25, r18
     104:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
     106:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     108:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     10a:	aa 9a       	sbi	0x15, 2	; 21
     10c:	22 ee       	ldi	r18, 0xE2	; 226
     10e:	34 e0       	ldi	r19, 0x04	; 4
     110:	f9 01       	movw	r30, r18
     112:	31 97       	sbiw	r30, 0x01	; 1
     114:	f1 f7       	brne	.-4      	; 0x112 <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     116:	aa 98       	cbi	0x15, 2	; 21
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     118:	95 b3       	in	r25, 0x15	; 21
     11a:	9f 70       	andi	r25, 0x0F	; 15
     11c:	95 bb       	out	0x15, r25	; 21
	lcd_port |= cmd;
     11e:	95 b3       	in	r25, 0x15	; 21
     120:	82 95       	swap	r24
     122:	80 7f       	andi	r24, 0xF0	; 240
     124:	98 2b       	or	r25, r24
     126:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
     128:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     12a:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     12c:	aa 9a       	sbi	0x15, 2	; 21
     12e:	c9 01       	movw	r24, r18
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     134:	aa 98       	cbi	0x15, 2	; 21
}
     136:	08 95       	ret

00000138 <lcd_init>:
     138:	8a ef       	ldi	r24, 0xFA	; 250
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_init+0x4>
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     140:	88 e2       	ldi	r24, 0x28	; 40
     142:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     14c:	86 e0       	ldi	r24, 0x06	; 6
     14e:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     152:	8e e0       	ldi	r24, 0x0E	; 14
     154:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     158:	80 e8       	ldi	r24, 0x80	; 128
     15a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
}
     15e:	08 95       	ret

00000160 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     160:	95 b3       	in	r25, 0x15	; 21
     162:	9f 70       	andi	r25, 0x0F	; 15
     164:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
     166:	25 b3       	in	r18, 0x15	; 21
     168:	98 2f       	mov	r25, r24
     16a:	90 7f       	andi	r25, 0xF0	; 240
     16c:	92 2b       	or	r25, r18
     16e:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
     170:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     172:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     174:	aa 9a       	sbi	0x15, 2	; 21
     176:	22 ee       	ldi	r18, 0xE2	; 226
     178:	34 e0       	ldi	r19, 0x04	; 4
     17a:	f9 01       	movw	r30, r18
     17c:	31 97       	sbiw	r30, 0x01	; 1
     17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     180:	aa 98       	cbi	0x15, 2	; 21

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     182:	95 b3       	in	r25, 0x15	; 21
     184:	9f 70       	andi	r25, 0x0F	; 15
     186:	95 bb       	out	0x15, r25	; 21
	lcd_port |= letter;
     188:	95 b3       	in	r25, 0x15	; 21
     18a:	82 95       	swap	r24
     18c:	80 7f       	andi	r24, 0xF0	; 240
     18e:	98 2b       	or	r25, r24
     190:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
     192:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     194:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     196:	aa 9a       	sbi	0x15, 2	; 21
     198:	c9 01       	movw	r24, r18
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     19e:	aa 98       	cbi	0x15, 2	; 21
}
     1a0:	08 95       	ret

000001a2 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     1a2:	80 e8       	ldi	r24, 0x80	; 128
     1a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
}
     1a8:	08 95       	ret

000001aa <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	ec 01       	movw	r28, r24
     1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     1b2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
		str++;
     1b6:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     1b8:	88 81       	ld	r24, Y
     1ba:	88 23       	and	r24, r24
     1bc:	d1 f7       	brne	.-12     	; 0x1b2 <lcd_string+0x8>
     1be:	c0 e0       	ldi	r28, 0x00	; 0
     1c0:	d0 e0       	ldi	r29, 0x00	; 0
		str++;
	}
	int i;
	for(i=0;i<10;i++)
	{
		lcd_wr_char(' ');
     1c2:	80 e2       	ldi	r24, 0x20	; 32
     1c4:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
	{
		lcd_wr_char(*str);
		str++;
	}
	int i;
	for(i=0;i<10;i++)
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ca 30       	cpi	r28, 0x0A	; 10
     1cc:	d1 05       	cpc	r29, r1
     1ce:	c9 f7       	brne	.-14     	; 0x1c2 <lcd_string+0x18>
	{
		lcd_wr_char(' ');
	}
}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     1d6:	82 30       	cpi	r24, 0x02	; 2
     1d8:	69 f0       	breq	.+26     	; 0x1f4 <lcd_cursor+0x1e>
     1da:	83 30       	cpi	r24, 0x03	; 3
     1dc:	18 f4       	brcc	.+6      	; 0x1e4 <lcd_cursor+0xe>
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	a9 f4       	brne	.+42     	; 0x20c <lcd_cursor+0x36>
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <lcd_cursor+0x18>
     1e4:	83 30       	cpi	r24, 0x03	; 3
     1e6:	49 f0       	breq	.+18     	; 0x1fa <lcd_cursor+0x24>
     1e8:	84 30       	cpi	r24, 0x04	; 4
     1ea:	81 f4       	brne	.+32     	; 0x20c <lcd_cursor+0x36>
     1ec:	0b c0       	rjmp	.+22     	; 0x204 <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     1ee:	86 2f       	mov	r24, r22
     1f0:	81 58       	subi	r24, 0x81	; 129
     1f2:	05 c0       	rjmp	.+10     	; 0x1fe <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     1f4:	86 2f       	mov	r24, r22
     1f6:	81 54       	subi	r24, 0x41	; 65
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     1fa:	86 2f       	mov	r24, r22
     1fc:	8d 56       	subi	r24, 0x6D	; 109
     1fe:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
     202:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     204:	86 2f       	mov	r24, r22
     206:	8d 52       	subi	r24, 0x2D	; 45
     208:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
     20c:	08 95       	ret

0000020e <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	8a 01       	movw	r16, r20
     218:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     21a:	88 23       	and	r24, r24
     21c:	11 f0       	breq	.+4      	; 0x222 <lcd_print+0x14>
     21e:	66 23       	and	r22, r22
     220:	19 f4       	brne	.+6      	; 0x228 <lcd_print+0x1a>
	{
		lcd_home();
     222:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_home>
     226:	02 c0       	rjmp	.+4      	; 0x22c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     228:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     22c:	c5 30       	cpi	r28, 0x05	; 5
     22e:	d1 05       	cpc	r29, r1
     230:	71 f4       	brne	.+28     	; 0x24e <lcd_print+0x40>
	{
		million=value/10000+48;
     232:	c8 01       	movw	r24, r16
     234:	60 e1       	ldi	r22, 0x10	; 16
     236:	77 e2       	ldi	r23, 0x27	; 39
     238:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__udivmodhi4>
     23c:	cb 01       	movw	r24, r22
     23e:	c0 96       	adiw	r24, 0x30	; 48
     240:	90 93 c0 01 	sts	0x01C0, r25
     244:	80 93 bf 01 	sts	0x01BF, r24
		lcd_wr_char(million);
     248:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     24c:	05 c0       	rjmp	.+10     	; 0x258 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     24e:	c4 30       	cpi	r28, 0x04	; 4
     250:	d1 05       	cpc	r29, r1
     252:	11 f0       	breq	.+4      	; 0x258 <lcd_print+0x4a>
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	16 c0       	rjmp	.+44     	; 0x284 <lcd_print+0x76>
	{
		temp = value/1000;
     258:	c8 01       	movw	r24, r16
     25a:	68 ee       	ldi	r22, 0xE8	; 232
     25c:	73 e0       	ldi	r23, 0x03	; 3
     25e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__udivmodhi4>
     262:	cb 01       	movw	r24, r22
     264:	60 93 c1 01 	sts	0x01C1, r22
     268:	90 93 c2 01 	sts	0x01C2, r25
		thousand = temp%10 + 48;
     26c:	6a e0       	ldi	r22, 0x0A	; 10
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__udivmodhi4>
     274:	c0 96       	adiw	r24, 0x30	; 48
     276:	90 93 ce 01 	sts	0x01CE, r25
     27a:	80 93 cd 01 	sts	0x01CD, r24
		lcd_wr_char(thousand);
     27e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     282:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     284:	c3 30       	cpi	r28, 0x03	; 3
     286:	d1 05       	cpc	r29, r1
     288:	21 f0       	breq	.+8      	; 0x292 <lcd_print+0x84>
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	11 f0       	breq	.+4      	; 0x292 <lcd_print+0x84>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	16 c0       	rjmp	.+44     	; 0x2be <lcd_print+0xb0>
	{
		temp = value/100;
     292:	c8 01       	movw	r24, r16
     294:	64 e6       	ldi	r22, 0x64	; 100
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__udivmodhi4>
     29c:	cb 01       	movw	r24, r22
     29e:	60 93 c1 01 	sts	0x01C1, r22
     2a2:	90 93 c2 01 	sts	0x01C2, r25
		hundred = temp%10 + 48;
     2a6:	6a e0       	ldi	r22, 0x0A	; 10
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__udivmodhi4>
     2ae:	c0 96       	adiw	r24, 0x30	; 48
     2b0:	90 93 ca 01 	sts	0x01CA, r25
     2b4:	80 93 c9 01 	sts	0x01C9, r24
		lcd_wr_char(hundred);
     2b8:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     2bc:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     2be:	c2 30       	cpi	r28, 0x02	; 2
     2c0:	d1 05       	cpc	r29, r1
     2c2:	21 f0       	breq	.+8      	; 0x2cc <lcd_print+0xbe>
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	11 f0       	breq	.+4      	; 0x2cc <lcd_print+0xbe>
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	16 c0       	rjmp	.+44     	; 0x2f8 <lcd_print+0xea>
	{
		temp = value/10;
     2cc:	c8 01       	movw	r24, r16
     2ce:	6a e0       	ldi	r22, 0x0A	; 10
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__udivmodhi4>
     2d6:	cb 01       	movw	r24, r22
     2d8:	60 93 c1 01 	sts	0x01C1, r22
     2dc:	90 93 c2 01 	sts	0x01C2, r25
		tens = temp%10 + 48;
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__udivmodhi4>
     2e8:	c0 96       	adiw	r24, 0x30	; 48
     2ea:	90 93 c7 01 	sts	0x01C7, r25
     2ee:	80 93 c6 01 	sts	0x01C6, r24
		lcd_wr_char(tens);
     2f2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     2f6:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     2f8:	c1 30       	cpi	r28, 0x01	; 1
     2fa:	d1 05       	cpc	r29, r1
     2fc:	11 f0       	breq	.+4      	; 0x302 <lcd_print+0xf4>
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	61 f4       	brne	.+24     	; 0x31a <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     302:	c8 01       	movw	r24, r16
     304:	6a e0       	ldi	r22, 0x0A	; 10
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__udivmodhi4>
     30c:	c0 96       	adiw	r24, 0x30	; 48
     30e:	90 93 cc 01 	sts	0x01CC, r25
     312:	80 93 cb 01 	sts	0x01CB, r24
		lcd_wr_char(unit);
     316:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
	}
	if(digits>5)
     31a:	26 97       	sbiw	r28, 0x06	; 6
     31c:	1c f0       	brlt	.+6      	; 0x324 <lcd_print+0x116>
	{
		lcd_wr_char('E');
     31e:	85 e4       	ldi	r24, 0x45	; 69
     320:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
	}
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	08 95       	ret

0000032e <lcd_port_config>:
#include <util/delay.h>

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     32e:	84 b3       	in	r24, 0x14	; 20
     330:	87 6f       	ori	r24, 0xF7	; 247
     332:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     334:	85 b3       	in	r24, 0x15	; 21
     336:	80 78       	andi	r24, 0x80	; 128
     338:	85 bb       	out	0x15, r24	; 21
}
     33a:	08 95       	ret

0000033c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;   //set PORTF direction as input
     33c:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00;  //set PORTF pins floating
     33e:	1b ba       	out	0x1b, r1	; 27
}
     340:	08 95       	ret

00000342 <motion_pin_config>:


void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
     342:	87 b3       	in	r24, 0x17	; 23
     344:	8f 60       	ori	r24, 0x0F	; 15
     346:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
     348:	88 b3       	in	r24, 0x18	; 24
     34a:	80 7f       	andi	r24, 0xF0	; 240
     34c:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
     34e:	81 b3       	in	r24, 0x11	; 17
     350:	80 63       	ori	r24, 0x30	; 48
     352:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
     354:	82 b3       	in	r24, 0x12	; 18
     356:	80 63       	ori	r24, 0x30	; 48
     358:	82 bb       	out	0x12, r24	; 18
}
     35a:	08 95       	ret

0000035c <buzzer_pin_config>:

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     35c:	a3 9a       	sbi	0x14, 3	; 20
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     35e:	ab 98       	cbi	0x15, 3	; 21
}
     360:	08 95       	ret

00000362 <port_init>:
#include <util/delay.h>

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     362:	84 b3       	in	r24, 0x14	; 20
     364:	87 6f       	ori	r24, 0xF7	; 247
     366:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     368:	85 b3       	in	r24, 0x15	; 21
     36a:	80 78       	andi	r24, 0x80	; 128
     36c:	85 bb       	out	0x15, r24	; 21
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;   //set PORTF direction as input
     36e:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00;  //set PORTF pins floating
     370:	1b ba       	out	0x1b, r1	; 27
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
}

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     372:	a3 9a       	sbi	0x14, 3	; 20
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     374:	ab 98       	cbi	0x15, 3	; 21
}


void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
     376:	87 b3       	in	r24, 0x17	; 23
     378:	8f 60       	ori	r24, 0x0F	; 15
     37a:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
     37c:	88 b3       	in	r24, 0x18	; 24
     37e:	80 7f       	andi	r24, 0xF0	; 240
     380:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
     382:	81 b3       	in	r24, 0x11	; 17
     384:	80 63       	ori	r24, 0x30	; 48
     386:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
     388:	82 b3       	in	r24, 0x12	; 18
     38a:	80 63       	ori	r24, 0x30	; 48
     38c:	82 bb       	out	0x12, r24	; 18
{
 lcd_port_config();
 adc_pin_config();
 buzzer_pin_config();		
 motion_pin_config();
}
     38e:	08 95       	ret

00000390 <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     390:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //setup
     392:	9f ef       	ldi	r25, 0xFF	; 255
     394:	9d bd       	out	0x2d, r25	; 45
 TCNT1L = 0x01;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	8c bd       	out	0x2c, r24	; 44
 OCR1AH = 0x00;
     39a:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;
     39c:	9a bd       	out	0x2a, r25	; 42
 OCR1BH = 0x00;
     39e:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;
     3a0:	98 bd       	out	0x28, r25	; 40
 ICR1H  = 0x00;
     3a2:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
     3a4:	96 bd       	out	0x26, r25	; 38
 TCCR1A = 0xA1;
     3a6:	81 ea       	ldi	r24, 0xA1	; 161
     3a8:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
     3aa:	8d e0       	ldi	r24, 0x0D	; 13
     3ac:	8e bd       	out	0x2e, r24	; 46
}
     3ae:	08 95       	ret

000003b0 <adc_init>:


//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
     3b0:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     3b2:	80 e2       	ldi	r24, 0x20	; 32
     3b4:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
     3b6:	80 e8       	ldi	r24, 0x80	; 128
     3b8:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     3ba:	86 e8       	ldi	r24, 0x86	; 134
     3bc:	86 b9       	out	0x06, r24	; 6
}
     3be:	08 95       	ret

000003c0 <uart0_init>:
// actual: baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     3c0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     3c2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = 0x86;
     3c4:	86 e8       	ldi	r24, 0x86	; 134
     3c6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
     3c8:	8f e2       	ldi	r24, 0x2F	; 47
     3ca:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     3cc:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98; 
     3ce:	88 e9       	ldi	r24, 0x98	; 152
     3d0:	8a b9       	out	0x0a, r24	; 10
}
     3d2:	08 95       	ret

000003d4 <init_devices>:



void init_devices (void)
{
     3d4:	1f 93       	push	r17
 cli();          //Clears the global interrupts
     3d6:	f8 94       	cli
 port_init();
     3d8:	0e 94 b1 01 	call	0x362	; 0x362 <port_init>
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     3dc:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //setup
     3de:	9f ef       	ldi	r25, 0xFF	; 255
     3e0:	9d bd       	out	0x2d, r25	; 45
 TCNT1L = 0x01;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	8c bd       	out	0x2c, r24	; 44
 OCR1AH = 0x00;
     3e6:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;
     3e8:	9a bd       	out	0x2a, r25	; 42
 OCR1BH = 0x00;
     3ea:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;
     3ec:	98 bd       	out	0x28, r25	; 40
 ICR1H  = 0x00;
     3ee:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
     3f0:	96 bd       	out	0x26, r25	; 38
 TCCR1A = 0xA1;
     3f2:	81 ea       	ldi	r24, 0xA1	; 161
     3f4:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
     3f6:	8d e0       	ldi	r24, 0x0D	; 13
     3f8:	8e bd       	out	0x2e, r24	; 46


//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
     3fa:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     3fc:	80 e2       	ldi	r24, 0x20	; 32
     3fe:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
     400:	80 e8       	ldi	r24, 0x80	; 128
     402:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     404:	16 e8       	ldi	r17, 0x86	; 134
     406:	16 b9       	out	0x06, r17	; 6
 cli();          //Clears the global interrupts
 port_init();
 
 timer1_init();
 adc_init();
 lcd_set_4bit();
     408:	0e 94 49 00 	call	0x92	; 0x92 <lcd_set_4bit>
 lcd_init();
     40c:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_init>
// actual: baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     410:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     412:	1b b8       	out	0x0b, r1	; 11
 UCSRC = 0x86;
     414:	10 bd       	out	0x20, r17	; 32
 UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
     416:	8f e2       	ldi	r24, 0x2F	; 47
     418:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     41a:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98; 
     41c:	88 e9       	ldi	r24, 0x98	; 152
     41e:	8a b9       	out	0x0a, r24	; 10
 timer1_init();
 adc_init();
 lcd_set_4bit();
 lcd_init();
 uart0_init();
 sei();          //Enables the global interrupts
     420:	78 94       	sei
}
     422:	1f 91       	pop	r17
     424:	08 95       	ret

00000426 <ADC_Conversion>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     426:	87 70       	andi	r24, 0x07	; 7
     428:	80 62       	ori	r24, 0x20	; 32
     42a:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     42c:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     42e:	34 9b       	sbis	0x06, 4	; 6
     430:	fe cf       	rjmp	.-4      	; 0x42e <ADC_Conversion+0x8>
 a=ADCH;
     432:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     434:	34 9a       	sbi	0x06, 4	; 6
 return a;
}
     436:	08 95       	ret

00000438 <print_sensor>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     438:	47 70       	andi	r20, 0x07	; 7
     43a:	40 62       	ori	r20, 0x20	; 32
     43c:	47 b9       	out	0x07, r20	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     43e:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     440:	34 9b       	sbis	0x06, 4	; 6
     442:	fe cf       	rjmp	.-4      	; 0x440 <print_sensor+0x8>
 a=ADCH;
     444:	45 b1       	in	r20, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     446:	34 9a       	sbi	0x06, 4	; 6

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
 ADC_Value = ADC_Conversion(channel);
     448:	40 93 c3 01 	sts	0x01C3, r20
 lcd_print(row, coloumn, ADC_Value, 3);
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	23 e0       	ldi	r18, 0x03	; 3
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_print>
}
     456:	08 95       	ret

00000458 <init_sensor_values>:
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 return a;
}

void init_sensor_values(void)
{
     458:	6f 92       	push	r6
     45a:	7f 92       	push	r7
     45c:	8f 92       	push	r8
     45e:	9f 92       	push	r9
     460:	af 92       	push	r10
     462:	bf 92       	push	r11
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     470:	83 e2       	ldi	r24, 0x23	; 35
     472:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     474:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     476:	34 9b       	sbis	0x06, 4	; 6
     478:	fe cf       	rjmp	.-4      	; 0x476 <__stack+0x17>
 a=ADCH;
     47a:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     47c:	34 9a       	sbi	0x06, 4	; 6
 return a;
}

void init_sensor_values(void)
{
	lline = ADC_Conversion(3);	//Getting data of Left WL Sensor
     47e:	80 93 aa 01 	sts	0x01AA, r24
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     482:	84 e2       	ldi	r24, 0x24	; 36
     484:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     486:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     488:	34 9b       	sbis	0x06, 4	; 6
     48a:	fe cf       	rjmp	.-4      	; 0x488 <__stack+0x29>
 a=ADCH;
     48c:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     48e:	34 9a       	sbi	0x06, 4	; 6
}

void init_sensor_values(void)
{
	lline = ADC_Conversion(3);	//Getting data of Left WL Sensor
	cline = ADC_Conversion(4);	//Getting data of Center WL Sensor
     490:	80 93 ab 01 	sts	0x01AB, r24
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     494:	85 e2       	ldi	r24, 0x25	; 37
     496:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     498:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     49a:	34 9b       	sbis	0x06, 4	; 6
     49c:	fe cf       	rjmp	.-4      	; 0x49a <__stack+0x3b>
 a=ADCH;
     49e:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     4a0:	34 9a       	sbi	0x06, 4	; 6

void init_sensor_values(void)
{
	lline = ADC_Conversion(3);	//Getting data of Left WL Sensor
	cline = ADC_Conversion(4);	//Getting data of Center WL Sensor
	rline = ADC_Conversion(5);	//Getting data of Right WL Sensor
     4a2:	80 93 ac 01 	sts	0x01AC, r24
	print_sensor(2,1,3);		//Prints value of White Line Sensor Left
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	43 e0       	ldi	r20, 0x03	; 3
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	0e 94 1c 02 	call	0x438	; 0x438 <print_sensor>
	print_sensor(2,5,4);		//Prints value of White Line Sensor Center
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	65 e0       	ldi	r22, 0x05	; 5
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	44 e0       	ldi	r20, 0x04	; 4
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	0e 94 1c 02 	call	0x438	; 0x438 <print_sensor>
	print_sensor(2,9,5);		//Prints Value of White Line Sensor Right
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	69 e0       	ldi	r22, 0x09	; 9
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	45 e0       	ldi	r20, 0x05	; 5
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	0e 94 1c 02 	call	0x438	; 0x438 <print_sensor>
	if(lline < thresh )
     4d6:	20 91 9e 00 	lds	r18, 0x009E
     4da:	30 91 9f 00 	lds	r19, 0x009F
     4de:	80 91 aa 01 	lds	r24, 0x01AA
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	82 17       	cp	r24, r18
     4e6:	93 07       	cpc	r25, r19
     4e8:	e4 f4       	brge	.+56     	; 0x522 <__stack+0xc3>
	{
		if(cline < thresh) prop =max/2; // white white black
     4ea:	80 91 ab 01 	lds	r24, 0x01AB
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	82 17       	cp	r24, r18
     4f2:	93 07       	cpc	r25, r19
     4f4:	3c f4       	brge	.+14     	; 0x504 <__stack+0xa5>
     4f6:	80 91 9c 00 	lds	r24, 0x009C
     4fa:	90 91 9d 00 	lds	r25, 0x009D
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	0c c0       	rjmp	.+24     	; 0x51c <__stack+0xbd>
		else if(rline>thresh) prop=max/4; //white black black 
     504:	80 91 ac 01 	lds	r24, 0x01AC
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	28 17       	cp	r18, r24
     50c:	39 07       	cpc	r19, r25
     50e:	4c f5       	brge	.+82     	; 0x562 <__stack+0x103>
     510:	80 91 9c 00 	lds	r24, 0x009C
     514:	90 91 9d 00 	lds	r25, 0x009D
     518:	64 e0       	ldi	r22, 0x04	; 4
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__divmodhi4>
     520:	1c c0       	rjmp	.+56     	; 0x55a <__stack+0xfb>
	}
	else if(rline < thresh)
     522:	80 91 ac 01 	lds	r24, 0x01AC
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	82 17       	cp	r24, r18
     52a:	93 07       	cpc	r25, r19
     52c:	d4 f4       	brge	.+52     	; 0x562 <__stack+0x103>
	{
		if(lline<thresh) prop=0;  // white black white
		else if(cline<thresh) prop=-max/2; // black white white
     52e:	80 91 ab 01 	lds	r24, 0x01AB
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	40 91 9c 00 	lds	r20, 0x009C
     538:	50 91 9d 00 	lds	r21, 0x009D
     53c:	82 17       	cp	r24, r18
     53e:	93 07       	cpc	r25, r19
     540:	24 f4       	brge	.+8      	; 0x54a <__stack+0xeb>
     542:	ca 01       	movw	r24, r20
     544:	62 e0       	ldi	r22, 0x02	; 2
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	03 c0       	rjmp	.+6      	; 0x550 <__stack+0xf1>
		else prop=-max/4; // black black white
     54a:	ca 01       	movw	r24, r20
     54c:	64 e0       	ldi	r22, 0x04	; 4
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	0e 94 1e 0c 	call	0x183c	; 0x183c <__divmodhi4>
     554:	70 95       	com	r23
     556:	61 95       	neg	r22
     558:	7f 4f       	sbci	r23, 0xFF	; 255
     55a:	70 93 b3 01 	sts	0x01B3, r23
     55e:	60 93 b2 01 	sts	0x01B2, r22
	}
	der = prop-last_prop; //derivative
     562:	60 91 b2 01 	lds	r22, 0x01B2
     566:	70 91 b3 01 	lds	r23, 0x01B3
     56a:	20 91 b8 01 	lds	r18, 0x01B8
     56e:	30 91 b9 01 	lds	r19, 0x01B9
     572:	5b 01       	movw	r10, r22
     574:	a2 1a       	sub	r10, r18
     576:	b3 0a       	sbc	r11, r19
     578:	b0 92 b5 01 	sts	0x01B5, r11
     57c:	a0 92 b4 01 	sts	0x01B4, r10
	integral += prop; // integral
     580:	e0 90 b6 01 	lds	r14, 0x01B6
     584:	f0 90 b7 01 	lds	r15, 0x01B7
     588:	e6 0e       	add	r14, r22
     58a:	f7 1e       	adc	r15, r23
     58c:	f0 92 b7 01 	sts	0x01B7, r15
     590:	e0 92 b6 01 	sts	0x01B6, r14
	last_prop = prop; 
     594:	70 93 b9 01 	sts	0x01B9, r23
     598:	60 93 b8 01 	sts	0x01B8, r22
	pow_diff = kp*prop + ki*integral + kd*der;
     59c:	88 27       	eor	r24, r24
     59e:	77 fd       	sbrc	r23, 7
     5a0:	80 95       	com	r24
     5a2:	98 2f       	mov	r25, r24
     5a4:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__floatsisf>
     5a8:	20 91 94 00 	lds	r18, 0x0094
     5ac:	30 91 95 00 	lds	r19, 0x0095
     5b0:	40 91 96 00 	lds	r20, 0x0096
     5b4:	50 91 97 00 	lds	r21, 0x0097
     5b8:	0e 94 39 08 	call	0x1072	; 0x1072 <__mulsf3>
     5bc:	3b 01       	movw	r6, r22
     5be:	4c 01       	movw	r8, r24
     5c0:	00 27       	eor	r16, r16
     5c2:	f7 fc       	sbrc	r15, 7
     5c4:	00 95       	com	r16
     5c6:	10 2f       	mov	r17, r16
     5c8:	c8 01       	movw	r24, r16
     5ca:	b7 01       	movw	r22, r14
     5cc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__floatsisf>
     5d0:	20 91 ae 01 	lds	r18, 0x01AE
     5d4:	30 91 af 01 	lds	r19, 0x01AF
     5d8:	40 91 b0 01 	lds	r20, 0x01B0
     5dc:	50 91 b1 01 	lds	r21, 0x01B1
     5e0:	0e 94 39 08 	call	0x1072	; 0x1072 <__mulsf3>
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	c4 01       	movw	r24, r8
     5ea:	b3 01       	movw	r22, r6
     5ec:	0e 94 0c 08 	call	0x1018	; 0x1018 <__addsf3>
     5f0:	7b 01       	movw	r14, r22
     5f2:	8c 01       	movw	r16, r24
     5f4:	cc 24       	eor	r12, r12
     5f6:	b7 fc       	sbrc	r11, 7
     5f8:	c0 94       	com	r12
     5fa:	dc 2c       	mov	r13, r12
     5fc:	c6 01       	movw	r24, r12
     5fe:	b5 01       	movw	r22, r10
     600:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__floatsisf>
     604:	20 91 98 00 	lds	r18, 0x0098
     608:	30 91 99 00 	lds	r19, 0x0099
     60c:	40 91 9a 00 	lds	r20, 0x009A
     610:	50 91 9b 00 	lds	r21, 0x009B
     614:	0e 94 39 08 	call	0x1072	; 0x1072 <__mulsf3>
     618:	9b 01       	movw	r18, r22
     61a:	ac 01       	movw	r20, r24
     61c:	c8 01       	movw	r24, r16
     61e:	b7 01       	movw	r22, r14
     620:	0e 94 0c 08 	call	0x1018	; 0x1018 <__addsf3>
     624:	0e 94 c1 09 	call	0x1382	; 0x1382 <__fixsfsi>
     628:	70 93 d0 01 	sts	0x01D0, r23
     62c:	60 93 cf 01 	sts	0x01CF, r22
	if(pow_diff > max) pow_diff = max;
     630:	80 91 9c 00 	lds	r24, 0x009C
     634:	90 91 9d 00 	lds	r25, 0x009D
     638:	86 17       	cp	r24, r22
     63a:	97 07       	cpc	r25, r23
     63c:	24 f4       	brge	.+8      	; 0x646 <__stack+0x1e7>
     63e:	90 93 d0 01 	sts	0x01D0, r25
     642:	80 93 cf 01 	sts	0x01CF, r24
	if(pow_diff < -max) pow_diff = -max;
     646:	22 27       	eor	r18, r18
     648:	33 27       	eor	r19, r19
     64a:	28 1b       	sub	r18, r24
     64c:	39 0b       	sbc	r19, r25
     64e:	80 91 cf 01 	lds	r24, 0x01CF
     652:	90 91 d0 01 	lds	r25, 0x01D0
     656:	82 17       	cp	r24, r18
     658:	93 07       	cpc	r25, r19
     65a:	24 f4       	brge	.+8      	; 0x664 <__stack+0x205>
     65c:	30 93 d0 01 	sts	0x01D0, r19
     660:	20 93 cf 01 	sts	0x01CF, r18
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     664:	81 e2       	ldi	r24, 0x21	; 33
     666:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     668:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     66a:	34 9b       	sbis	0x06, 4	; 6
     66c:	fe cf       	rjmp	.-4      	; 0x66a <__stack+0x20b>
 a=ADCH;
     66e:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     670:	34 9a       	sbi	0x06, 4	; 6
	last_prop = prop; 
	pow_diff = kp*prop + ki*integral + kd*der;
	if(pow_diff > max) pow_diff = max;
	if(pow_diff < -max) pow_diff = -max;
	
	fir = ADC_Conversion(1); // front IR
     672:	80 93 ad 01 	sts	0x01AD, r24
}
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	bf 90       	pop	r11
     684:	af 90       	pop	r10
     686:	9f 90       	pop	r9
     688:	8f 90       	pop	r8
     68a:	7f 90       	pop	r7
     68c:	6f 90       	pop	r6
     68e:	08 95       	ret

00000690 <checkobstacle>:
	take_turn(2);
}

int checkobstacle() //returns 0 if there is an obstacle
{
	init_sensor_values();
     690:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
	if(fir<0x28)
     694:	80 91 ad 01 	lds	r24, 0x01AD
     698:	88 32       	cpi	r24, 0x28	; 40
     69a:	18 f0       	brcs	.+6      	; 0x6a2 <checkobstacle+0x12>
     69c:	21 e0       	ldi	r18, 0x01	; 1
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <checkobstacle+0x34>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6a2:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6a4:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     6a6:	88 bb       	out	0x18, r24	; 24
	{
		
		stop();
		lcd_cursor(1,1);		
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
		lcd_string("Obstacle");		
     6b0:	80 e6       	ldi	r24, 0x60	; 96
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
     6b8:	88 ea       	ldi	r24, 0xA8	; 168
     6ba:	91 e6       	ldi	r25, 0x61	; 97
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <checkobstacle+0x2c>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(100);		
		return  0;
	}	
	return 1;
}
     6c4:	c9 01       	movw	r24, r18
     6c6:	08 95       	ret

000006c8 <buzzer_on>:
#include <util/delay.h>

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     6c8:	83 b3       	in	r24, 0x13	; 19
 port_restore = port_restore | 0x08;
     6ca:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     6cc:	85 bb       	out	0x15, r24	; 21
}
     6ce:	08 95       	ret

000006d0 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     6d0:	83 b3       	in	r24, 0x13	; 19
 port_restore = port_restore & 0xF7;
     6d2:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     6d4:	85 bb       	out	0x15, r24	; 21
}
     6d6:	08 95       	ret

000006d8 <motion>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6d8:	98 b3       	in	r25, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6da:	90 7f       	andi	r25, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     6dc:	8f 70       	andi	r24, 0x0F	; 15
     6de:	89 2b       	or	r24, r25
 PORTB = PortBRestore; 			// setting the command to the port
     6e0:	88 bb       	out	0x18, r24	; 24
}
     6e2:	08 95       	ret

000006e4 <forward>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6e4:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6e6:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     6e8:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
     6ea:	88 bb       	out	0x18, r24	; 24
}

void forward (void) //both wheels forward
{
  motion(0x06);
}
     6ec:	08 95       	ret

000006ee <stop>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6ee:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6f0:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     6f2:	88 bb       	out	0x18, r24	; 24
}

void stop (void) //hard stop
{
  motion(0x00);
}
     6f4:	08 95       	ret

000006f6 <backward>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6f6:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6f8:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     6fa:	89 60       	ori	r24, 0x09	; 9
 PORTB = PortBRestore; 			// setting the command to the port
     6fc:	88 bb       	out	0x18, r24	; 24
}

void backward (void)        //both wheels backward
{
  motion(0x09);
}
     6fe:	08 95       	ret

00000700 <left>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     700:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     702:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     704:	85 60       	ori	r24, 0x05	; 5
 PORTB = PortBRestore; 			// setting the command to the port
     706:	88 bb       	out	0x18, r24	; 24
}

void left (void)            //Left wheel backward, Right wheel forward
{
  motion(0x05);
}
     708:	08 95       	ret

0000070a <right>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     70a:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     70c:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     70e:	8a 60       	ori	r24, 0x0A	; 10
 PORTB = PortBRestore; 			// setting the command to the port
     710:	88 bb       	out	0x18, r24	; 24
}

void right (void)           //Left wheel forward, Right wheel backward
{   
  motion(0x0a);
}
     712:	08 95       	ret

00000714 <soft_right>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     714:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     716:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     718:	82 60       	ori	r24, 0x02	; 2
 PORTB = PortBRestore; 			// setting the command to the port
     71a:	88 bb       	out	0x18, r24	; 24
}

void soft_right(void)
{
	motion(0x02);
}
     71c:	08 95       	ret

0000071e <soft_left>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     71e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     720:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     722:	84 60       	ori	r24, 0x04	; 4
 PORTB = PortBRestore; 			// setting the command to the port
     724:	88 bb       	out	0x18, r24	; 24
}

void soft_left(void)
{
	motion(0x04);
}
     726:	08 95       	ret

00000728 <velocity>:
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     728:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor; 
     72a:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
     72c:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     72e:	68 bd       	out	0x28, r22	; 40
}
     730:	08 95       	ret

00000732 <follow>:
	return 0;
}

void follow()
{
	lcd_cursor(1,1);		
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
	lcd_string("Go Straight");
     73a:	89 e6       	ldi	r24, 0x69	; 105
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
	init_sensor_values();
     742:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     746:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     748:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     74a:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
     74c:	88 bb       	out	0x18, r24	; 24
	forward();
	int left,right;
	if(pow_diff < 0) velocity(max+pow_diff, max);
     74e:	80 91 cf 01 	lds	r24, 0x01CF
     752:	90 91 d0 01 	lds	r25, 0x01D0
     756:	20 91 9c 00 	lds	r18, 0x009C
     75a:	30 91 9d 00 	lds	r19, 0x009D
     75e:	97 ff       	sbrs	r25, 7
     760:	04 c0       	rjmp	.+8      	; 0x76a <follow+0x38>
     762:	82 0f       	add	r24, r18
     764:	93 1f       	adc	r25, r19
     766:	b9 01       	movw	r22, r18
     768:	04 c0       	rjmp	.+8      	; 0x772 <follow+0x40>
	else velocity(max, max-pow_diff);
     76a:	b9 01       	movw	r22, r18
     76c:	68 1b       	sub	r22, r24
     76e:	79 0b       	sbc	r23, r25
     770:	c9 01       	movw	r24, r18
     772:	0e 94 94 03 	call	0x728	; 0x728 <velocity>
			left=speed*0.6;
			right=(speed-delta);
		}
	}
	*/
	if((cline<thresh) && (lline<thresh) && (rline<thresh) ) 
     776:	20 91 9e 00 	lds	r18, 0x009E
     77a:	30 91 9f 00 	lds	r19, 0x009F
     77e:	80 91 ab 01 	lds	r24, 0x01AB
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	82 17       	cp	r24, r18
     786:	93 07       	cpc	r25, r19
     788:	dc f4       	brge	.+54     	; 0x7c0 <follow+0x8e>
     78a:	80 91 aa 01 	lds	r24, 0x01AA
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	82 17       	cp	r24, r18
     792:	93 07       	cpc	r25, r19
     794:	ac f4       	brge	.+42     	; 0x7c0 <follow+0x8e>
     796:	80 91 ac 01 	lds	r24, 0x01AC
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	82 17       	cp	r24, r18
     79e:	93 07       	cpc	r25, r19
     7a0:	7c f4       	brge	.+30     	; 0x7c0 <follow+0x8e>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     7a2:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     7a4:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     7a6:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
     7a8:	88 bb       	out	0x18, r24	; 24
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     7aa:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     7ac:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     7ae:	88 bb       	out	0x18, r24	; 24
		forward();
		left=0;
		right=0;
		stop();
		//buzzer_on();
		lcd_cursor(1,1);		
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
		lcd_string("Stop");
     7b8:	85 e7       	ldi	r24, 0x75	; 117
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
     7c0:	08 95       	ret

000007c2 <checkintersection>:



int checkintersection() 	//returns 1 if there is an intersection
{
	init_sensor_values();
     7c2:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
	if( cline>thresh && lline>thresh && rline >thresh ) //all on black
     7c6:	20 91 9e 00 	lds	r18, 0x009E
     7ca:	30 91 9f 00 	lds	r19, 0x009F
     7ce:	80 91 ab 01 	lds	r24, 0x01AB
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	28 17       	cp	r18, r24
     7d6:	39 07       	cpc	r19, r25
     7d8:	0c f0       	brlt	.+2      	; 0x7dc <checkintersection+0x1a>
     7da:	41 c0       	rjmp	.+130    	; 0x85e <checkintersection+0x9c>
     7dc:	80 91 aa 01 	lds	r24, 0x01AA
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	28 17       	cp	r18, r24
     7e4:	39 07       	cpc	r19, r25
     7e6:	0c f0       	brlt	.+2      	; 0x7ea <checkintersection+0x28>
     7e8:	3a c0       	rjmp	.+116    	; 0x85e <checkintersection+0x9c>
     7ea:	80 91 ac 01 	lds	r24, 0x01AC
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	28 17       	cp	r18, r24
     7f2:	39 07       	cpc	r19, r25
     7f4:	a4 f5       	brge	.+104    	; 0x85e <checkintersection+0x9c>
	{
		if(pow_diff < 0) velocity(max+pow_diff, max);
     7f6:	80 91 cf 01 	lds	r24, 0x01CF
     7fa:	90 91 d0 01 	lds	r25, 0x01D0
     7fe:	20 91 9c 00 	lds	r18, 0x009C
     802:	30 91 9d 00 	lds	r19, 0x009D
     806:	97 ff       	sbrs	r25, 7
     808:	04 c0       	rjmp	.+8      	; 0x812 <checkintersection+0x50>
     80a:	82 0f       	add	r24, r18
     80c:	93 1f       	adc	r25, r19
     80e:	b9 01       	movw	r22, r18
     810:	04 c0       	rjmp	.+8      	; 0x81a <checkintersection+0x58>
		else velocity(max, max-pow_diff);
     812:	b9 01       	movw	r22, r18
     814:	68 1b       	sub	r22, r24
     816:	79 0b       	sbc	r23, r25
     818:	c9 01       	movw	r24, r18
     81a:	0e 94 94 03 	call	0x728	; 0x728 <velocity>
     81e:	8c ef       	ldi	r24, 0xFC	; 252
     820:	93 e5       	ldi	r25, 0x53	; 83
     822:	29 e1       	ldi	r18, 0x19	; 25
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	f9 01       	movw	r30, r18
     828:	31 97       	sbiw	r30, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <checkintersection+0x66>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     82e:	d9 f7       	brne	.-10     	; 0x826 <checkintersection+0x64>
		_delay_ms(2150);
		lcd_cursor(1,1);		
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
		lcd_string("Intersection");
     838:	8a e7       	ldi	r24, 0x7A	; 122
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     840:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     842:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     844:	88 bb       	out	0x18, r24	; 24
     846:	80 e3       	ldi	r24, 0x30	; 48
     848:	95 e7       	ldi	r25, 0x75	; 117
     84a:	29 e1       	ldi	r18, 0x19	; 25
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	f9 01       	movw	r30, r18
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <checkintersection+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     854:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     856:	d9 f7       	brne	.-10     	; 0x84e <checkintersection+0x8c>
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	02 c0       	rjmp	.+4      	; 0x862 <checkintersection+0xa0>
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
		stop();
		_delay_ms(3000);
		return 1;
	}
	return 0;
}
     862:	c9 01       	movw	r24, r18
     864:	08 95       	ret

00000866 <take_turn>:
 lcd_print(row, coloumn, ADC_Value, 3);
}


void take_turn(int d)
{
     866:	af 92       	push	r10
     868:	bf 92       	push	r11
     86a:	cf 92       	push	r12
     86c:	df 92       	push	r13
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	6c 01       	movw	r12, r24
	int left1;
	int right1;
	int flag=0;
	while(1)
	{
		if(d==1) left();
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	c8 16       	cp	r12, r24
     880:	d1 04       	cpc	r13, r1
     882:	21 f4       	brne	.+8      	; 0x88c <take_turn+0x26>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     884:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     886:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     888:	85 60       	ori	r24, 0x05	; 5
     88a:	07 c0       	rjmp	.+14     	; 0x89a <take_turn+0x34>
		else if(d==2) right();
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	c8 16       	cp	r12, r24
     890:	d1 04       	cpc	r13, r1
     892:	21 f4       	brne	.+8      	; 0x89c <take_turn+0x36>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     894:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     896:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     898:	8a 60       	ori	r24, 0x0A	; 10
 PORTB = PortBRestore; 			// setting the command to the port
     89a:	88 bb       	out	0x18, r24	; 24
		init_sensor_values();	
     89c:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
		if(pow_diff < 0) velocity((max+pow_diff), max);
     8a0:	80 91 cf 01 	lds	r24, 0x01CF
     8a4:	90 91 d0 01 	lds	r25, 0x01D0
     8a8:	e0 91 9c 00 	lds	r30, 0x009C
     8ac:	f0 91 9d 00 	lds	r31, 0x009D
     8b0:	97 ff       	sbrs	r25, 7
     8b2:	04 c0       	rjmp	.+8      	; 0x8bc <take_turn+0x56>
     8b4:	8e 0f       	add	r24, r30
     8b6:	9f 1f       	adc	r25, r31
     8b8:	bf 01       	movw	r22, r30
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <take_turn+0x5e>
		else velocity(max, (max-pow_diff));	
     8bc:	bf 01       	movw	r22, r30
     8be:	68 1b       	sub	r22, r24
     8c0:	79 0b       	sbc	r23, r25
     8c2:	cf 01       	movw	r24, r30
     8c4:	0e 94 94 03 	call	0x728	; 0x728 <velocity>
		//velocity(left1,right1);
		//lcd_print(2,13,left1,2);
		//lcd_print(2,15,right1,2);
		
		
		if(cline<thresh && lline<thresh && rline<thresh)  //all on white
     8c8:	20 91 9e 00 	lds	r18, 0x009E
     8cc:	30 91 9f 00 	lds	r19, 0x009F
     8d0:	80 91 ab 01 	lds	r24, 0x01AB
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	82 17       	cp	r24, r18
     8d8:	93 07       	cpc	r25, r19
     8da:	84 f6       	brge	.-96     	; 0x87c <take_turn+0x16>
     8dc:	80 91 aa 01 	lds	r24, 0x01AA
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	82 17       	cp	r24, r18
     8e4:	93 07       	cpc	r25, r19
     8e6:	54 f6       	brge	.-108    	; 0x87c <take_turn+0x16>
     8e8:	80 91 ac 01 	lds	r24, 0x01AC
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	82 17       	cp	r24, r18
     8f0:	93 07       	cpc	r25, r19
     8f2:	24 f6       	brge	.-120    	; 0x87c <take_turn+0x16>
     8f4:	84 ef       	ldi	r24, 0xF4	; 244
     8f6:	9e e7       	ldi	r25, 0x7E	; 126
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <take_turn+0x92>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     8fc:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     8fe:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     900:	88 bb       	out	0x18, r24	; 24
     902:	84 ed       	ldi	r24, 0xD4	; 212
     904:	90 e3       	ldi	r25, 0x30	; 48
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <take_turn+0xa0>
     90a:	aa 24       	eor	r10, r10
     90c:	bb 24       	eor	r11, r11
			break;
		}
	}
	while(1)
	{
		if(d==1) soft_left();
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	c8 16       	cp	r12, r24
     912:	d1 04       	cpc	r13, r1
     914:	21 f4       	brne	.+8      	; 0x91e <take_turn+0xb8>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     916:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     918:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     91a:	84 60       	ori	r24, 0x04	; 4
     91c:	07 c0       	rjmp	.+14     	; 0x92c <take_turn+0xc6>
		else if(d==2) soft_right();
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	c8 16       	cp	r12, r24
     922:	d1 04       	cpc	r13, r1
     924:	21 f4       	brne	.+8      	; 0x92e <take_turn+0xc8>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     926:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     928:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     92a:	82 60       	ori	r24, 0x02	; 2
 PORTB = PortBRestore; 			// setting the command to the port
     92c:	88 bb       	out	0x18, r24	; 24
		init_sensor_values();
     92e:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
		if(pow_diff < 0) velocity((max+pow_diff)/2, max/2);
     932:	c0 91 cf 01 	lds	r28, 0x01CF
     936:	d0 91 d0 01 	lds	r29, 0x01D0
     93a:	e0 91 9c 00 	lds	r30, 0x009C
     93e:	f0 91 9d 00 	lds	r31, 0x009D
     942:	d7 ff       	sbrs	r29, 7
     944:	0a c0       	rjmp	.+20     	; 0x95a <take_turn+0xf4>
     946:	cf 01       	movw	r24, r30
     948:	8c 0f       	add	r24, r28
     94a:	9d 1f       	adc	r25, r29
     94c:	62 e0       	ldi	r22, 0x02	; 2
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	0e 94 1e 0c 	call	0x183c	; 0x183c <__divmodhi4>
     954:	9b 01       	movw	r18, r22
     956:	cf 01       	movw	r24, r30
     958:	09 c0       	rjmp	.+18     	; 0x96c <take_turn+0x106>
		else velocity(max/2, (max-pow_diff)/2);
     95a:	cf 01       	movw	r24, r30
     95c:	62 e0       	ldi	r22, 0x02	; 2
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	0e 94 1e 0c 	call	0x183c	; 0x183c <__divmodhi4>
     964:	9b 01       	movw	r18, r22
     966:	cf 01       	movw	r24, r30
     968:	8c 1b       	sub	r24, r28
     96a:	9d 0b       	sbc	r25, r29
     96c:	62 e0       	ldi	r22, 0x02	; 2
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	0e 94 1e 0c 	call	0x183c	; 0x183c <__divmodhi4>
     974:	c9 01       	movw	r24, r18
     976:	0e 94 94 03 	call	0x728	; 0x728 <velocity>
			right1=0;
		}
		velocity(left1,right1);
		lcd_print(2,13,left1,2);
		lcd_print(2,15,right1,2);		*/
		if(cline>thresh && lline>thresh*0.6 && d==1) flag=1;
     97a:	20 91 9e 00 	lds	r18, 0x009E
     97e:	30 91 9f 00 	lds	r19, 0x009F
     982:	80 91 ab 01 	lds	r24, 0x01AB
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	28 17       	cp	r18, r24
     98a:	39 07       	cpc	r19, r25
     98c:	54 f5       	brge	.+84     	; 0x9e2 <take_turn+0x17c>
     98e:	b9 01       	movw	r22, r18
     990:	88 27       	eor	r24, r24
     992:	77 fd       	sbrc	r23, 7
     994:	80 95       	com	r24
     996:	98 2f       	mov	r25, r24
     998:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__floatsisf>
     99c:	2a e9       	ldi	r18, 0x9A	; 154
     99e:	39 e9       	ldi	r19, 0x99	; 153
     9a0:	49 e1       	ldi	r20, 0x19	; 25
     9a2:	5f e3       	ldi	r21, 0x3F	; 63
     9a4:	0e 94 39 08 	call	0x1072	; 0x1072 <__mulsf3>
     9a8:	7b 01       	movw	r14, r22
     9aa:	8c 01       	movw	r16, r24
     9ac:	60 91 aa 01 	lds	r22, 0x01AA
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	88 27       	eor	r24, r24
     9b4:	77 fd       	sbrc	r23, 7
     9b6:	80 95       	com	r24
     9b8:	98 2f       	mov	r25, r24
     9ba:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__floatsisf>
     9be:	a8 01       	movw	r20, r16
     9c0:	97 01       	movw	r18, r14
     9c2:	0e 94 33 09 	call	0x1266	; 0x1266 <__gtsf2>
     9c6:	18 16       	cp	r1, r24
     9c8:	1c f5       	brge	.+70     	; 0xa10 <take_turn+0x1aa>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	c8 16       	cp	r12, r24
     9ce:	d1 04       	cpc	r13, r1
     9d0:	f9 f4       	brne	.+62     	; 0xa10 <take_turn+0x1aa>
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	a8 2e       	mov	r10, r24
     9d6:	b1 2c       	mov	r11, r1
     9d8:	1b c0       	rjmp	.+54     	; 0xa10 <take_turn+0x1aa>
		if(cline>thresh && rline>thresh*0.6 && d==2) flag=1;
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	c8 16       	cp	r12, r24
     9de:	d1 04       	cpc	r13, r1
     9e0:	29 f0       	breq	.+10     	; 0x9ec <take_turn+0x186>
		if(flag==1)
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	a8 16       	cp	r10, r24
     9e6:	b1 04       	cpc	r11, r1
     9e8:	09 f0       	breq	.+2      	; 0x9ec <take_turn+0x186>
     9ea:	91 cf       	rjmp	.-222    	; 0x90e <take_turn+0xa8>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     9ec:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     9ee:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     9f0:	88 bb       	out	0x18, r24	; 24
     9f2:	80 e1       	ldi	r24, 0x10	; 16
     9f4:	97 e2       	ldi	r25, 0x27	; 39
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <take_turn+0x190>
			stop();
			_delay_ms(40);
			break;
		}
	}
}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	df 90       	pop	r13
     a08:	cf 90       	pop	r12
     a0a:	bf 90       	pop	r11
     a0c:	af 90       	pop	r10
     a0e:	08 95       	ret
		}
		velocity(left1,right1);
		lcd_print(2,13,left1,2);
		lcd_print(2,15,right1,2);		*/
		if(cline>thresh && lline>thresh*0.6 && d==1) flag=1;
		if(cline>thresh && rline>thresh*0.6 && d==2) flag=1;
     a10:	60 91 ac 01 	lds	r22, 0x01AC
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	88 27       	eor	r24, r24
     a18:	77 fd       	sbrc	r23, 7
     a1a:	80 95       	com	r24
     a1c:	98 2f       	mov	r25, r24
     a1e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__floatsisf>
     a22:	a8 01       	movw	r20, r16
     a24:	97 01       	movw	r18, r14
     a26:	0e 94 33 09 	call	0x1266	; 0x1266 <__gtsf2>
     a2a:	18 16       	cp	r1, r24
     a2c:	b4 f2       	brlt	.-84     	; 0x9da <take_turn+0x174>
     a2e:	d9 cf       	rjmp	.-78     	; 0x9e2 <take_turn+0x17c>

00000a30 <turn_right>:
	lcd_string("Left");
	take_turn(1);
}
void turn_right()
{
	lcd_cursor(1,1);		
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
	lcd_string("Right");
     a38:	87 e8       	ldi	r24, 0x87	; 135
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
	take_turn(2);
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 33 04 	call	0x866	; 0x866 <take_turn>
}
     a48:	08 95       	ret

00000a4a <turn_left>:
		}
	}
}
void turn_left()
{
	lcd_cursor(1,1);		
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
	lcd_string("Left");
     a52:	8d e8       	ldi	r24, 0x8D	; 141
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
	take_turn(1);
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 33 04 	call	0x866	; 0x866 <take_turn>
}
     a62:	08 95       	ret

00000a64 <__vector_11>:
unsigned char chkid2 = '\0';
unsigned char mytemp;
const char myid = '1';
int recv_count=0;
SIGNAL(SIG_USART_RECV) 		// ISR for receive complete interrupt
{
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	2f 93       	push	r18
     a70:	8f 93       	push	r24
     a72:	9f 93       	push	r25
	//receiving protocol : d myid data --> 3chars sent by coordinator
	cli();
     a74:	f8 94       	cli
	mytemp = UDR ;
     a76:	2c b1       	in	r18, 0x0c	; 12
     a78:	20 93 be 01 	sts	0x01BE, r18
	if(recv_count==0) { chkid1=mytemp; recv_count++; }
     a7c:	80 91 bc 01 	lds	r24, 0x01BC
     a80:	90 91 bd 01 	lds	r25, 0x01BD
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	29 f4       	brne	.+10     	; 0xa92 <__vector_11+0x2e>
     a88:	20 93 ba 01 	sts	0x01BA, r18
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	07 c0       	rjmp	.+14     	; 0xaa0 <__vector_11+0x3c>
	else if (recv_count==1) { chkid2=mytemp; recv_count++; }
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	91 05       	cpc	r25, r1
     a96:	49 f4       	brne	.+18     	; 0xaaa <__vector_11+0x46>
     a98:	20 93 bb 01 	sts	0x01BB, r18
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	90 93 bd 01 	sts	0x01BD, r25
     aa4:	80 93 bc 01 	sts	0x01BC, r24
     aa8:	14 c0       	rjmp	.+40     	; 0xad2 <__vector_11+0x6e>
	else if(recv_count==2)
     aaa:	02 97       	sbiw	r24, 0x02	; 2
     aac:	91 f4       	brne	.+36     	; 0xad2 <__vector_11+0x6e>
	{
		if(chkid1 == 'd' && chkid2 == myid)
     aae:	80 91 ba 01 	lds	r24, 0x01BA
     ab2:	84 36       	cpi	r24, 0x64	; 100
     ab4:	31 f4       	brne	.+12     	; 0xac2 <__vector_11+0x5e>
     ab6:	80 91 bb 01 	lds	r24, 0x01BB
     aba:	81 33       	cpi	r24, 0x31	; 49
     abc:	11 f4       	brne	.+4      	; 0xac2 <__vector_11+0x5e>
		{
			data=mytemp;
     abe:	20 93 c8 01 	sts	0x01C8, r18
		}
		chkid1='\0';
     ac2:	10 92 ba 01 	sts	0x01BA, r1
		chkid2='\0';
     ac6:	10 92 bb 01 	sts	0x01BB, r1
		recv_count=0;
     aca:	10 92 bd 01 	sts	0x01BD, r1
     ace:	10 92 bc 01 	sts	0x01BC, r1
	}
	
	sei();
     ad2:	78 94       	sei
}
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	2f 91       	pop	r18
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <xbee_sendString>:

void xbee_sendString(char str[],int strlngt)
{	
     ae4:	ac 01       	movw	r20, r24
	cli();
     ae6:	f8 94       	cli
	int i;
	UDR='#';
     ae8:	83 e2       	ldi	r24, 0x23	; 35
     aea:	8c b9       	out	0x0c, r24	; 12
     aec:	e4 ed       	ldi	r30, 0xD4	; 212
     aee:	f0 e3       	ldi	r31, 0x30	; 48
     af0:	31 97       	sbiw	r30, 0x01	; 1
     af2:	f1 f7       	brne	.-4      	; 0xaf0 <xbee_sendString+0xc>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(50);
	for(i=0;i<strlngt;i++)
	{
		UDR=str[i];
     af8:	a4 ed       	ldi	r26, 0xD4	; 212
     afa:	b0 e3       	ldi	r27, 0x30	; 48
     afc:	0a c0       	rjmp	.+20     	; 0xb12 <xbee_sendString+0x2e>
     afe:	fa 01       	movw	r30, r20
     b00:	e2 0f       	add	r30, r18
     b02:	f3 1f       	adc	r31, r19
     b04:	80 81       	ld	r24, Z
     b06:	8c b9       	out	0x0c, r24	; 12
     b08:	fd 01       	movw	r30, r26
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <xbee_sendString+0x26>
{	
	cli();
	int i;
	UDR='#';
	_delay_ms(50);
	for(i=0;i<strlngt;i++)
     b0e:	2f 5f       	subi	r18, 0xFF	; 255
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	26 17       	cp	r18, r22
     b14:	37 07       	cpc	r19, r23
     b16:	9c f3       	brlt	.-26     	; 0xafe <xbee_sendString+0x1a>
	{
		UDR=str[i];
		_delay_ms(50);
	}
	UDR='#';
     b18:	83 e2       	ldi	r24, 0x23	; 35
     b1a:	8c b9       	out	0x0c, r24	; 12
     b1c:	84 ed       	ldi	r24, 0xD4	; 212
     b1e:	90 e3       	ldi	r25, 0x30	; 48
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	f1 f7       	brne	.-4      	; 0xb20 <xbee_sendString+0x3c>
	_delay_ms(50);
	sei();
     b24:	78 94       	sei
}
     b26:	08 95       	ret

00000b28 <comintersection>:

//protocol : dbot :#d srcid/destid.data#
void comintersection()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <comintersection+0x6>
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <comintersection+0x8>
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
	char str[4];
	str[0] = 'd';
	str[1] = myid;
     b34:	81 e3       	ldi	r24, 0x31	; 49
     b36:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '.';
     b38:	8e e2       	ldi	r24, 0x2E	; 46
     b3a:	8b 83       	std	Y+3, r24	; 0x03
	sei();
}

void xbee_sendString(char str[],int strlngt)
{	
	cli();
     b3c:	f8 94       	cli
	int i;
	UDR='#';
     b3e:	93 e2       	ldi	r25, 0x23	; 35
     b40:	9c b9       	out	0x0c, r25	; 12
     b42:	24 ed       	ldi	r18, 0xD4	; 212
     b44:	30 e3       	ldi	r19, 0x30	; 48
     b46:	f9 01       	movw	r30, r18
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <comintersection+0x20>
	_delay_ms(50);
	for(i=0;i<strlngt;i++)
	{
		UDR=str[i];
     b4c:	84 e6       	ldi	r24, 0x64	; 100
     b4e:	8c b9       	out	0x0c, r24	; 12
     b50:	f9 01       	movw	r30, r18
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	f1 f7       	brne	.-4      	; 0xb52 <comintersection+0x2a>
     b56:	8a 81       	ldd	r24, Y+2	; 0x02
     b58:	8c b9       	out	0x0c, r24	; 12
     b5a:	f9 01       	movw	r30, r18
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <comintersection+0x34>
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	8c b9       	out	0x0c, r24	; 12
     b64:	f9 01       	movw	r30, r18
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <comintersection+0x3e>
		_delay_ms(50);
	}
	UDR='#';
     b6a:	9c b9       	out	0x0c, r25	; 12
     b6c:	c9 01       	movw	r24, r18
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <comintersection+0x46>
	_delay_ms(50);
	sei();
     b72:	78 94       	sei
	str[0] = 'd';
	str[1] = myid;
	str[2] = '.';
	str[3] = '\0';
	xbee_sendString(str,3);
}
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	08 95       	ret

00000b82 <move_bot>:
#include "motion.h"
#include "signals.h"
	
int move_bot()
{
	init_sensor_values();
     b82:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
	while(checkobstacle()==0) {} 
     b86:	0e 94 48 03 	call	0x690	; 0x690 <checkobstacle>
     b8a:	89 2b       	or	r24, r25
     b8c:	e1 f3       	breq	.-8      	; 0xb86 <move_bot+0x4>
	if(checkintersection() == 1)
     b8e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <checkintersection>
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	89 f4       	brne	.+34     	; 0xbb8 <move_bot+0x36>
	{	
		//communicate with coordinator
		comintersection();
     b96:	0e 94 94 05 	call	0xb28	; 0xb28 <comintersection>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     b9a:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     b9c:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     b9e:	88 bb       	out	0x18, r24	; 24
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	97 e2       	ldi	r25, 0x27	; 39
     ba4:	29 e1       	ldi	r18, 0x19	; 25
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	f9 01       	movw	r30, r18
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <move_bot+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb0:	d9 f7       	brne	.-10     	; 0xba8 <move_bot+0x26>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <move_bot+0x3e>
		_delay_ms(1000);
		return 0;
	}
	else 
	{
		follow();
     bb8:	0e 94 99 03 	call	0x732	; 0x732 <follow>
     bbc:	21 e0       	ldi	r18, 0x01	; 1
     bbe:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	}
}
     bc0:	c9 01       	movw	r24, r18
     bc2:	08 95       	ret

00000bc4 <run>:

void run(void)
{
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
	data='w';
     bce:	87 e7       	ldi	r24, 0x77	; 119
     bd0:	80 93 c8 01 	sts	0x01C8, r24
     bd4:	09 e1       	ldi	r16, 0x19	; 25
     bd6:	10 e0       	ldi	r17, 0x00	; 0
			continue;
		
		}
		if(data == 'o') // origin
		{
			data='w';
     bd8:	c8 ea       	ldi	r28, 0xA8	; 168
     bda:	d1 e6       	ldi	r29, 0x61	; 97
     bdc:	97 e7       	ldi	r25, 0x77	; 119
     bde:	f9 2e       	mov	r15, r25
     be0:	08 c0       	rjmp	.+16     	; 0xbf2 <run+0x2e>
	data='w';
	while(1)
	{
		while(data == 'w') //waiting for signal
		{
			lcd_cursor(1,1);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
			lcd_string("w");
     bea:	82 e9       	ldi	r24, 0x92	; 146
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
void run(void)
{
	data='w';
	while(1)
	{
		while(data == 'w') //waiting for signal
     bf2:	80 91 c8 01 	lds	r24, 0x01C8
     bf6:	87 37       	cpi	r24, 0x77	; 119
     bf8:	a1 f3       	breq	.-24     	; 0xbe2 <run+0x1e>
		{
			lcd_cursor(1,1);
			lcd_string("w");
		}
		lcd_cursor(1,1);
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
		lcd_string(data);
     c02:	80 91 c8 01 	lds	r24, 0x01C8
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <run+0x68>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     c0e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     c10:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     c12:	88 bb       	out	0x18, r24	; 24
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	9f ef       	ldi	r25, 0xFF	; 255
     c18:	f8 01       	movw	r30, r16
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <run+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c20:	d9 f7       	brne	.-10     	; 0xc18 <run+0x54>
		while(data == '\0' )
		{
			stop();
			_delay_ms(500000);
			comintersection();
     c22:	0e 94 94 05 	call	0xb28	; 0xb28 <comintersection>
     c26:	ce 01       	movw	r24, r28
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <run+0x64>
			lcd_cursor(1,1);
			lcd_string("w");
		}
		lcd_cursor(1,1);
		lcd_string(data);
		while(data == '\0' )
     c2c:	80 91 c8 01 	lds	r24, 0x01C8
     c30:	88 23       	and	r24, r24
     c32:	69 f3       	breq	.-38     	; 0xc0e <run+0x4a>
			stop();
			_delay_ms(500000);
			comintersection();
			_delay_ms(100);
		}
		if(data=='f') // forward
     c34:	86 36       	cpi	r24, 0x66	; 102
     c36:	11 f4       	brne	.+4      	; 0xc3c <run+0x78>
		{
			data='\0';
     c38:	10 92 c8 01 	sts	0x01C8, r1
		}
		if(data=='r') // right	
     c3c:	80 91 c8 01 	lds	r24, 0x01C8
     c40:	82 37       	cpi	r24, 0x72	; 114
     c42:	21 f4       	brne	.+8      	; 0xc4c <run+0x88>
		{
			data='\0';
     c44:	10 92 c8 01 	sts	0x01C8, r1
			turn_right();
     c48:	0e 94 18 05 	call	0xa30	; 0xa30 <turn_right>
		}
		if(data=='l') // left
     c4c:	80 91 c8 01 	lds	r24, 0x01C8
     c50:	8c 36       	cpi	r24, 0x6C	; 108
     c52:	21 f4       	brne	.+8      	; 0xc5c <run+0x98>
		{
			data='\0';
     c54:	10 92 c8 01 	sts	0x01C8, r1
			turn_left();
     c58:	0e 94 25 05 	call	0xa4a	; 0xa4a <turn_left>
		} 
		if(data == 'h') // halt
     c5c:	80 91 c8 01 	lds	r24, 0x01C8
     c60:	88 36       	cpi	r24, 0x68	; 104
     c62:	19 f4       	brne	.+6      	; 0xc6a <run+0xa6>
		{
			data='\0';
     c64:	10 92 c8 01 	sts	0x01C8, r1
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <run+0xae>
			stop();
			_delay_ms(100);
			continue;
		
		}
		if(data == 'o') // origin
     c6a:	8f 36       	cpi	r24, 0x6F	; 111
     c6c:	49 f4       	brne	.+18     	; 0xc80 <run+0xbc>
		{
			data='w';
     c6e:	f0 92 c8 01 	sts	0x01C8, r15
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     c72:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     c74:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     c76:	88 bb       	out	0x18, r24	; 24
     c78:	ce 01       	movw	r24, r28
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <run+0xb6>
     c7e:	b9 cf       	rjmp	.-142    	; 0xbf2 <run+0x2e>
			stop();
			_delay_ms(100);
			continue;
		}
		while(move_bot() == 1) { }
     c80:	0e 94 c1 05 	call	0xb82	; 0xb82 <move_bot>
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	e1 f3       	breq	.-8      	; 0xc80 <run+0xbc>
     c88:	b4 cf       	rjmp	.-152    	; 0xbf2 <run+0x2e>

00000c8a <checkfollow>:
	}
}

void checkfollow()
{
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	c0 e0       	ldi	r28, 0x00	; 0
     c90:	d0 e0       	ldi	r29, 0x00	; 0
	int temp=0;
	while(1)
	{
		init_sensor_values();
     c92:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
		//code to check line following:
	 	while(checkobstacle()==0) 
     c96:	0e 94 48 03 	call	0x690	; 0x690 <checkobstacle>
     c9a:	89 2b       	or	r24, r25
     c9c:	e1 f3       	breq	.-8      	; 0xc96 <checkfollow+0xc>
		{}
	 
		if(checkintersection() == 1)
     c9e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <checkintersection>
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	09 f5       	brne	.+66     	; 0xce8 <checkfollow+0x5e>
		{
			temp++;
     ca6:	21 96       	adiw	r28, 0x01	; 1
			if(temp==1 || temp > 7) { turn_left(); }
     ca8:	c1 30       	cpi	r28, 0x01	; 1
     caa:	d1 05       	cpc	r29, r1
     cac:	19 f0       	breq	.+6      	; 0xcb4 <checkfollow+0x2a>
     cae:	c8 30       	cpi	r28, 0x08	; 8
     cb0:	d1 05       	cpc	r29, r1
     cb2:	14 f0       	brlt	.+4      	; 0xcb8 <checkfollow+0x2e>
     cb4:	0e 94 25 05 	call	0xa4a	; 0xa4a <turn_left>
			if(temp==2 || temp ==3 || temp == 5 || temp==6) { turn_right();  }
     cb8:	ce 01       	movw	r24, r28
     cba:	02 97       	sbiw	r24, 0x02	; 2
     cbc:	02 97       	sbiw	r24, 0x02	; 2
     cbe:	30 f0       	brcs	.+12     	; 0xccc <checkfollow+0x42>
     cc0:	c5 30       	cpi	r28, 0x05	; 5
     cc2:	d1 05       	cpc	r29, r1
     cc4:	19 f0       	breq	.+6      	; 0xccc <checkfollow+0x42>
     cc6:	c6 30       	cpi	r28, 0x06	; 6
     cc8:	d1 05       	cpc	r29, r1
     cca:	11 f4       	brne	.+4      	; 0xcd0 <checkfollow+0x46>
     ccc:	0e 94 18 05 	call	0xa30	; 0xa30 <turn_right>
			if(temp == 4 || temp==7) { follow(); }
     cd0:	c4 30       	cpi	r28, 0x04	; 4
     cd2:	d1 05       	cpc	r29, r1
     cd4:	19 f0       	breq	.+6      	; 0xcdc <checkfollow+0x52>
     cd6:	c7 30       	cpi	r28, 0x07	; 7
     cd8:	d1 05       	cpc	r29, r1
     cda:	11 f4       	brne	.+4      	; 0xce0 <checkfollow+0x56>
     cdc:	0e 94 99 03 	call	0x732	; 0x732 <follow>
			if(temp ==10 ) temp=0;
     ce0:	ca 30       	cpi	r28, 0x0A	; 10
     ce2:	d1 05       	cpc	r29, r1
     ce4:	b1 f6       	brne	.-84     	; 0xc92 <checkfollow+0x8>
     ce6:	d3 cf       	rjmp	.-90     	; 0xc8e <checkfollow+0x4>
		}
		else 
		{
			follow();
     ce8:	0e 94 99 03 	call	0x732	; 0x732 <follow>
     cec:	d2 cf       	rjmp	.-92     	; 0xc92 <checkfollow+0x8>

00000cee <checkstraight>:

void checkstraight()
{
	while(1)
	{
		follow();
     cee:	0e 94 99 03 	call	0x732	; 0x732 <follow>
     cf2:	fd cf       	rjmp	.-6      	; 0xcee <checkstraight>

00000cf4 <checkxbee>:
	}
}

void checkxbee()
{
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	c9 e1       	ldi	r28, 0x19	; 25
     cfa:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		
		comintersection();
     cfc:	0e 94 94 05 	call	0xb28	; 0xb28 <comintersection>
     d00:	88 e9       	ldi	r24, 0x98	; 152
     d02:	9a e3       	ldi	r25, 0x3A	; 58
     d04:	fe 01       	movw	r30, r28
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <checkxbee+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0c:	d9 f7       	brne	.-10     	; 0xd04 <checkxbee+0x10>
     d0e:	f6 cf       	rjmp	.-20     	; 0xcfc <checkxbee+0x8>

00000d10 <main>:

//Main Function
int main(void)
{
 
 init_devices();
     d10:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <init_devices>

 
 //checkstraight();
 run();
     d14:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <run>
 //checkfollow();
 //checkxbee();
}
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	08 95       	ret

00000d1e <_fpadd_parts>:
     d1e:	a0 e0       	ldi	r26, 0x00	; 0
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e9       	ldi	r30, 0x95	; 149
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__prologue_saves__>
     d2a:	dc 01       	movw	r26, r24
     d2c:	2b 01       	movw	r4, r22
     d2e:	fa 01       	movw	r30, r20
     d30:	9c 91       	ld	r25, X
     d32:	92 30       	cpi	r25, 0x02	; 2
     d34:	08 f4       	brcc	.+2      	; 0xd38 <_fpadd_parts+0x1a>
     d36:	39 c1       	rjmp	.+626    	; 0xfaa <_fpadd_parts+0x28c>
     d38:	eb 01       	movw	r28, r22
     d3a:	88 81       	ld	r24, Y
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <_fpadd_parts+0x24>
     d40:	33 c1       	rjmp	.+614    	; 0xfa8 <_fpadd_parts+0x28a>
     d42:	94 30       	cpi	r25, 0x04	; 4
     d44:	69 f4       	brne	.+26     	; 0xd60 <_fpadd_parts+0x42>
     d46:	84 30       	cpi	r24, 0x04	; 4
     d48:	09 f0       	breq	.+2      	; 0xd4c <_fpadd_parts+0x2e>
     d4a:	2f c1       	rjmp	.+606    	; 0xfaa <_fpadd_parts+0x28c>
     d4c:	11 96       	adiw	r26, 0x01	; 1
     d4e:	9c 91       	ld	r25, X
     d50:	11 97       	sbiw	r26, 0x01	; 1
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	98 17       	cp	r25, r24
     d56:	09 f4       	brne	.+2      	; 0xd5a <_fpadd_parts+0x3c>
     d58:	28 c1       	rjmp	.+592    	; 0xfaa <_fpadd_parts+0x28c>
     d5a:	a1 ea       	ldi	r26, 0xA1	; 161
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	25 c1       	rjmp	.+586    	; 0xfaa <_fpadd_parts+0x28c>
     d60:	84 30       	cpi	r24, 0x04	; 4
     d62:	09 f4       	brne	.+2      	; 0xd66 <_fpadd_parts+0x48>
     d64:	21 c1       	rjmp	.+578    	; 0xfa8 <_fpadd_parts+0x28a>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	a9 f4       	brne	.+42     	; 0xd94 <_fpadd_parts+0x76>
     d6a:	92 30       	cpi	r25, 0x02	; 2
     d6c:	09 f0       	breq	.+2      	; 0xd70 <_fpadd_parts+0x52>
     d6e:	1d c1       	rjmp	.+570    	; 0xfaa <_fpadd_parts+0x28c>
     d70:	9a 01       	movw	r18, r20
     d72:	ad 01       	movw	r20, r26
     d74:	88 e0       	ldi	r24, 0x08	; 8
     d76:	ea 01       	movw	r28, r20
     d78:	09 90       	ld	r0, Y+
     d7a:	ae 01       	movw	r20, r28
     d7c:	e9 01       	movw	r28, r18
     d7e:	09 92       	st	Y+, r0
     d80:	9e 01       	movw	r18, r28
     d82:	81 50       	subi	r24, 0x01	; 1
     d84:	c1 f7       	brne	.-16     	; 0xd76 <_fpadd_parts+0x58>
     d86:	e2 01       	movw	r28, r4
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	11 96       	adiw	r26, 0x01	; 1
     d8c:	9c 91       	ld	r25, X
     d8e:	89 23       	and	r24, r25
     d90:	81 83       	std	Z+1, r24	; 0x01
     d92:	08 c1       	rjmp	.+528    	; 0xfa4 <_fpadd_parts+0x286>
     d94:	92 30       	cpi	r25, 0x02	; 2
     d96:	09 f4       	brne	.+2      	; 0xd9a <_fpadd_parts+0x7c>
     d98:	07 c1       	rjmp	.+526    	; 0xfa8 <_fpadd_parts+0x28a>
     d9a:	12 96       	adiw	r26, 0x02	; 2
     d9c:	2d 90       	ld	r2, X+
     d9e:	3c 90       	ld	r3, X
     da0:	13 97       	sbiw	r26, 0x03	; 3
     da2:	eb 01       	movw	r28, r22
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	9b 81       	ldd	r25, Y+3	; 0x03
     da8:	14 96       	adiw	r26, 0x04	; 4
     daa:	ad 90       	ld	r10, X+
     dac:	bd 90       	ld	r11, X+
     dae:	cd 90       	ld	r12, X+
     db0:	dc 90       	ld	r13, X
     db2:	17 97       	sbiw	r26, 0x07	; 7
     db4:	ec 80       	ldd	r14, Y+4	; 0x04
     db6:	fd 80       	ldd	r15, Y+5	; 0x05
     db8:	0e 81       	ldd	r16, Y+6	; 0x06
     dba:	1f 81       	ldd	r17, Y+7	; 0x07
     dbc:	91 01       	movw	r18, r2
     dbe:	28 1b       	sub	r18, r24
     dc0:	39 0b       	sbc	r19, r25
     dc2:	b9 01       	movw	r22, r18
     dc4:	37 ff       	sbrs	r19, 7
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <_fpadd_parts+0xb2>
     dc8:	66 27       	eor	r22, r22
     dca:	77 27       	eor	r23, r23
     dcc:	62 1b       	sub	r22, r18
     dce:	73 0b       	sbc	r23, r19
     dd0:	60 32       	cpi	r22, 0x20	; 32
     dd2:	71 05       	cpc	r23, r1
     dd4:	0c f0       	brlt	.+2      	; 0xdd8 <_fpadd_parts+0xba>
     dd6:	61 c0       	rjmp	.+194    	; 0xe9a <_fpadd_parts+0x17c>
     dd8:	12 16       	cp	r1, r18
     dda:	13 06       	cpc	r1, r19
     ddc:	6c f5       	brge	.+90     	; 0xe38 <_fpadd_parts+0x11a>
     dde:	37 01       	movw	r6, r14
     de0:	48 01       	movw	r8, r16
     de2:	06 2e       	mov	r0, r22
     de4:	04 c0       	rjmp	.+8      	; 0xdee <_fpadd_parts+0xd0>
     de6:	96 94       	lsr	r9
     de8:	87 94       	ror	r8
     dea:	77 94       	ror	r7
     dec:	67 94       	ror	r6
     dee:	0a 94       	dec	r0
     df0:	d2 f7       	brpl	.-12     	; 0xde6 <_fpadd_parts+0xc8>
     df2:	21 e0       	ldi	r18, 0x01	; 1
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <_fpadd_parts+0xe6>
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d2 f7       	brpl	.-12     	; 0xdfc <_fpadd_parts+0xde>
     e08:	21 50       	subi	r18, 0x01	; 1
     e0a:	30 40       	sbci	r19, 0x00	; 0
     e0c:	40 40       	sbci	r20, 0x00	; 0
     e0e:	50 40       	sbci	r21, 0x00	; 0
     e10:	2e 21       	and	r18, r14
     e12:	3f 21       	and	r19, r15
     e14:	40 23       	and	r20, r16
     e16:	51 23       	and	r21, r17
     e18:	21 15       	cp	r18, r1
     e1a:	31 05       	cpc	r19, r1
     e1c:	41 05       	cpc	r20, r1
     e1e:	51 05       	cpc	r21, r1
     e20:	21 f0       	breq	.+8      	; 0xe2a <_fpadd_parts+0x10c>
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	79 01       	movw	r14, r18
     e2c:	8a 01       	movw	r16, r20
     e2e:	e6 28       	or	r14, r6
     e30:	f7 28       	or	r15, r7
     e32:	08 29       	or	r16, r8
     e34:	19 29       	or	r17, r9
     e36:	3c c0       	rjmp	.+120    	; 0xeb0 <_fpadd_parts+0x192>
     e38:	23 2b       	or	r18, r19
     e3a:	d1 f1       	breq	.+116    	; 0xeb0 <_fpadd_parts+0x192>
     e3c:	26 0e       	add	r2, r22
     e3e:	37 1e       	adc	r3, r23
     e40:	35 01       	movw	r6, r10
     e42:	46 01       	movw	r8, r12
     e44:	06 2e       	mov	r0, r22
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <_fpadd_parts+0x132>
     e48:	96 94       	lsr	r9
     e4a:	87 94       	ror	r8
     e4c:	77 94       	ror	r7
     e4e:	67 94       	ror	r6
     e50:	0a 94       	dec	r0
     e52:	d2 f7       	brpl	.-12     	; 0xe48 <_fpadd_parts+0x12a>
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <_fpadd_parts+0x148>
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	44 1f       	adc	r20, r20
     e64:	55 1f       	adc	r21, r21
     e66:	6a 95       	dec	r22
     e68:	d2 f7       	brpl	.-12     	; 0xe5e <_fpadd_parts+0x140>
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	40 40       	sbci	r20, 0x00	; 0
     e70:	50 40       	sbci	r21, 0x00	; 0
     e72:	2a 21       	and	r18, r10
     e74:	3b 21       	and	r19, r11
     e76:	4c 21       	and	r20, r12
     e78:	5d 21       	and	r21, r13
     e7a:	21 15       	cp	r18, r1
     e7c:	31 05       	cpc	r19, r1
     e7e:	41 05       	cpc	r20, r1
     e80:	51 05       	cpc	r21, r1
     e82:	21 f0       	breq	.+8      	; 0xe8c <_fpadd_parts+0x16e>
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	59 01       	movw	r10, r18
     e8e:	6a 01       	movw	r12, r20
     e90:	a6 28       	or	r10, r6
     e92:	b7 28       	or	r11, r7
     e94:	c8 28       	or	r12, r8
     e96:	d9 28       	or	r13, r9
     e98:	0b c0       	rjmp	.+22     	; 0xeb0 <_fpadd_parts+0x192>
     e9a:	82 15       	cp	r24, r2
     e9c:	93 05       	cpc	r25, r3
     e9e:	2c f0       	brlt	.+10     	; 0xeaa <_fpadd_parts+0x18c>
     ea0:	1c 01       	movw	r2, r24
     ea2:	aa 24       	eor	r10, r10
     ea4:	bb 24       	eor	r11, r11
     ea6:	65 01       	movw	r12, r10
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <_fpadd_parts+0x192>
     eaa:	ee 24       	eor	r14, r14
     eac:	ff 24       	eor	r15, r15
     eae:	87 01       	movw	r16, r14
     eb0:	11 96       	adiw	r26, 0x01	; 1
     eb2:	9c 91       	ld	r25, X
     eb4:	d2 01       	movw	r26, r4
     eb6:	11 96       	adiw	r26, 0x01	; 1
     eb8:	8c 91       	ld	r24, X
     eba:	98 17       	cp	r25, r24
     ebc:	09 f4       	brne	.+2      	; 0xec0 <_fpadd_parts+0x1a2>
     ebe:	45 c0       	rjmp	.+138    	; 0xf4a <_fpadd_parts+0x22c>
     ec0:	99 23       	and	r25, r25
     ec2:	39 f0       	breq	.+14     	; 0xed2 <_fpadd_parts+0x1b4>
     ec4:	a8 01       	movw	r20, r16
     ec6:	97 01       	movw	r18, r14
     ec8:	2a 19       	sub	r18, r10
     eca:	3b 09       	sbc	r19, r11
     ecc:	4c 09       	sbc	r20, r12
     ece:	5d 09       	sbc	r21, r13
     ed0:	06 c0       	rjmp	.+12     	; 0xede <_fpadd_parts+0x1c0>
     ed2:	a6 01       	movw	r20, r12
     ed4:	95 01       	movw	r18, r10
     ed6:	2e 19       	sub	r18, r14
     ed8:	3f 09       	sbc	r19, r15
     eda:	40 0b       	sbc	r20, r16
     edc:	51 0b       	sbc	r21, r17
     ede:	57 fd       	sbrc	r21, 7
     ee0:	08 c0       	rjmp	.+16     	; 0xef2 <_fpadd_parts+0x1d4>
     ee2:	11 82       	std	Z+1, r1	; 0x01
     ee4:	33 82       	std	Z+3, r3	; 0x03
     ee6:	22 82       	std	Z+2, r2	; 0x02
     ee8:	24 83       	std	Z+4, r18	; 0x04
     eea:	35 83       	std	Z+5, r19	; 0x05
     eec:	46 83       	std	Z+6, r20	; 0x06
     eee:	57 83       	std	Z+7, r21	; 0x07
     ef0:	1d c0       	rjmp	.+58     	; 0xf2c <_fpadd_parts+0x20e>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	81 83       	std	Z+1, r24	; 0x01
     ef6:	33 82       	std	Z+3, r3	; 0x03
     ef8:	22 82       	std	Z+2, r2	; 0x02
     efa:	88 27       	eor	r24, r24
     efc:	99 27       	eor	r25, r25
     efe:	dc 01       	movw	r26, r24
     f00:	82 1b       	sub	r24, r18
     f02:	93 0b       	sbc	r25, r19
     f04:	a4 0b       	sbc	r26, r20
     f06:	b5 0b       	sbc	r27, r21
     f08:	84 83       	std	Z+4, r24	; 0x04
     f0a:	95 83       	std	Z+5, r25	; 0x05
     f0c:	a6 83       	std	Z+6, r26	; 0x06
     f0e:	b7 83       	std	Z+7, r27	; 0x07
     f10:	0d c0       	rjmp	.+26     	; 0xf2c <_fpadd_parts+0x20e>
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	44 1f       	adc	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	24 83       	std	Z+4, r18	; 0x04
     f1c:	35 83       	std	Z+5, r19	; 0x05
     f1e:	46 83       	std	Z+6, r20	; 0x06
     f20:	57 83       	std	Z+7, r21	; 0x07
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	93 81       	ldd	r25, Z+3	; 0x03
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	93 83       	std	Z+3, r25	; 0x03
     f2a:	82 83       	std	Z+2, r24	; 0x02
     f2c:	24 81       	ldd	r18, Z+4	; 0x04
     f2e:	35 81       	ldd	r19, Z+5	; 0x05
     f30:	46 81       	ldd	r20, Z+6	; 0x06
     f32:	57 81       	ldd	r21, Z+7	; 0x07
     f34:	da 01       	movw	r26, r20
     f36:	c9 01       	movw	r24, r18
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	a1 09       	sbc	r26, r1
     f3c:	b1 09       	sbc	r27, r1
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	af 4f       	sbci	r26, 0xFF	; 255
     f44:	bf 43       	sbci	r27, 0x3F	; 63
     f46:	28 f3       	brcs	.-54     	; 0xf12 <_fpadd_parts+0x1f4>
     f48:	0b c0       	rjmp	.+22     	; 0xf60 <_fpadd_parts+0x242>
     f4a:	91 83       	std	Z+1, r25	; 0x01
     f4c:	33 82       	std	Z+3, r3	; 0x03
     f4e:	22 82       	std	Z+2, r2	; 0x02
     f50:	ea 0c       	add	r14, r10
     f52:	fb 1c       	adc	r15, r11
     f54:	0c 1d       	adc	r16, r12
     f56:	1d 1d       	adc	r17, r13
     f58:	e4 82       	std	Z+4, r14	; 0x04
     f5a:	f5 82       	std	Z+5, r15	; 0x05
     f5c:	06 83       	std	Z+6, r16	; 0x06
     f5e:	17 83       	std	Z+7, r17	; 0x07
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	80 83       	st	Z, r24
     f64:	24 81       	ldd	r18, Z+4	; 0x04
     f66:	35 81       	ldd	r19, Z+5	; 0x05
     f68:	46 81       	ldd	r20, Z+6	; 0x06
     f6a:	57 81       	ldd	r21, Z+7	; 0x07
     f6c:	57 ff       	sbrs	r21, 7
     f6e:	1a c0       	rjmp	.+52     	; 0xfa4 <_fpadd_parts+0x286>
     f70:	c9 01       	movw	r24, r18
     f72:	aa 27       	eor	r26, r26
     f74:	97 fd       	sbrc	r25, 7
     f76:	a0 95       	com	r26
     f78:	ba 2f       	mov	r27, r26
     f7a:	81 70       	andi	r24, 0x01	; 1
     f7c:	90 70       	andi	r25, 0x00	; 0
     f7e:	a0 70       	andi	r26, 0x00	; 0
     f80:	b0 70       	andi	r27, 0x00	; 0
     f82:	56 95       	lsr	r21
     f84:	47 95       	ror	r20
     f86:	37 95       	ror	r19
     f88:	27 95       	ror	r18
     f8a:	82 2b       	or	r24, r18
     f8c:	93 2b       	or	r25, r19
     f8e:	a4 2b       	or	r26, r20
     f90:	b5 2b       	or	r27, r21
     f92:	84 83       	std	Z+4, r24	; 0x04
     f94:	95 83       	std	Z+5, r25	; 0x05
     f96:	a6 83       	std	Z+6, r26	; 0x06
     f98:	b7 83       	std	Z+7, r27	; 0x07
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	93 83       	std	Z+3, r25	; 0x03
     fa2:	82 83       	std	Z+2, r24	; 0x02
     fa4:	df 01       	movw	r26, r30
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <_fpadd_parts+0x28c>
     fa8:	d2 01       	movw	r26, r4
     faa:	cd 01       	movw	r24, r26
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	e2 e1       	ldi	r30, 0x12	; 18
     fb2:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__epilogue_restores__>

00000fb6 <__subsf3>:
     fb6:	a0 e2       	ldi	r26, 0x20	; 32
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e1 ee       	ldi	r30, 0xE1	; 225
     fbc:	f7 e0       	ldi	r31, 0x07	; 7
     fbe:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__prologue_saves__+0x18>
     fc2:	69 83       	std	Y+1, r22	; 0x01
     fc4:	7a 83       	std	Y+2, r23	; 0x02
     fc6:	8b 83       	std	Y+3, r24	; 0x03
     fc8:	9c 83       	std	Y+4, r25	; 0x04
     fca:	2d 83       	std	Y+5, r18	; 0x05
     fcc:	3e 83       	std	Y+6, r19	; 0x06
     fce:	4f 83       	std	Y+7, r20	; 0x07
     fd0:	58 87       	std	Y+8, r21	; 0x08
     fd2:	e9 e0       	ldi	r30, 0x09	; 9
     fd4:	ee 2e       	mov	r14, r30
     fd6:	f1 2c       	mov	r15, r1
     fd8:	ec 0e       	add	r14, r28
     fda:	fd 1e       	adc	r15, r29
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	b7 01       	movw	r22, r14
     fe2:	0e 94 39 0b 	call	0x1672	; 0x1672 <__unpack_f>
     fe6:	8e 01       	movw	r16, r28
     fe8:	0f 5e       	subi	r16, 0xEF	; 239
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	ce 01       	movw	r24, r28
     fee:	05 96       	adiw	r24, 0x05	; 5
     ff0:	b8 01       	movw	r22, r16
     ff2:	0e 94 39 0b 	call	0x1672	; 0x1672 <__unpack_f>
     ff6:	8a 89       	ldd	r24, Y+18	; 0x12
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	89 27       	eor	r24, r25
     ffc:	8a 8b       	std	Y+18, r24	; 0x12
     ffe:	c7 01       	movw	r24, r14
    1000:	b8 01       	movw	r22, r16
    1002:	ae 01       	movw	r20, r28
    1004:	47 5e       	subi	r20, 0xE7	; 231
    1006:	5f 4f       	sbci	r21, 0xFF	; 255
    1008:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_fpadd_parts>
    100c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__pack_f>
    1010:	a0 96       	adiw	r28, 0x20	; 32
    1012:	e6 e0       	ldi	r30, 0x06	; 6
    1014:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__epilogue_restores__+0x18>

00001018 <__addsf3>:
    1018:	a0 e2       	ldi	r26, 0x20	; 32
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e2 e1       	ldi	r30, 0x12	; 18
    101e:	f8 e0       	ldi	r31, 0x08	; 8
    1020:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__prologue_saves__+0x18>
    1024:	69 83       	std	Y+1, r22	; 0x01
    1026:	7a 83       	std	Y+2, r23	; 0x02
    1028:	8b 83       	std	Y+3, r24	; 0x03
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	2d 83       	std	Y+5, r18	; 0x05
    102e:	3e 83       	std	Y+6, r19	; 0x06
    1030:	4f 83       	std	Y+7, r20	; 0x07
    1032:	58 87       	std	Y+8, r21	; 0x08
    1034:	f9 e0       	ldi	r31, 0x09	; 9
    1036:	ef 2e       	mov	r14, r31
    1038:	f1 2c       	mov	r15, r1
    103a:	ec 0e       	add	r14, r28
    103c:	fd 1e       	adc	r15, r29
    103e:	ce 01       	movw	r24, r28
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	b7 01       	movw	r22, r14
    1044:	0e 94 39 0b 	call	0x1672	; 0x1672 <__unpack_f>
    1048:	8e 01       	movw	r16, r28
    104a:	0f 5e       	subi	r16, 0xEF	; 239
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	ce 01       	movw	r24, r28
    1050:	05 96       	adiw	r24, 0x05	; 5
    1052:	b8 01       	movw	r22, r16
    1054:	0e 94 39 0b 	call	0x1672	; 0x1672 <__unpack_f>
    1058:	c7 01       	movw	r24, r14
    105a:	b8 01       	movw	r22, r16
    105c:	ae 01       	movw	r20, r28
    105e:	47 5e       	subi	r20, 0xE7	; 231
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_fpadd_parts>
    1066:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__pack_f>
    106a:	a0 96       	adiw	r28, 0x20	; 32
    106c:	e6 e0       	ldi	r30, 0x06	; 6
    106e:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__epilogue_restores__+0x18>

00001072 <__mulsf3>:
    1072:	a0 e2       	ldi	r26, 0x20	; 32
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ef e3       	ldi	r30, 0x3F	; 63
    1078:	f8 e0       	ldi	r31, 0x08	; 8
    107a:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__prologue_saves__>
    107e:	69 83       	std	Y+1, r22	; 0x01
    1080:	7a 83       	std	Y+2, r23	; 0x02
    1082:	8b 83       	std	Y+3, r24	; 0x03
    1084:	9c 83       	std	Y+4, r25	; 0x04
    1086:	2d 83       	std	Y+5, r18	; 0x05
    1088:	3e 83       	std	Y+6, r19	; 0x06
    108a:	4f 83       	std	Y+7, r20	; 0x07
    108c:	58 87       	std	Y+8, r21	; 0x08
    108e:	ce 01       	movw	r24, r28
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	be 01       	movw	r22, r28
    1094:	67 5f       	subi	r22, 0xF7	; 247
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	0e 94 39 0b 	call	0x1672	; 0x1672 <__unpack_f>
    109c:	ce 01       	movw	r24, r28
    109e:	05 96       	adiw	r24, 0x05	; 5
    10a0:	be 01       	movw	r22, r28
    10a2:	6f 5e       	subi	r22, 0xEF	; 239
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	0e 94 39 0b 	call	0x1672	; 0x1672 <__unpack_f>
    10aa:	99 85       	ldd	r25, Y+9	; 0x09
    10ac:	92 30       	cpi	r25, 0x02	; 2
    10ae:	88 f0       	brcs	.+34     	; 0x10d2 <__mulsf3+0x60>
    10b0:	89 89       	ldd	r24, Y+17	; 0x11
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	c8 f0       	brcs	.+50     	; 0x10e8 <__mulsf3+0x76>
    10b6:	94 30       	cpi	r25, 0x04	; 4
    10b8:	19 f4       	brne	.+6      	; 0x10c0 <__mulsf3+0x4e>
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	51 f4       	brne	.+20     	; 0x10d2 <__mulsf3+0x60>
    10be:	04 c0       	rjmp	.+8      	; 0x10c8 <__mulsf3+0x56>
    10c0:	84 30       	cpi	r24, 0x04	; 4
    10c2:	29 f4       	brne	.+10     	; 0x10ce <__mulsf3+0x5c>
    10c4:	92 30       	cpi	r25, 0x02	; 2
    10c6:	81 f4       	brne	.+32     	; 0x10e8 <__mulsf3+0x76>
    10c8:	81 ea       	ldi	r24, 0xA1	; 161
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	c6 c0       	rjmp	.+396    	; 0x125a <__mulsf3+0x1e8>
    10ce:	92 30       	cpi	r25, 0x02	; 2
    10d0:	49 f4       	brne	.+18     	; 0x10e4 <__mulsf3+0x72>
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d6:	8a 89       	ldd	r24, Y+18	; 0x12
    10d8:	98 13       	cpse	r25, r24
    10da:	21 e0       	ldi	r18, 0x01	; 1
    10dc:	2a 87       	std	Y+10, r18	; 0x0a
    10de:	ce 01       	movw	r24, r28
    10e0:	09 96       	adiw	r24, 0x09	; 9
    10e2:	bb c0       	rjmp	.+374    	; 0x125a <__mulsf3+0x1e8>
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	49 f4       	brne	.+18     	; 0x10fa <__mulsf3+0x88>
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	8a 89       	ldd	r24, Y+18	; 0x12
    10ee:	98 13       	cpse	r25, r24
    10f0:	21 e0       	ldi	r18, 0x01	; 1
    10f2:	2a 8b       	std	Y+18, r18	; 0x12
    10f4:	ce 01       	movw	r24, r28
    10f6:	41 96       	adiw	r24, 0x11	; 17
    10f8:	b0 c0       	rjmp	.+352    	; 0x125a <__mulsf3+0x1e8>
    10fa:	2d 84       	ldd	r2, Y+13	; 0x0d
    10fc:	3e 84       	ldd	r3, Y+14	; 0x0e
    10fe:	4f 84       	ldd	r4, Y+15	; 0x0f
    1100:	58 88       	ldd	r5, Y+16	; 0x10
    1102:	6d 88       	ldd	r6, Y+21	; 0x15
    1104:	7e 88       	ldd	r7, Y+22	; 0x16
    1106:	8f 88       	ldd	r8, Y+23	; 0x17
    1108:	98 8c       	ldd	r9, Y+24	; 0x18
    110a:	ee 24       	eor	r14, r14
    110c:	ff 24       	eor	r15, r15
    110e:	87 01       	movw	r16, r14
    1110:	aa 24       	eor	r10, r10
    1112:	bb 24       	eor	r11, r11
    1114:	65 01       	movw	r12, r10
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	e0 e0       	ldi	r30, 0x00	; 0
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	c1 01       	movw	r24, r2
    1124:	81 70       	andi	r24, 0x01	; 1
    1126:	90 70       	andi	r25, 0x00	; 0
    1128:	89 2b       	or	r24, r25
    112a:	e9 f0       	breq	.+58     	; 0x1166 <__mulsf3+0xf4>
    112c:	e6 0c       	add	r14, r6
    112e:	f7 1c       	adc	r15, r7
    1130:	08 1d       	adc	r16, r8
    1132:	19 1d       	adc	r17, r9
    1134:	9a 01       	movw	r18, r20
    1136:	ab 01       	movw	r20, r22
    1138:	2a 0d       	add	r18, r10
    113a:	3b 1d       	adc	r19, r11
    113c:	4c 1d       	adc	r20, r12
    113e:	5d 1d       	adc	r21, r13
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a0 e0       	ldi	r26, 0x00	; 0
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e6 14       	cp	r14, r6
    114a:	f7 04       	cpc	r15, r7
    114c:	08 05       	cpc	r16, r8
    114e:	19 05       	cpc	r17, r9
    1150:	20 f4       	brcc	.+8      	; 0x115a <__mulsf3+0xe8>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	ba 01       	movw	r22, r20
    115c:	a9 01       	movw	r20, r18
    115e:	48 0f       	add	r20, r24
    1160:	59 1f       	adc	r21, r25
    1162:	6a 1f       	adc	r22, r26
    1164:	7b 1f       	adc	r23, r27
    1166:	aa 0c       	add	r10, r10
    1168:	bb 1c       	adc	r11, r11
    116a:	cc 1c       	adc	r12, r12
    116c:	dd 1c       	adc	r13, r13
    116e:	97 fe       	sbrs	r9, 7
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <__mulsf3+0x110>
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a0 e0       	ldi	r26, 0x00	; 0
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	a8 2a       	or	r10, r24
    117c:	b9 2a       	or	r11, r25
    117e:	ca 2a       	or	r12, r26
    1180:	db 2a       	or	r13, r27
    1182:	31 96       	adiw	r30, 0x01	; 1
    1184:	e0 32       	cpi	r30, 0x20	; 32
    1186:	f1 05       	cpc	r31, r1
    1188:	49 f0       	breq	.+18     	; 0x119c <__mulsf3+0x12a>
    118a:	66 0c       	add	r6, r6
    118c:	77 1c       	adc	r7, r7
    118e:	88 1c       	adc	r8, r8
    1190:	99 1c       	adc	r9, r9
    1192:	56 94       	lsr	r5
    1194:	47 94       	ror	r4
    1196:	37 94       	ror	r3
    1198:	27 94       	ror	r2
    119a:	c3 cf       	rjmp	.-122    	; 0x1122 <__mulsf3+0xb0>
    119c:	fa 85       	ldd	r31, Y+10	; 0x0a
    119e:	ea 89       	ldd	r30, Y+18	; 0x12
    11a0:	2b 89       	ldd	r18, Y+19	; 0x13
    11a2:	3c 89       	ldd	r19, Y+20	; 0x14
    11a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11a8:	28 0f       	add	r18, r24
    11aa:	39 1f       	adc	r19, r25
    11ac:	2e 5f       	subi	r18, 0xFE	; 254
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	17 c0       	rjmp	.+46     	; 0x11e0 <__mulsf3+0x16e>
    11b2:	ca 01       	movw	r24, r20
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	90 70       	andi	r25, 0x00	; 0
    11b8:	89 2b       	or	r24, r25
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <__mulsf3+0x162>
    11bc:	16 95       	lsr	r17
    11be:	07 95       	ror	r16
    11c0:	f7 94       	ror	r15
    11c2:	e7 94       	ror	r14
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a0 e0       	ldi	r26, 0x00	; 0
    11ca:	b0 e8       	ldi	r27, 0x80	; 128
    11cc:	e8 2a       	or	r14, r24
    11ce:	f9 2a       	or	r15, r25
    11d0:	0a 2b       	or	r16, r26
    11d2:	1b 2b       	or	r17, r27
    11d4:	76 95       	lsr	r23
    11d6:	67 95       	ror	r22
    11d8:	57 95       	ror	r21
    11da:	47 95       	ror	r20
    11dc:	2f 5f       	subi	r18, 0xFF	; 255
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	77 fd       	sbrc	r23, 7
    11e2:	e7 cf       	rjmp	.-50     	; 0x11b2 <__mulsf3+0x140>
    11e4:	0c c0       	rjmp	.+24     	; 0x11fe <__mulsf3+0x18c>
    11e6:	44 0f       	add	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	66 1f       	adc	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	17 fd       	sbrc	r17, 7
    11f0:	41 60       	ori	r20, 0x01	; 1
    11f2:	ee 0c       	add	r14, r14
    11f4:	ff 1c       	adc	r15, r15
    11f6:	00 1f       	adc	r16, r16
    11f8:	11 1f       	adc	r17, r17
    11fa:	21 50       	subi	r18, 0x01	; 1
    11fc:	30 40       	sbci	r19, 0x00	; 0
    11fe:	40 30       	cpi	r20, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	59 07       	cpc	r21, r25
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	69 07       	cpc	r22, r25
    1208:	90 e4       	ldi	r25, 0x40	; 64
    120a:	79 07       	cpc	r23, r25
    120c:	60 f3       	brcs	.-40     	; 0x11e6 <__mulsf3+0x174>
    120e:	2b 8f       	std	Y+27, r18	; 0x1b
    1210:	3c 8f       	std	Y+28, r19	; 0x1c
    1212:	db 01       	movw	r26, r22
    1214:	ca 01       	movw	r24, r20
    1216:	8f 77       	andi	r24, 0x7F	; 127
    1218:	90 70       	andi	r25, 0x00	; 0
    121a:	a0 70       	andi	r26, 0x00	; 0
    121c:	b0 70       	andi	r27, 0x00	; 0
    121e:	80 34       	cpi	r24, 0x40	; 64
    1220:	91 05       	cpc	r25, r1
    1222:	a1 05       	cpc	r26, r1
    1224:	b1 05       	cpc	r27, r1
    1226:	61 f4       	brne	.+24     	; 0x1240 <__mulsf3+0x1ce>
    1228:	47 fd       	sbrc	r20, 7
    122a:	0a c0       	rjmp	.+20     	; 0x1240 <__mulsf3+0x1ce>
    122c:	e1 14       	cp	r14, r1
    122e:	f1 04       	cpc	r15, r1
    1230:	01 05       	cpc	r16, r1
    1232:	11 05       	cpc	r17, r1
    1234:	29 f0       	breq	.+10     	; 0x1240 <__mulsf3+0x1ce>
    1236:	40 5c       	subi	r20, 0xC0	; 192
    1238:	5f 4f       	sbci	r21, 0xFF	; 255
    123a:	6f 4f       	sbci	r22, 0xFF	; 255
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	40 78       	andi	r20, 0x80	; 128
    1240:	1a 8e       	std	Y+26, r1	; 0x1a
    1242:	fe 17       	cp	r31, r30
    1244:	11 f0       	breq	.+4      	; 0x124a <__mulsf3+0x1d8>
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	8a 8f       	std	Y+26, r24	; 0x1a
    124a:	4d 8f       	std	Y+29, r20	; 0x1d
    124c:	5e 8f       	std	Y+30, r21	; 0x1e
    124e:	6f 8f       	std	Y+31, r22	; 0x1f
    1250:	78 a3       	std	Y+32, r23	; 0x20
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	89 8f       	std	Y+25, r24	; 0x19
    1256:	ce 01       	movw	r24, r28
    1258:	49 96       	adiw	r24, 0x19	; 25
    125a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__pack_f>
    125e:	a0 96       	adiw	r28, 0x20	; 32
    1260:	e2 e1       	ldi	r30, 0x12	; 18
    1262:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__epilogue_restores__>

00001266 <__gtsf2>:
    1266:	a8 e1       	ldi	r26, 0x18	; 24
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e9 e3       	ldi	r30, 0x39	; 57
    126c:	f9 e0       	ldi	r31, 0x09	; 9
    126e:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__prologue_saves__+0x18>
    1272:	69 83       	std	Y+1, r22	; 0x01
    1274:	7a 83       	std	Y+2, r23	; 0x02
    1276:	8b 83       	std	Y+3, r24	; 0x03
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	2d 83       	std	Y+5, r18	; 0x05
    127c:	3e 83       	std	Y+6, r19	; 0x06
    127e:	4f 83       	std	Y+7, r20	; 0x07
    1280:	58 87       	std	Y+8, r21	; 0x08
    1282:	89 e0       	ldi	r24, 0x09	; 9
    1284:	e8 2e       	mov	r14, r24
    1286:	f1 2c       	mov	r15, r1
    1288:	ec 0e       	add	r14, r28
    128a:	fd 1e       	adc	r15, r29
    128c:	ce 01       	movw	r24, r28
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	b7 01       	movw	r22, r14
    1292:	0e 94 39 0b 	call	0x1672	; 0x1672 <__unpack_f>
    1296:	8e 01       	movw	r16, r28
    1298:	0f 5e       	subi	r16, 0xEF	; 239
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	ce 01       	movw	r24, r28
    129e:	05 96       	adiw	r24, 0x05	; 5
    12a0:	b8 01       	movw	r22, r16
    12a2:	0e 94 39 0b 	call	0x1672	; 0x1672 <__unpack_f>
    12a6:	89 85       	ldd	r24, Y+9	; 0x09
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	40 f0       	brcs	.+16     	; 0x12bc <__gtsf2+0x56>
    12ac:	89 89       	ldd	r24, Y+17	; 0x11
    12ae:	82 30       	cpi	r24, 0x02	; 2
    12b0:	28 f0       	brcs	.+10     	; 0x12bc <__gtsf2+0x56>
    12b2:	c7 01       	movw	r24, r14
    12b4:	b8 01       	movw	r22, r16
    12b6:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__fpcmp_parts_f>
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <__gtsf2+0x58>
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	68 96       	adiw	r28, 0x18	; 24
    12c0:	e6 e0       	ldi	r30, 0x06	; 6
    12c2:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__epilogue_restores__+0x18>

000012c6 <__floatsisf>:
    12c6:	a8 e0       	ldi	r26, 0x08	; 8
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e9 e6       	ldi	r30, 0x69	; 105
    12cc:	f9 e0       	ldi	r31, 0x09	; 9
    12ce:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__prologue_saves__+0x12>
    12d2:	9b 01       	movw	r18, r22
    12d4:	ac 01       	movw	r20, r24
    12d6:	83 e0       	ldi	r24, 0x03	; 3
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	da 01       	movw	r26, r20
    12dc:	c9 01       	movw	r24, r18
    12de:	88 27       	eor	r24, r24
    12e0:	b7 fd       	sbrc	r27, 7
    12e2:	83 95       	inc	r24
    12e4:	99 27       	eor	r25, r25
    12e6:	aa 27       	eor	r26, r26
    12e8:	bb 27       	eor	r27, r27
    12ea:	b8 2e       	mov	r11, r24
    12ec:	21 15       	cp	r18, r1
    12ee:	31 05       	cpc	r19, r1
    12f0:	41 05       	cpc	r20, r1
    12f2:	51 05       	cpc	r21, r1
    12f4:	19 f4       	brne	.+6      	; 0x12fc <__floatsisf+0x36>
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	3a c0       	rjmp	.+116    	; 0x1370 <__floatsisf+0xaa>
    12fc:	88 23       	and	r24, r24
    12fe:	a9 f0       	breq	.+42     	; 0x132a <__floatsisf+0x64>
    1300:	20 30       	cpi	r18, 0x00	; 0
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	38 07       	cpc	r19, r24
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	48 07       	cpc	r20, r24
    130a:	80 e8       	ldi	r24, 0x80	; 128
    130c:	58 07       	cpc	r21, r24
    130e:	29 f4       	brne	.+10     	; 0x131a <__floatsisf+0x54>
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	9f ec       	ldi	r25, 0xCF	; 207
    1318:	30 c0       	rjmp	.+96     	; 0x137a <__floatsisf+0xb4>
    131a:	ee 24       	eor	r14, r14
    131c:	ff 24       	eor	r15, r15
    131e:	87 01       	movw	r16, r14
    1320:	e2 1a       	sub	r14, r18
    1322:	f3 0a       	sbc	r15, r19
    1324:	04 0b       	sbc	r16, r20
    1326:	15 0b       	sbc	r17, r21
    1328:	02 c0       	rjmp	.+4      	; 0x132e <__floatsisf+0x68>
    132a:	79 01       	movw	r14, r18
    132c:	8a 01       	movw	r16, r20
    132e:	8e e1       	ldi	r24, 0x1E	; 30
    1330:	c8 2e       	mov	r12, r24
    1332:	d1 2c       	mov	r13, r1
    1334:	dc 82       	std	Y+4, r13	; 0x04
    1336:	cb 82       	std	Y+3, r12	; 0x03
    1338:	ed 82       	std	Y+5, r14	; 0x05
    133a:	fe 82       	std	Y+6, r15	; 0x06
    133c:	0f 83       	std	Y+7, r16	; 0x07
    133e:	18 87       	std	Y+8, r17	; 0x08
    1340:	c8 01       	movw	r24, r16
    1342:	b7 01       	movw	r22, r14
    1344:	0e 94 15 0a 	call	0x142a	; 0x142a <__clzsi2>
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	18 16       	cp	r1, r24
    134c:	19 06       	cpc	r1, r25
    134e:	84 f4       	brge	.+32     	; 0x1370 <__floatsisf+0xaa>
    1350:	08 2e       	mov	r0, r24
    1352:	04 c0       	rjmp	.+8      	; 0x135c <__floatsisf+0x96>
    1354:	ee 0c       	add	r14, r14
    1356:	ff 1c       	adc	r15, r15
    1358:	00 1f       	adc	r16, r16
    135a:	11 1f       	adc	r17, r17
    135c:	0a 94       	dec	r0
    135e:	d2 f7       	brpl	.-12     	; 0x1354 <__floatsisf+0x8e>
    1360:	ed 82       	std	Y+5, r14	; 0x05
    1362:	fe 82       	std	Y+6, r15	; 0x06
    1364:	0f 83       	std	Y+7, r16	; 0x07
    1366:	18 87       	std	Y+8, r17	; 0x08
    1368:	c8 1a       	sub	r12, r24
    136a:	d9 0a       	sbc	r13, r25
    136c:	dc 82       	std	Y+4, r13	; 0x04
    136e:	cb 82       	std	Y+3, r12	; 0x03
    1370:	ba 82       	std	Y+2, r11	; 0x02
    1372:	ce 01       	movw	r24, r28
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__pack_f>
    137a:	28 96       	adiw	r28, 0x08	; 8
    137c:	e9 e0       	ldi	r30, 0x09	; 9
    137e:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__epilogue_restores__+0x12>

00001382 <__fixsfsi>:
    1382:	ac e0       	ldi	r26, 0x0C	; 12
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e7 ec       	ldi	r30, 0xC7	; 199
    1388:	f9 e0       	ldi	r31, 0x09	; 9
    138a:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__prologue_saves__+0x20>
    138e:	69 83       	std	Y+1, r22	; 0x01
    1390:	7a 83       	std	Y+2, r23	; 0x02
    1392:	8b 83       	std	Y+3, r24	; 0x03
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	ce 01       	movw	r24, r28
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	be 01       	movw	r22, r28
    139c:	6b 5f       	subi	r22, 0xFB	; 251
    139e:	7f 4f       	sbci	r23, 0xFF	; 255
    13a0:	0e 94 39 0b 	call	0x1672	; 0x1672 <__unpack_f>
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	82 30       	cpi	r24, 0x02	; 2
    13a8:	61 f1       	breq	.+88     	; 0x1402 <__fixsfsi+0x80>
    13aa:	82 30       	cpi	r24, 0x02	; 2
    13ac:	50 f1       	brcs	.+84     	; 0x1402 <__fixsfsi+0x80>
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	21 f4       	brne	.+8      	; 0x13ba <__fixsfsi+0x38>
    13b2:	8e 81       	ldd	r24, Y+6	; 0x06
    13b4:	88 23       	and	r24, r24
    13b6:	51 f1       	breq	.+84     	; 0x140c <__fixsfsi+0x8a>
    13b8:	2e c0       	rjmp	.+92     	; 0x1416 <__fixsfsi+0x94>
    13ba:	2f 81       	ldd	r18, Y+7	; 0x07
    13bc:	38 85       	ldd	r19, Y+8	; 0x08
    13be:	37 fd       	sbrc	r19, 7
    13c0:	20 c0       	rjmp	.+64     	; 0x1402 <__fixsfsi+0x80>
    13c2:	6e 81       	ldd	r22, Y+6	; 0x06
    13c4:	2f 31       	cpi	r18, 0x1F	; 31
    13c6:	31 05       	cpc	r19, r1
    13c8:	1c f0       	brlt	.+6      	; 0x13d0 <__fixsfsi+0x4e>
    13ca:	66 23       	and	r22, r22
    13cc:	f9 f0       	breq	.+62     	; 0x140c <__fixsfsi+0x8a>
    13ce:	23 c0       	rjmp	.+70     	; 0x1416 <__fixsfsi+0x94>
    13d0:	8e e1       	ldi	r24, 0x1E	; 30
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	82 1b       	sub	r24, r18
    13d6:	93 0b       	sbc	r25, r19
    13d8:	29 85       	ldd	r18, Y+9	; 0x09
    13da:	3a 85       	ldd	r19, Y+10	; 0x0a
    13dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    13de:	5c 85       	ldd	r21, Y+12	; 0x0c
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <__fixsfsi+0x68>
    13e2:	56 95       	lsr	r21
    13e4:	47 95       	ror	r20
    13e6:	37 95       	ror	r19
    13e8:	27 95       	ror	r18
    13ea:	8a 95       	dec	r24
    13ec:	d2 f7       	brpl	.-12     	; 0x13e2 <__fixsfsi+0x60>
    13ee:	66 23       	and	r22, r22
    13f0:	b1 f0       	breq	.+44     	; 0x141e <__fixsfsi+0x9c>
    13f2:	50 95       	com	r21
    13f4:	40 95       	com	r20
    13f6:	30 95       	com	r19
    13f8:	21 95       	neg	r18
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	4f 4f       	sbci	r20, 0xFF	; 255
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	0e c0       	rjmp	.+28     	; 0x141e <__fixsfsi+0x9c>
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	09 c0       	rjmp	.+18     	; 0x141e <__fixsfsi+0x9c>
    140c:	2f ef       	ldi	r18, 0xFF	; 255
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	4f ef       	ldi	r20, 0xFF	; 255
    1412:	5f e7       	ldi	r21, 0x7F	; 127
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__fixsfsi+0x9c>
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e8       	ldi	r21, 0x80	; 128
    141e:	b9 01       	movw	r22, r18
    1420:	ca 01       	movw	r24, r20
    1422:	2c 96       	adiw	r28, 0x0c	; 12
    1424:	e2 e0       	ldi	r30, 0x02	; 2
    1426:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__epilogue_restores__+0x20>

0000142a <__clzsi2>:
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	7b 01       	movw	r14, r22
    1434:	8c 01       	movw	r16, r24
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	e8 16       	cp	r14, r24
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	f8 06       	cpc	r15, r24
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	08 07       	cpc	r16, r24
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	18 07       	cpc	r17, r24
    1446:	88 f4       	brcc	.+34     	; 0x146a <__clzsi2+0x40>
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	e8 16       	cp	r14, r24
    144c:	f1 04       	cpc	r15, r1
    144e:	01 05       	cpc	r16, r1
    1450:	11 05       	cpc	r17, r1
    1452:	31 f0       	breq	.+12     	; 0x1460 <__clzsi2+0x36>
    1454:	28 f0       	brcs	.+10     	; 0x1460 <__clzsi2+0x36>
    1456:	88 e0       	ldi	r24, 0x08	; 8
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	a0 e0       	ldi	r26, 0x00	; 0
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	17 c0       	rjmp	.+46     	; 0x148e <__clzsi2+0x64>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 e0       	ldi	r26, 0x00	; 0
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	12 c0       	rjmp	.+36     	; 0x148e <__clzsi2+0x64>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	e8 16       	cp	r14, r24
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	f8 06       	cpc	r15, r24
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	08 07       	cpc	r16, r24
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	18 07       	cpc	r17, r24
    147a:	28 f0       	brcs	.+10     	; 0x1486 <__clzsi2+0x5c>
    147c:	88 e1       	ldi	r24, 0x18	; 24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 e0       	ldi	r26, 0x00	; 0
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	04 c0       	rjmp	.+8      	; 0x148e <__clzsi2+0x64>
    1486:	80 e1       	ldi	r24, 0x10	; 16
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a0 e0       	ldi	r26, 0x00	; 0
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	20 e2       	ldi	r18, 0x20	; 32
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	28 1b       	sub	r18, r24
    1498:	39 0b       	sbc	r19, r25
    149a:	4a 0b       	sbc	r20, r26
    149c:	5b 0b       	sbc	r21, r27
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <__clzsi2+0x7e>
    14a0:	16 95       	lsr	r17
    14a2:	07 95       	ror	r16
    14a4:	f7 94       	ror	r15
    14a6:	e7 94       	ror	r14
    14a8:	8a 95       	dec	r24
    14aa:	d2 f7       	brpl	.-12     	; 0x14a0 <__clzsi2+0x76>
    14ac:	f7 01       	movw	r30, r14
    14ae:	e7 55       	subi	r30, 0x57	; 87
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	28 1b       	sub	r18, r24
    14b6:	31 09       	sbc	r19, r1
    14b8:	41 09       	sbc	r20, r1
    14ba:	51 09       	sbc	r21, r1
    14bc:	c9 01       	movw	r24, r18
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	08 95       	ret

000014c8 <__pack_f>:
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	fc 01       	movw	r30, r24
    14d4:	e4 80       	ldd	r14, Z+4	; 0x04
    14d6:	f5 80       	ldd	r15, Z+5	; 0x05
    14d8:	06 81       	ldd	r16, Z+6	; 0x06
    14da:	17 81       	ldd	r17, Z+7	; 0x07
    14dc:	d1 80       	ldd	r13, Z+1	; 0x01
    14de:	80 81       	ld	r24, Z
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	48 f4       	brcc	.+18     	; 0x14f6 <__pack_f+0x2e>
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a0 e1       	ldi	r26, 0x10	; 16
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e8 2a       	or	r14, r24
    14ee:	f9 2a       	or	r15, r25
    14f0:	0a 2b       	or	r16, r26
    14f2:	1b 2b       	or	r17, r27
    14f4:	a5 c0       	rjmp	.+330    	; 0x1640 <__pack_f+0x178>
    14f6:	84 30       	cpi	r24, 0x04	; 4
    14f8:	09 f4       	brne	.+2      	; 0x14fc <__pack_f+0x34>
    14fa:	9f c0       	rjmp	.+318    	; 0x163a <__pack_f+0x172>
    14fc:	82 30       	cpi	r24, 0x02	; 2
    14fe:	21 f4       	brne	.+8      	; 0x1508 <__pack_f+0x40>
    1500:	ee 24       	eor	r14, r14
    1502:	ff 24       	eor	r15, r15
    1504:	87 01       	movw	r16, r14
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <__pack_f+0x4a>
    1508:	e1 14       	cp	r14, r1
    150a:	f1 04       	cpc	r15, r1
    150c:	01 05       	cpc	r16, r1
    150e:	11 05       	cpc	r17, r1
    1510:	19 f4       	brne	.+6      	; 0x1518 <__pack_f+0x50>
    1512:	e0 e0       	ldi	r30, 0x00	; 0
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	96 c0       	rjmp	.+300    	; 0x1644 <__pack_f+0x17c>
    1518:	62 81       	ldd	r22, Z+2	; 0x02
    151a:	73 81       	ldd	r23, Z+3	; 0x03
    151c:	9f ef       	ldi	r25, 0xFF	; 255
    151e:	62 38       	cpi	r22, 0x82	; 130
    1520:	79 07       	cpc	r23, r25
    1522:	0c f0       	brlt	.+2      	; 0x1526 <__pack_f+0x5e>
    1524:	5b c0       	rjmp	.+182    	; 0x15dc <__pack_f+0x114>
    1526:	22 e8       	ldi	r18, 0x82	; 130
    1528:	3f ef       	ldi	r19, 0xFF	; 255
    152a:	26 1b       	sub	r18, r22
    152c:	37 0b       	sbc	r19, r23
    152e:	2a 31       	cpi	r18, 0x1A	; 26
    1530:	31 05       	cpc	r19, r1
    1532:	2c f0       	brlt	.+10     	; 0x153e <__pack_f+0x76>
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	2a c0       	rjmp	.+84     	; 0x1592 <__pack_f+0xca>
    153e:	b8 01       	movw	r22, r16
    1540:	a7 01       	movw	r20, r14
    1542:	02 2e       	mov	r0, r18
    1544:	04 c0       	rjmp	.+8      	; 0x154e <__pack_f+0x86>
    1546:	76 95       	lsr	r23
    1548:	67 95       	ror	r22
    154a:	57 95       	ror	r21
    154c:	47 95       	ror	r20
    154e:	0a 94       	dec	r0
    1550:	d2 f7       	brpl	.-12     	; 0x1546 <__pack_f+0x7e>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <__pack_f+0x9c>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	aa 1f       	adc	r26, r26
    1562:	bb 1f       	adc	r27, r27
    1564:	2a 95       	dec	r18
    1566:	d2 f7       	brpl	.-12     	; 0x155c <__pack_f+0x94>
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	a1 09       	sbc	r26, r1
    156c:	b1 09       	sbc	r27, r1
    156e:	8e 21       	and	r24, r14
    1570:	9f 21       	and	r25, r15
    1572:	a0 23       	and	r26, r16
    1574:	b1 23       	and	r27, r17
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	a1 05       	cpc	r26, r1
    157a:	b1 05       	cpc	r27, r1
    157c:	21 f0       	breq	.+8      	; 0x1586 <__pack_f+0xbe>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	9a 01       	movw	r18, r20
    1588:	ab 01       	movw	r20, r22
    158a:	28 2b       	or	r18, r24
    158c:	39 2b       	or	r19, r25
    158e:	4a 2b       	or	r20, r26
    1590:	5b 2b       	or	r21, r27
    1592:	da 01       	movw	r26, r20
    1594:	c9 01       	movw	r24, r18
    1596:	8f 77       	andi	r24, 0x7F	; 127
    1598:	90 70       	andi	r25, 0x00	; 0
    159a:	a0 70       	andi	r26, 0x00	; 0
    159c:	b0 70       	andi	r27, 0x00	; 0
    159e:	80 34       	cpi	r24, 0x40	; 64
    15a0:	91 05       	cpc	r25, r1
    15a2:	a1 05       	cpc	r26, r1
    15a4:	b1 05       	cpc	r27, r1
    15a6:	39 f4       	brne	.+14     	; 0x15b6 <__pack_f+0xee>
    15a8:	27 ff       	sbrs	r18, 7
    15aa:	09 c0       	rjmp	.+18     	; 0x15be <__pack_f+0xf6>
    15ac:	20 5c       	subi	r18, 0xC0	; 192
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	4f 4f       	sbci	r20, 0xFF	; 255
    15b2:	5f 4f       	sbci	r21, 0xFF	; 255
    15b4:	04 c0       	rjmp	.+8      	; 0x15be <__pack_f+0xf6>
    15b6:	21 5c       	subi	r18, 0xC1	; 193
    15b8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ba:	4f 4f       	sbci	r20, 0xFF	; 255
    15bc:	5f 4f       	sbci	r21, 0xFF	; 255
    15be:	e0 e0       	ldi	r30, 0x00	; 0
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	20 30       	cpi	r18, 0x00	; 0
    15c4:	a0 e0       	ldi	r26, 0x00	; 0
    15c6:	3a 07       	cpc	r19, r26
    15c8:	a0 e0       	ldi	r26, 0x00	; 0
    15ca:	4a 07       	cpc	r20, r26
    15cc:	a0 e4       	ldi	r26, 0x40	; 64
    15ce:	5a 07       	cpc	r21, r26
    15d0:	10 f0       	brcs	.+4      	; 0x15d6 <__pack_f+0x10e>
    15d2:	e1 e0       	ldi	r30, 0x01	; 1
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	79 01       	movw	r14, r18
    15d8:	8a 01       	movw	r16, r20
    15da:	27 c0       	rjmp	.+78     	; 0x162a <__pack_f+0x162>
    15dc:	60 38       	cpi	r22, 0x80	; 128
    15de:	71 05       	cpc	r23, r1
    15e0:	64 f5       	brge	.+88     	; 0x163a <__pack_f+0x172>
    15e2:	fb 01       	movw	r30, r22
    15e4:	e1 58       	subi	r30, 0x81	; 129
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	d8 01       	movw	r26, r16
    15ea:	c7 01       	movw	r24, r14
    15ec:	8f 77       	andi	r24, 0x7F	; 127
    15ee:	90 70       	andi	r25, 0x00	; 0
    15f0:	a0 70       	andi	r26, 0x00	; 0
    15f2:	b0 70       	andi	r27, 0x00	; 0
    15f4:	80 34       	cpi	r24, 0x40	; 64
    15f6:	91 05       	cpc	r25, r1
    15f8:	a1 05       	cpc	r26, r1
    15fa:	b1 05       	cpc	r27, r1
    15fc:	39 f4       	brne	.+14     	; 0x160c <__pack_f+0x144>
    15fe:	e7 fe       	sbrs	r14, 7
    1600:	0d c0       	rjmp	.+26     	; 0x161c <__pack_f+0x154>
    1602:	80 e4       	ldi	r24, 0x40	; 64
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	a0 e0       	ldi	r26, 0x00	; 0
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <__pack_f+0x14c>
    160c:	8f e3       	ldi	r24, 0x3F	; 63
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	a0 e0       	ldi	r26, 0x00	; 0
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e8 0e       	add	r14, r24
    1616:	f9 1e       	adc	r15, r25
    1618:	0a 1f       	adc	r16, r26
    161a:	1b 1f       	adc	r17, r27
    161c:	17 ff       	sbrs	r17, 7
    161e:	05 c0       	rjmp	.+10     	; 0x162a <__pack_f+0x162>
    1620:	16 95       	lsr	r17
    1622:	07 95       	ror	r16
    1624:	f7 94       	ror	r15
    1626:	e7 94       	ror	r14
    1628:	31 96       	adiw	r30, 0x01	; 1
    162a:	87 e0       	ldi	r24, 0x07	; 7
    162c:	16 95       	lsr	r17
    162e:	07 95       	ror	r16
    1630:	f7 94       	ror	r15
    1632:	e7 94       	ror	r14
    1634:	8a 95       	dec	r24
    1636:	d1 f7       	brne	.-12     	; 0x162c <__pack_f+0x164>
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <__pack_f+0x17c>
    163a:	ee 24       	eor	r14, r14
    163c:	ff 24       	eor	r15, r15
    163e:	87 01       	movw	r16, r14
    1640:	ef ef       	ldi	r30, 0xFF	; 255
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	6e 2f       	mov	r22, r30
    1646:	67 95       	ror	r22
    1648:	66 27       	eor	r22, r22
    164a:	67 95       	ror	r22
    164c:	90 2f       	mov	r25, r16
    164e:	9f 77       	andi	r25, 0x7F	; 127
    1650:	d7 94       	ror	r13
    1652:	dd 24       	eor	r13, r13
    1654:	d7 94       	ror	r13
    1656:	8e 2f       	mov	r24, r30
    1658:	86 95       	lsr	r24
    165a:	49 2f       	mov	r20, r25
    165c:	46 2b       	or	r20, r22
    165e:	58 2f       	mov	r21, r24
    1660:	5d 29       	or	r21, r13
    1662:	b7 01       	movw	r22, r14
    1664:	ca 01       	movw	r24, r20
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	ff 90       	pop	r15
    166c:	ef 90       	pop	r14
    166e:	df 90       	pop	r13
    1670:	08 95       	ret

00001672 <__unpack_f>:
    1672:	fc 01       	movw	r30, r24
    1674:	db 01       	movw	r26, r22
    1676:	40 81       	ld	r20, Z
    1678:	51 81       	ldd	r21, Z+1	; 0x01
    167a:	22 81       	ldd	r18, Z+2	; 0x02
    167c:	62 2f       	mov	r22, r18
    167e:	6f 77       	andi	r22, 0x7F	; 127
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	22 1f       	adc	r18, r18
    1684:	22 27       	eor	r18, r18
    1686:	22 1f       	adc	r18, r18
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	89 2f       	mov	r24, r25
    168c:	88 0f       	add	r24, r24
    168e:	82 2b       	or	r24, r18
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	99 1f       	adc	r25, r25
    1696:	99 27       	eor	r25, r25
    1698:	99 1f       	adc	r25, r25
    169a:	11 96       	adiw	r26, 0x01	; 1
    169c:	9c 93       	st	X, r25
    169e:	11 97       	sbiw	r26, 0x01	; 1
    16a0:	21 15       	cp	r18, r1
    16a2:	31 05       	cpc	r19, r1
    16a4:	a9 f5       	brne	.+106    	; 0x1710 <__unpack_f+0x9e>
    16a6:	41 15       	cp	r20, r1
    16a8:	51 05       	cpc	r21, r1
    16aa:	61 05       	cpc	r22, r1
    16ac:	71 05       	cpc	r23, r1
    16ae:	11 f4       	brne	.+4      	; 0x16b4 <__unpack_f+0x42>
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	37 c0       	rjmp	.+110    	; 0x1722 <__unpack_f+0xb0>
    16b4:	82 e8       	ldi	r24, 0x82	; 130
    16b6:	9f ef       	ldi	r25, 0xFF	; 255
    16b8:	13 96       	adiw	r26, 0x03	; 3
    16ba:	9c 93       	st	X, r25
    16bc:	8e 93       	st	-X, r24
    16be:	12 97       	sbiw	r26, 0x02	; 2
    16c0:	9a 01       	movw	r18, r20
    16c2:	ab 01       	movw	r20, r22
    16c4:	67 e0       	ldi	r22, 0x07	; 7
    16c6:	22 0f       	add	r18, r18
    16c8:	33 1f       	adc	r19, r19
    16ca:	44 1f       	adc	r20, r20
    16cc:	55 1f       	adc	r21, r21
    16ce:	6a 95       	dec	r22
    16d0:	d1 f7       	brne	.-12     	; 0x16c6 <__unpack_f+0x54>
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	8c 93       	st	X, r24
    16d6:	0d c0       	rjmp	.+26     	; 0x16f2 <__unpack_f+0x80>
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	44 1f       	adc	r20, r20
    16de:	55 1f       	adc	r21, r21
    16e0:	12 96       	adiw	r26, 0x02	; 2
    16e2:	8d 91       	ld	r24, X+
    16e4:	9c 91       	ld	r25, X
    16e6:	13 97       	sbiw	r26, 0x03	; 3
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	13 96       	adiw	r26, 0x03	; 3
    16ec:	9c 93       	st	X, r25
    16ee:	8e 93       	st	-X, r24
    16f0:	12 97       	sbiw	r26, 0x02	; 2
    16f2:	20 30       	cpi	r18, 0x00	; 0
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	38 07       	cpc	r19, r24
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	48 07       	cpc	r20, r24
    16fc:	80 e4       	ldi	r24, 0x40	; 64
    16fe:	58 07       	cpc	r21, r24
    1700:	58 f3       	brcs	.-42     	; 0x16d8 <__unpack_f+0x66>
    1702:	14 96       	adiw	r26, 0x04	; 4
    1704:	2d 93       	st	X+, r18
    1706:	3d 93       	st	X+, r19
    1708:	4d 93       	st	X+, r20
    170a:	5c 93       	st	X, r21
    170c:	17 97       	sbiw	r26, 0x07	; 7
    170e:	08 95       	ret
    1710:	2f 3f       	cpi	r18, 0xFF	; 255
    1712:	31 05       	cpc	r19, r1
    1714:	79 f4       	brne	.+30     	; 0x1734 <__unpack_f+0xc2>
    1716:	41 15       	cp	r20, r1
    1718:	51 05       	cpc	r21, r1
    171a:	61 05       	cpc	r22, r1
    171c:	71 05       	cpc	r23, r1
    171e:	19 f4       	brne	.+6      	; 0x1726 <__unpack_f+0xb4>
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	8c 93       	st	X, r24
    1724:	08 95       	ret
    1726:	64 ff       	sbrs	r22, 4
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <__unpack_f+0xbe>
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	8c 93       	st	X, r24
    172e:	12 c0       	rjmp	.+36     	; 0x1754 <__unpack_f+0xe2>
    1730:	1c 92       	st	X, r1
    1732:	10 c0       	rjmp	.+32     	; 0x1754 <__unpack_f+0xe2>
    1734:	2f 57       	subi	r18, 0x7F	; 127
    1736:	30 40       	sbci	r19, 0x00	; 0
    1738:	13 96       	adiw	r26, 0x03	; 3
    173a:	3c 93       	st	X, r19
    173c:	2e 93       	st	-X, r18
    173e:	12 97       	sbiw	r26, 0x02	; 2
    1740:	83 e0       	ldi	r24, 0x03	; 3
    1742:	8c 93       	st	X, r24
    1744:	87 e0       	ldi	r24, 0x07	; 7
    1746:	44 0f       	add	r20, r20
    1748:	55 1f       	adc	r21, r21
    174a:	66 1f       	adc	r22, r22
    174c:	77 1f       	adc	r23, r23
    174e:	8a 95       	dec	r24
    1750:	d1 f7       	brne	.-12     	; 0x1746 <__unpack_f+0xd4>
    1752:	70 64       	ori	r23, 0x40	; 64
    1754:	14 96       	adiw	r26, 0x04	; 4
    1756:	4d 93       	st	X+, r20
    1758:	5d 93       	st	X+, r21
    175a:	6d 93       	st	X+, r22
    175c:	7c 93       	st	X, r23
    175e:	17 97       	sbiw	r26, 0x07	; 7
    1760:	08 95       	ret

00001762 <__fpcmp_parts_f>:
    1762:	1f 93       	push	r17
    1764:	dc 01       	movw	r26, r24
    1766:	fb 01       	movw	r30, r22
    1768:	9c 91       	ld	r25, X
    176a:	92 30       	cpi	r25, 0x02	; 2
    176c:	08 f4       	brcc	.+2      	; 0x1770 <__fpcmp_parts_f+0xe>
    176e:	47 c0       	rjmp	.+142    	; 0x17fe <__fpcmp_parts_f+0x9c>
    1770:	80 81       	ld	r24, Z
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	08 f4       	brcc	.+2      	; 0x1778 <__fpcmp_parts_f+0x16>
    1776:	43 c0       	rjmp	.+134    	; 0x17fe <__fpcmp_parts_f+0x9c>
    1778:	94 30       	cpi	r25, 0x04	; 4
    177a:	51 f4       	brne	.+20     	; 0x1790 <__fpcmp_parts_f+0x2e>
    177c:	11 96       	adiw	r26, 0x01	; 1
    177e:	1c 91       	ld	r17, X
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	99 f5       	brne	.+102    	; 0x17ea <__fpcmp_parts_f+0x88>
    1784:	81 81       	ldd	r24, Z+1	; 0x01
    1786:	68 2f       	mov	r22, r24
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	61 1b       	sub	r22, r17
    178c:	71 09       	sbc	r23, r1
    178e:	3f c0       	rjmp	.+126    	; 0x180e <__fpcmp_parts_f+0xac>
    1790:	84 30       	cpi	r24, 0x04	; 4
    1792:	21 f0       	breq	.+8      	; 0x179c <__fpcmp_parts_f+0x3a>
    1794:	92 30       	cpi	r25, 0x02	; 2
    1796:	31 f4       	brne	.+12     	; 0x17a4 <__fpcmp_parts_f+0x42>
    1798:	82 30       	cpi	r24, 0x02	; 2
    179a:	b9 f1       	breq	.+110    	; 0x180a <__fpcmp_parts_f+0xa8>
    179c:	81 81       	ldd	r24, Z+1	; 0x01
    179e:	88 23       	and	r24, r24
    17a0:	89 f1       	breq	.+98     	; 0x1804 <__fpcmp_parts_f+0xa2>
    17a2:	2d c0       	rjmp	.+90     	; 0x17fe <__fpcmp_parts_f+0x9c>
    17a4:	11 96       	adiw	r26, 0x01	; 1
    17a6:	1c 91       	ld	r17, X
    17a8:	11 97       	sbiw	r26, 0x01	; 1
    17aa:	82 30       	cpi	r24, 0x02	; 2
    17ac:	f1 f0       	breq	.+60     	; 0x17ea <__fpcmp_parts_f+0x88>
    17ae:	81 81       	ldd	r24, Z+1	; 0x01
    17b0:	18 17       	cp	r17, r24
    17b2:	d9 f4       	brne	.+54     	; 0x17ea <__fpcmp_parts_f+0x88>
    17b4:	12 96       	adiw	r26, 0x02	; 2
    17b6:	2d 91       	ld	r18, X+
    17b8:	3c 91       	ld	r19, X
    17ba:	13 97       	sbiw	r26, 0x03	; 3
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	93 81       	ldd	r25, Z+3	; 0x03
    17c0:	82 17       	cp	r24, r18
    17c2:	93 07       	cpc	r25, r19
    17c4:	94 f0       	brlt	.+36     	; 0x17ea <__fpcmp_parts_f+0x88>
    17c6:	28 17       	cp	r18, r24
    17c8:	39 07       	cpc	r19, r25
    17ca:	bc f0       	brlt	.+46     	; 0x17fa <__fpcmp_parts_f+0x98>
    17cc:	14 96       	adiw	r26, 0x04	; 4
    17ce:	8d 91       	ld	r24, X+
    17d0:	9d 91       	ld	r25, X+
    17d2:	0d 90       	ld	r0, X+
    17d4:	bc 91       	ld	r27, X
    17d6:	a0 2d       	mov	r26, r0
    17d8:	24 81       	ldd	r18, Z+4	; 0x04
    17da:	35 81       	ldd	r19, Z+5	; 0x05
    17dc:	46 81       	ldd	r20, Z+6	; 0x06
    17de:	57 81       	ldd	r21, Z+7	; 0x07
    17e0:	28 17       	cp	r18, r24
    17e2:	39 07       	cpc	r19, r25
    17e4:	4a 07       	cpc	r20, r26
    17e6:	5b 07       	cpc	r21, r27
    17e8:	18 f4       	brcc	.+6      	; 0x17f0 <__fpcmp_parts_f+0x8e>
    17ea:	11 23       	and	r17, r17
    17ec:	41 f0       	breq	.+16     	; 0x17fe <__fpcmp_parts_f+0x9c>
    17ee:	0a c0       	rjmp	.+20     	; 0x1804 <__fpcmp_parts_f+0xa2>
    17f0:	82 17       	cp	r24, r18
    17f2:	93 07       	cpc	r25, r19
    17f4:	a4 07       	cpc	r26, r20
    17f6:	b5 07       	cpc	r27, r21
    17f8:	40 f4       	brcc	.+16     	; 0x180a <__fpcmp_parts_f+0xa8>
    17fa:	11 23       	and	r17, r17
    17fc:	19 f0       	breq	.+6      	; 0x1804 <__fpcmp_parts_f+0xa2>
    17fe:	61 e0       	ldi	r22, 0x01	; 1
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	05 c0       	rjmp	.+10     	; 0x180e <__fpcmp_parts_f+0xac>
    1804:	6f ef       	ldi	r22, 0xFF	; 255
    1806:	7f ef       	ldi	r23, 0xFF	; 255
    1808:	02 c0       	rjmp	.+4      	; 0x180e <__fpcmp_parts_f+0xac>
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	cb 01       	movw	r24, r22
    1810:	1f 91       	pop	r17
    1812:	08 95       	ret

00001814 <__udivmodhi4>:
    1814:	aa 1b       	sub	r26, r26
    1816:	bb 1b       	sub	r27, r27
    1818:	51 e1       	ldi	r21, 0x11	; 17
    181a:	07 c0       	rjmp	.+14     	; 0x182a <__udivmodhi4_ep>

0000181c <__udivmodhi4_loop>:
    181c:	aa 1f       	adc	r26, r26
    181e:	bb 1f       	adc	r27, r27
    1820:	a6 17       	cp	r26, r22
    1822:	b7 07       	cpc	r27, r23
    1824:	10 f0       	brcs	.+4      	; 0x182a <__udivmodhi4_ep>
    1826:	a6 1b       	sub	r26, r22
    1828:	b7 0b       	sbc	r27, r23

0000182a <__udivmodhi4_ep>:
    182a:	88 1f       	adc	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	5a 95       	dec	r21
    1830:	a9 f7       	brne	.-22     	; 0x181c <__udivmodhi4_loop>
    1832:	80 95       	com	r24
    1834:	90 95       	com	r25
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	08 95       	ret

0000183c <__divmodhi4>:
    183c:	97 fb       	bst	r25, 7
    183e:	09 2e       	mov	r0, r25
    1840:	07 26       	eor	r0, r23
    1842:	0a d0       	rcall	.+20     	; 0x1858 <__divmodhi4_neg1>
    1844:	77 fd       	sbrc	r23, 7
    1846:	04 d0       	rcall	.+8      	; 0x1850 <__divmodhi4_neg2>
    1848:	e5 df       	rcall	.-54     	; 0x1814 <__udivmodhi4>
    184a:	06 d0       	rcall	.+12     	; 0x1858 <__divmodhi4_neg1>
    184c:	00 20       	and	r0, r0
    184e:	1a f4       	brpl	.+6      	; 0x1856 <__divmodhi4_exit>

00001850 <__divmodhi4_neg2>:
    1850:	70 95       	com	r23
    1852:	61 95       	neg	r22
    1854:	7f 4f       	sbci	r23, 0xFF	; 255

00001856 <__divmodhi4_exit>:
    1856:	08 95       	ret

00001858 <__divmodhi4_neg1>:
    1858:	f6 f7       	brtc	.-4      	; 0x1856 <__divmodhi4_exit>
    185a:	90 95       	com	r25
    185c:	81 95       	neg	r24
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	08 95       	ret

00001862 <__prologue_saves__>:
    1862:	2f 92       	push	r2
    1864:	3f 92       	push	r3
    1866:	4f 92       	push	r4
    1868:	5f 92       	push	r5
    186a:	6f 92       	push	r6
    186c:	7f 92       	push	r7
    186e:	8f 92       	push	r8
    1870:	9f 92       	push	r9
    1872:	af 92       	push	r10
    1874:	bf 92       	push	r11
    1876:	cf 92       	push	r12
    1878:	df 92       	push	r13
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	ca 1b       	sub	r28, r26
    188c:	db 0b       	sbc	r29, r27
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	09 94       	ijmp

0000189a <__epilogue_restores__>:
    189a:	2a 88       	ldd	r2, Y+18	; 0x12
    189c:	39 88       	ldd	r3, Y+17	; 0x11
    189e:	48 88       	ldd	r4, Y+16	; 0x10
    18a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    18a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    18a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    18a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    18a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    18aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    18ac:	b9 84       	ldd	r11, Y+9	; 0x09
    18ae:	c8 84       	ldd	r12, Y+8	; 0x08
    18b0:	df 80       	ldd	r13, Y+7	; 0x07
    18b2:	ee 80       	ldd	r14, Y+6	; 0x06
    18b4:	fd 80       	ldd	r15, Y+5	; 0x05
    18b6:	0c 81       	ldd	r16, Y+4	; 0x04
    18b8:	1b 81       	ldd	r17, Y+3	; 0x03
    18ba:	aa 81       	ldd	r26, Y+2	; 0x02
    18bc:	b9 81       	ldd	r27, Y+1	; 0x01
    18be:	ce 0f       	add	r28, r30
    18c0:	d1 1d       	adc	r29, r1
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	ed 01       	movw	r28, r26
    18ce:	08 95       	ret

000018d0 <_exit>:
    18d0:	f8 94       	cli

000018d2 <__stop_program>:
    18d2:	ff cf       	rjmp	.-2      	; 0x18d2 <__stop_program>
